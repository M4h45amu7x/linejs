// deno-lint-ignore-file
/*
 * @module
 * LINEJS Types - Autogenerated by Thrift Compiler (0.20.0)
 */
type Int64 = number | bigint;
import type { Buffer } from "node:buffer";
export const enums: Record<string, Record<string, number>> = {};
export type ApplicationType =
	| 16
	| "IOS"
	| 17
	| "IOS_RC"
	| 18
	| "IOS_BETA"
	| 19
	| "IOS_ALPHA"
	| 32
	| "ANDROID"
	| 33
	| "ANDROID_RC"
	| 34
	| "ANDROID_BETA"
	| 35
	| "ANDROID_ALPHA"
	| 48
	| "WAP"
	| 49
	| "WAP_RC"
	| 50
	| "WAP_BETA"
	| 51
	| "WAP_ALPHA"
	| 64
	| "BOT"
	| 65
	| "BOT_RC"
	| 66
	| "BOT_BETA"
	| 67
	| "BOT_ALPHA"
	| 80
	| "WEB"
	| 81
	| "WEB_RC"
	| 82
	| "WEB_BETA"
	| 83
	| "WEB_ALPHA"
	| 96
	| "DESKTOPWIN"
	| 97
	| "DESKTOPWIN_RC"
	| 98
	| "DESKTOPWIN_BETA"
	| 99
	| "DESKTOPWIN_ALPHA"
	| 112
	| "DESKTOPMAC"
	| 113
	| "DESKTOPMAC_RC"
	| 114
	| "DESKTOPMAC_BETA"
	| 115
	| "DESKTOPMAC_ALPHA"
	| 128
	| "CHANNELGW"
	| 129
	| "CHANNELGW_RC"
	| 130
	| "CHANNELGW_BETA"
	| 131
	| "CHANNELGW_ALPHA"
	| 144
	| "CHANNELCP"
	| 145
	| "CHANNELCP_RC"
	| 146
	| "CHANNELCP_BETA"
	| 147
	| "CHANNELCP_ALPHA"
	| 160
	| "WINPHONE"
	| 161
	| "WINPHONE_RC"
	| 162
	| "WINPHONE_BETA"
	| 163
	| "WINPHONE_ALPHA"
	| 176
	| "BLACKBERRY"
	| 177
	| "BLACKBERRY_RC"
	| 178
	| "BLACKBERRY_BETA"
	| 179
	| "BLACKBERRY_ALPHA"
	| 192
	| "WINMETRO"
	| 193
	| "WINMETRO_RC"
	| 194
	| "WINMETRO_BETA"
	| 195
	| "WINMETRO_ALPHA"
	| 208
	| "S40"
	| 209
	| "S40_RC"
	| 210
	| "S40_BETA"
	| 211
	| "S40_ALPHA"
	| 224
	| "CHRONO"
	| 225
	| "CHRONO_RC"
	| 226
	| "CHRONO_BETA"
	| 227
	| "CHRONO_ALPHA"
	| 256
	| "TIZEN"
	| 257
	| "TIZEN_RC"
	| 258
	| "TIZEN_BETA"
	| 259
	| "TIZEN_ALPHA"
	| 272
	| "VIRTUAL"
	| 288
	| "FIREFOXOS"
	| 289
	| "FIREFOXOS_RC"
	| 290
	| "FIREFOXOS_BETA"
	| 291
	| "FIREFOXOS_ALPHA"
	| 304
	| "IOSIPAD"
	| 305
	| "IOSIPAD_RC"
	| 306
	| "IOSIPAD_BETA"
	| 307
	| "IOSIPAD_ALPHA"
	| 320
	| "BIZIOS"
	| 321
	| "BIZIOS_RC"
	| 322
	| "BIZIOS_BETA"
	| 323
	| "BIZIOS_ALPHA"
	| 336
	| "BIZANDROID"
	| 337
	| "BIZANDROID_RC"
	| 338
	| "BIZANDROID_BETA"
	| 339
	| "BIZANDROID_ALPHA"
	| 352
	| "BIZBOT"
	| 353
	| "BIZBOT_RC"
	| 354
	| "BIZBOT_BETA"
	| 355
	| "BIZBOT_ALPHA"
	| 368
	| "CHROMEOS"
	| 369
	| "CHROMEOS_RC"
	| 370
	| "CHROMEOS_BETA"
	| 371
	| "CHROMEOS_ALPHA"
	| 384
	| "ANDROIDLITE"
	| 385
	| "ANDROIDLITE_RC"
	| 386
	| "ANDROIDLITE_BETA"
	| 387
	| "ANDROIDLITE_ALPHA"
	| 400
	| "WIN10"
	| 401
	| "WIN10_RC"
	| 402
	| "WIN10_BETA"
	| 403
	| "WIN10_ALPHA"
	| 416
	| "BIZWEB"
	| 417
	| "BIZWEB_RC"
	| 418
	| "BIZWEB_BETA"
	| 419
	| "BIZWEB_ALPHA"
	| 432
	| "DUMMYPRIMARY"
	| 433
	| "DUMMYPRIMARY_RC"
	| 434
	| "DUMMYPRIMARY_BETA"
	| 435
	| "DUMMYPRIMARY_ALPHA"
	| 448
	| "SQUARE"
	| 449
	| "SQUARE_RC"
	| 450
	| "SQUARE_BETA"
	| 451
	| "SQUARE_ALPHA"
	| 464
	| "INTERNAL"
	| 465
	| "INTERNAL_RC"
	| 466
	| "INTERNAL_BETA"
	| 467
	| "INTERNAL_ALPHA"
	| 480
	| "CLOVAFRIENDS"
	| 481
	| "CLOVAFRIENDS_RC"
	| 482
	| "CLOVAFRIENDS_BETA"
	| 483
	| "CLOVAFRIENDS_ALPHA"
	| 496
	| "WATCHOS"
	| 497
	| "WATCHOS_RC"
	| 498
	| "WATCHOS_BETA"
	| 499
	| "WATCHOS_ALPHA"
	| 512
	| "OPENCHAT_PLUG"
	| 513
	| "OPENCHAT_PLUG_RC"
	| 514
	| "OPENCHAT_PLUG_BETA"
	| 515
	| "OPENCHAT_PLUG_ALPHA"
	| 528
	| "ANDROIDSECONDARY"
	| 529
	| "ANDROIDSECONDARY_RC"
	| 530
	| "ANDROIDSECONDARY_BETA"
	| 531
	| "ANDROIDSECONDARY_ALPHA"
	| 544
	| "WEAROS"
	| 545
	| "WEAROS_RC"
	| 546
	| "WEAROS_BETA"
	| 547
	| "WEAROS_ALPHA";
enums.ApplicationType = {
	IOS: 16,
	IOS_RC: 17,
	IOS_BETA: 18,
	IOS_ALPHA: 19,
	ANDROID: 32,
	ANDROID_RC: 33,
	ANDROID_BETA: 34,
	ANDROID_ALPHA: 35,
	WAP: 48,
	WAP_RC: 49,
	WAP_BETA: 50,
	WAP_ALPHA: 51,
	BOT: 64,
	BOT_RC: 65,
	BOT_BETA: 66,
	BOT_ALPHA: 67,
	WEB: 80,
	WEB_RC: 81,
	WEB_BETA: 82,
	WEB_ALPHA: 83,
	DESKTOPWIN: 96,
	DESKTOPWIN_RC: 97,
	DESKTOPWIN_BETA: 98,
	DESKTOPWIN_ALPHA: 99,
	DESKTOPMAC: 112,
	DESKTOPMAC_RC: 113,
	DESKTOPMAC_BETA: 114,
	DESKTOPMAC_ALPHA: 115,
	CHANNELGW: 128,
	CHANNELGW_RC: 129,
	CHANNELGW_BETA: 130,
	CHANNELGW_ALPHA: 131,
	CHANNELCP: 144,
	CHANNELCP_RC: 145,
	CHANNELCP_BETA: 146,
	CHANNELCP_ALPHA: 147,
	WINPHONE: 160,
	WINPHONE_RC: 161,
	WINPHONE_BETA: 162,
	WINPHONE_ALPHA: 163,
	BLACKBERRY: 176,
	BLACKBERRY_RC: 177,
	BLACKBERRY_BETA: 178,
	BLACKBERRY_ALPHA: 179,
	WINMETRO: 192,
	WINMETRO_RC: 193,
	WINMETRO_BETA: 194,
	WINMETRO_ALPHA: 195,
	S40: 208,
	S40_RC: 209,
	S40_BETA: 210,
	S40_ALPHA: 211,
	CHRONO: 224,
	CHRONO_RC: 225,
	CHRONO_BETA: 226,
	CHRONO_ALPHA: 227,
	TIZEN: 256,
	TIZEN_RC: 257,
	TIZEN_BETA: 258,
	TIZEN_ALPHA: 259,
	VIRTUAL: 272,
	FIREFOXOS: 288,
	FIREFOXOS_RC: 289,
	FIREFOXOS_BETA: 290,
	FIREFOXOS_ALPHA: 291,
	IOSIPAD: 304,
	IOSIPAD_RC: 305,
	IOSIPAD_BETA: 306,
	IOSIPAD_ALPHA: 307,
	BIZIOS: 320,
	BIZIOS_RC: 321,
	BIZIOS_BETA: 322,
	BIZIOS_ALPHA: 323,
	BIZANDROID: 336,
	BIZANDROID_RC: 337,
	BIZANDROID_BETA: 338,
	BIZANDROID_ALPHA: 339,
	BIZBOT: 352,
	BIZBOT_RC: 353,
	BIZBOT_BETA: 354,
	BIZBOT_ALPHA: 355,
	CHROMEOS: 368,
	CHROMEOS_RC: 369,
	CHROMEOS_BETA: 370,
	CHROMEOS_ALPHA: 371,
	ANDROIDLITE: 384,
	ANDROIDLITE_RC: 385,
	ANDROIDLITE_BETA: 386,
	ANDROIDLITE_ALPHA: 387,
	WIN10: 400,
	WIN10_RC: 401,
	WIN10_BETA: 402,
	WIN10_ALPHA: 403,
	BIZWEB: 416,
	BIZWEB_RC: 417,
	BIZWEB_BETA: 418,
	BIZWEB_ALPHA: 419,
	DUMMYPRIMARY: 432,
	DUMMYPRIMARY_RC: 433,
	DUMMYPRIMARY_BETA: 434,
	DUMMYPRIMARY_ALPHA: 435,
	SQUARE: 448,
	SQUARE_RC: 449,
	SQUARE_BETA: 450,
	SQUARE_ALPHA: 451,
	INTERNAL: 464,
	INTERNAL_RC: 465,
	INTERNAL_BETA: 466,
	INTERNAL_ALPHA: 467,
	CLOVAFRIENDS: 480,
	CLOVAFRIENDS_RC: 481,
	CLOVAFRIENDS_BETA: 482,
	CLOVAFRIENDS_ALPHA: 483,
	WATCHOS: 496,
	WATCHOS_RC: 497,
	WATCHOS_BETA: 498,
	WATCHOS_ALPHA: 499,
	OPENCHAT_PLUG: 512,
	OPENCHAT_PLUG_RC: 513,
	OPENCHAT_PLUG_BETA: 514,
	OPENCHAT_PLUG_ALPHA: 515,
	ANDROIDSECONDARY: 528,
	ANDROIDSECONDARY_RC: 529,
	ANDROIDSECONDARY_BETA: 530,
	ANDROIDSECONDARY_ALPHA: 531,
	WEAROS: 544,
	WEAROS_RC: 545,
	WEAROS_BETA: 546,
	WEAROS_ALPHA: 547,
};

export type ExtendedProfileAttribute = number;

export type PrivacyLevelType = 0 | "PUBLIC" | 1 | "PRIVATE";
enums.PrivacyLevelType = { PUBLIC: 0, PRIVATE: 1 };

export type PaidCallerIdStatus =
	| 0
	| "NOT_SPECIFIED"
	| 1
	| "VALID"
	| 2
	| "VERIFICATION_REQUIRED"
	| 3
	| "NOT_PERMITTED"
	| 4
	| "LIMIT_EXCEEDED"
	| 5
	| "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED";
enums.PaidCallerIdStatus = {
	NOT_SPECIFIED: 0,
	VALID: 1,
	VERIFICATION_REQUIRED: 2,
	NOT_PERMITTED: 3,
	LIMIT_EXCEEDED: 4,
	LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: 5,
};

export type PaidCallProductType = 0 | "COIN" | 1 | "CREDIT" | 2 | "MONTHLY";
enums.PaidCallProductType = { COIN: 0, CREDIT: 1, MONTHLY: 2 };

export type PaidCallType =
	| 0
	| "OUT"
	| 1
	| "IN"
	| 2
	| "TOLLFREE"
	| 3
	| "RECORD"
	| 4
	| "AD"
	| 5
	| "CS";
enums.PaidCallType = { OUT: 0, IN: 1, TOLLFREE: 2, RECORD: 3, AD: 4, CS: 5 };

export type BotType =
	| 0
	| "RESERVED"
	| 1
	| "OFFICIAL"
	| 2
	| "LINE_AT_0"
	| 3
	| "LINE_AT";
enums.BotType = { RESERVED: 0, OFFICIAL: 1, LINE_AT_0: 2, LINE_AT: 3 };

export type BuddyOnAirLabel = 0 | "ON_AIR" | 1 | "LIVE" | 2 | "GLP";
enums.BuddyOnAirLabel = { ON_AIR: 0, LIVE: 1, GLP: 2 };

export type BuddyBannerLinkType =
	| 0
	| "BUDDY_BANNER_LINK_HIDDEN"
	| 1
	| "BUDDY_BANNER_LINK_MID"
	| 2
	| "BUDDY_BANNER_LINK_URL";
enums.BuddyBannerLinkType = {
	BUDDY_BANNER_LINK_HIDDEN: 0,
	BUDDY_BANNER_LINK_MID: 1,
	BUDDY_BANNER_LINK_URL: 2,
};

export type BuddyOnAirType = 0 | "NORMAL" | 1 | "LIVE" | 2 | "VOIP";
enums.BuddyOnAirType = { NORMAL: 0, LIVE: 1, VOIP: 2 };

export type Diff = 0 | "ADDED" | 1 | "UPDATED" | 2 | "REMOVED";
enums.Diff = { ADDED: 0, UPDATED: 1, REMOVED: 2 };

export type ReportType =
	| 1
	| "ADVERTISING"
	| 2
	| "GENDER_HARASSMENT"
	| 3
	| "HARASSMENT"
	| 4
	| "OTHER";
enums.ReportType = {
	ADVERTISING: 1,
	GENDER_HARASSMENT: 2,
	HARASSMENT: 3,
	OTHER: 4,
};

export type SyncTriggerReason =
	| 0
	| "UNKNOWN"
	| 1
	| "REVISION_GAP_TOO_LARGE_CLIENT"
	| 2
	| "REVISION_GAP_TOO_LARGE_SERVER"
	| 3
	| "OPERATION_EXPIRED"
	| 4
	| "REVISION_HOLE"
	| 5
	| "FORCE_TRIGGERED";
enums.SyncTriggerReason = {
	UNKNOWN: 0,
	REVISION_GAP_TOO_LARGE_CLIENT: 1,
	REVISION_GAP_TOO_LARGE_SERVER: 2,
	OPERATION_EXPIRED: 3,
	REVISION_HOLE: 4,
	FORCE_TRIGGERED: 5,
};

export type ReportCategory =
	| 0
	| "PUSH_NORMAL_PLAIN"
	| 1
	| "PUSH_NORMAL_E2EE"
	| 2
	| "PUSH_VOIP_PLAIN"
	| 3
	| "PUSH_VOIP_E2EE";
enums.ReportCategory = {
	PUSH_NORMAL_PLAIN: 0,
	PUSH_NORMAL_E2EE: 1,
	PUSH_VOIP_PLAIN: 2,
	PUSH_VOIP_E2EE: 3,
};

export type BuddyResultState =
	| 1
	| "ACCEPTED"
	| 2
	| "SUCCEEDED"
	| 3
	| "FAILED"
	| 4
	| "CANCELLED"
	| 5
	| "NOTIFY_FAILED"
	| 11
	| "STORING"
	| 21
	| "UPLOADING"
	| 31
	| "NOTIFYING"
	| 41
	| "REMOVING_SUBSCRIPTION"
	| 42
	| "UNREGISTERING_ACCOUNT"
	| 43
	| "NOTIFYING_LEAVE_CHAT";
enums.BuddyResultState = {
	ACCEPTED: 1,
	SUCCEEDED: 2,
	FAILED: 3,
	CANCELLED: 4,
	NOTIFY_FAILED: 5,
	STORING: 11,
	UPLOADING: 21,
	NOTIFYING: 31,
	REMOVING_SUBSCRIPTION: 41,
	UNREGISTERING_ACCOUNT: 42,
	NOTIFYING_LEAVE_CHAT: 43,
};

export type BuddySearchRequestSource =
	| 0
	| "NA"
	| 1
	| "FRIEND_VIEW"
	| 2
	| "OFFICIAL_ACCOUNT_VIEW";
enums.BuddySearchRequestSource = {
	NA: 0,
	FRIEND_VIEW: 1,
	OFFICIAL_ACCOUNT_VIEW: 2,
};

export type CarrierCode =
	| 0
	| "NOT_SPECIFIED"
	| 1
	| "JP_DOCOMO"
	| 2
	| "JP_AU"
	| 3
	| "JP_SOFTBANK"
	| 4
	| "JP_DOCOMO_LINE"
	| 17
	| "KR_SKT"
	| 18
	| "KR_KT"
	| 19
	| "KR_LGT";
enums.CarrierCode = {
	NOT_SPECIFIED: 0,
	JP_DOCOMO: 1,
	JP_AU: 2,
	JP_SOFTBANK: 3,
	JP_DOCOMO_LINE: 4,
	KR_SKT: 17,
	KR_KT: 18,
	KR_LGT: 19,
};

export type ChannelConfiguration =
	| 0
	| "MESSAGE"
	| 1
	| "MESSAGE_NOTIFICATION"
	| 2
	| "NOTIFICATION_CENTER";
enums.ChannelConfiguration = {
	MESSAGE: 0,
	MESSAGE_NOTIFICATION: 1,
	NOTIFICATION_CENTER: 2,
};

export type ChannelPermission = 0 | "PROFILE" | 1 | "FRIENDS" | 2 | "GROUP";
enums.ChannelPermission = { PROFILE: 0, FRIENDS: 1, GROUP: 2 };

export type ChannelFeatureLicense =
	| 26
	| "BLE_LCS_API_USABLE"
	| 27
	| "PROHIBIT_MINIMIZE_CHANNEL_BROWSER"
	| 28
	| "ALLOW_IOS_WEBKIT";
enums.ChannelFeatureLicense = {
	BLE_LCS_API_USABLE: 26,
	PROHIBIT_MINIMIZE_CHANNEL_BROWSER: 27,
	ALLOW_IOS_WEBKIT: 28,
};

export type ChannelErrorCode =
	| 0
	| "ILLEGAL_ARGUMENT"
	| 1
	| "INTERNAL_ERROR"
	| 2
	| "CONNECTION_ERROR"
	| 3
	| "AUTHENTICATIONI_FAILED"
	| 4
	| "NEED_PERMISSION_APPROVAL"
	| 5
	| "COIN_NOT_USABLE"
	| 6
	| "WEBVIEW_NOT_ALLOWED";
enums.ChannelErrorCode = {
	ILLEGAL_ARGUMENT: 0,
	INTERNAL_ERROR: 1,
	CONNECTION_ERROR: 2,
	AUTHENTICATIONI_FAILED: 3,
	NEED_PERMISSION_APPROVAL: 4,
	COIN_NOT_USABLE: 5,
	WEBVIEW_NOT_ALLOWED: 6,
};

export type ChannelSyncType = 0 | "SYNC" | 1 | "REMOVE" | 2 | "REMOVE_ALL";
enums.ChannelSyncType = { SYNC: 0, REMOVE: 1, REMOVE_ALL: 2 };

export type LoginType =
	| 0
	| "ID_CREDENTIAL"
	| 1
	| "QRCODE"
	| 2
	| "ID_CREDENTIAL_WITH_E2EE";
enums.LoginType = { ID_CREDENTIAL: 0, QRCODE: 1, ID_CREDENTIAL_WITH_E2EE: 2 };

export type ContactAttribute =
	| 1
	| "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL"
	| 2
	| "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL"
	| 16
	| "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME"
	| 32
	| "CONTACT_ATTRIBUTE_CAPABLE_BUDDY";
enums.ContactAttribute = {
	CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL: 1,
	CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL: 2,
	CONTACT_ATTRIBUTE_CAPABLE_MY_HOME: 16,
	CONTACT_ATTRIBUTE_CAPABLE_BUDDY: 32,
};

export type ContactCategory = 0 | "NORMAL" | 1 | "RECOMMEND";
enums.ContactCategory = { NORMAL: 0, RECOMMEND: 1 };

export type ContactRelation = 0 | "ONEWAY" | 1 | "BOTH" | 2 | "NOT_REGISTERED";
enums.ContactRelation = { ONEWAY: 0, BOTH: 1, NOT_REGISTERED: 2 };

export type AsymmetricKeyAlgorithm =
	| 1
	| "ASYMMETRIC_KEY_ALGORITHM_RSA"
	| 2
	| "ASYMMETRIC_KEY_ALGORITHM_ECDH";
enums.AsymmetricKeyAlgorithm = {
	ASYMMETRIC_KEY_ALGORITHM_RSA: 1,
	ASYMMETRIC_KEY_ALGORITHM_ECDH: 2,
};

export type ContactSetting =
	| 1
	| "CONTACT_SETTING_NOTIFICATION_DISABLE"
	| 2
	| "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
	| 4
	| "CONTACT_SETTING_CONTACT_HIDE"
	| 8
	| "CONTACT_SETTING_FAVORITE"
	| 16
	| "CONTACT_SETTING_DELETE";
enums.ContactSetting = {
	CONTACT_SETTING_NOTIFICATION_DISABLE: 1,
	CONTACT_SETTING_DISPLAY_NAME_OVERRIDE: 2,
	CONTACT_SETTING_CONTACT_HIDE: 4,
	CONTACT_SETTING_FAVORITE: 8,
	CONTACT_SETTING_DELETE: 16,
};

export type ContactStatus =
	| 0
	| "UNSPECIFIED"
	| 1
	| "FRIEND"
	| 2
	| "FRIEND_BLOCKED"
	| 3
	| "RECOMMEND"
	| 4
	| "RECOMMEND_BLOCKED"
	| 5
	| "DELETED"
	| 6
	| "DELETED_BLOCKED";
enums.ContactStatus = {
	UNSPECIFIED: 0,
	FRIEND: 1,
	FRIEND_BLOCKED: 2,
	RECOMMEND: 3,
	RECOMMEND_BLOCKED: 4,
	DELETED: 5,
	DELETED_BLOCKED: 6,
};

export type ContactType =
	| 0
	| "MID"
	| 1
	| "PHONE"
	| 2
	| "EMAIL"
	| 3
	| "USERID"
	| 4
	| "PROXIMITY"
	| 5
	| "GROUP"
	| 6
	| "USER"
	| 7
	| "QRCODE"
	| 8
	| "PROMOTION_BOT"
	| 9
	| "CONTACT_MESSAGE"
	| 10
	| "FRIEND_REQUEST"
	| 11
	| "BEACON"
	| 128
	| "REPAIR"
	| 2305
	| "FACEBOOK"
	| 2306
	| "SINA"
	| 2307
	| "RENREN"
	| 2308
	| "FEIXIN"
	| 2309
	| "BBM";
enums.ContactType = {
	MID: 0,
	PHONE: 1,
	EMAIL: 2,
	USERID: 3,
	PROXIMITY: 4,
	GROUP: 5,
	USER: 6,
	QRCODE: 7,
	PROMOTION_BOT: 8,
	CONTACT_MESSAGE: 9,
	FRIEND_REQUEST: 10,
	BEACON: 11,
	REPAIR: 128,
	FACEBOOK: 2305,
	SINA: 2306,
	RENREN: 2307,
	FEIXIN: 2308,
	BBM: 2309,
};

export type GroupPreferenceAttribute =
	| 1
	| "INVITATION_TICKET"
	| 2
	| "FAVORITE_TIMESTAMP";
enums.GroupPreferenceAttribute = {
	INVITATION_TICKET: 1,
	FAVORITE_TIMESTAMP: 2,
};

export type ContentType =
	| 0
	| "NONE"
	| 1
	| "IMAGE"
	| 2
	| "VIDEO"
	| 3
	| "AUDIO"
	| 4
	| "HTML"
	| 5
	| "PDF"
	| 6
	| "CALL"
	| 7
	| "STICKER"
	| 8
	| "PRESENCE"
	| 9
	| "GIFT"
	| 10
	| "GROUPBOARD"
	| 11
	| "APPLINK"
	| 12
	| "LINK"
	| 13
	| "CONTACT"
	| 14
	| "FILE"
	| 15
	| "LOCATION"
	| 16
	| "POSTNOTIFICATION"
	| 17
	| "RICH"
	| 18
	| "CHATEVENT"
	| 19
	| "MUSIC"
	| 20
	| "PAYMENT"
	| 21
	| "EXTIMAGE"
	| 22
	| "FLEX";
enums.ContentType = {
	NONE: 0,
	IMAGE: 1,
	VIDEO: 2,
	AUDIO: 3,
	HTML: 4,
	PDF: 5,
	CALL: 6,
	STICKER: 7,
	PRESENCE: 8,
	GIFT: 9,
	GROUPBOARD: 10,
	APPLINK: 11,
	LINK: 12,
	CONTACT: 13,
	FILE: 14,
	LOCATION: 15,
	POSTNOTIFICATION: 16,
	RICH: 17,
	CHATEVENT: 18,
	MUSIC: 19,
	PAYMENT: 20,
	EXTIMAGE: 21,
	FLEX: 22,
};

export type MessageRelationType =
	| 0
	| "FORWARD"
	| 1
	| "AUTO_REPLY"
	| 2
	| "SUBORDINATE"
	| 3
	| "REPLY";
enums.MessageRelationType = {
	FORWARD: 0,
	AUTO_REPLY: 1,
	SUBORDINATE: 2,
	REPLY: 3,
};

export type CustomMode =
	| 1
	| "PROMOTION_FRIENDS_INVITE"
	| 2
	| "CAPABILITY_SERVER_SIDE_SMS"
	| 3
	| "LINE_CLIENT_ANALYTICS_CONFIGURATION";
enums.CustomMode = {
	PROMOTION_FRIENDS_INVITE: 1,
	CAPABILITY_SERVER_SIDE_SMS: 2,
	LINE_CLIENT_ANALYTICS_CONFIGURATION: 3,
};

export type RoomAttribute = 1 | "NOTIFICATION_SETTING" | 255 | "ALL";
enums.RoomAttribute = { NOTIFICATION_SETTING: 1, ALL: 255 };

export type UserStatus =
	| 0
	| "NORMAL"
	| 1
	| "UNBOUND"
	| 2
	| "UNREGISTERED"
	| 3
	| "UNKNOWN";
enums.UserStatus = { NORMAL: 0, UNBOUND: 1, UNREGISTERED: 2, UNKNOWN: 3 };

export type EmailConfirmationStatus =
	| 0
	| "NOT_SPECIFIED"
	| 1
	| "NOT_YET"
	| 3
	| "DONE"
	| 4
	| "NEED_ENFORCED_INPUT";
enums.EmailConfirmationStatus = {
	NOT_SPECIFIED: 0,
	NOT_YET: 1,
	DONE: 3,
	NEED_ENFORCED_INPUT: 4,
};

export type AccountMigrationPincodeType =
	| 0
	| "NOT_APPLICABLE"
	| 1
	| "NOT_SET"
	| 2
	| "SET"
	| 3
	| "NEED_ENFORCED_INPUT";
enums.AccountMigrationPincodeType = {
	NOT_APPLICABLE: 0,
	NOT_SET: 1,
	SET: 2,
	NEED_ENFORCED_INPUT: 3,
};

export type AccountMigrationCheckType =
	| 0
	| "SKIP"
	| 1
	| "PINCODE"
	| 2
	| "SECURITY_CENTER";
enums.AccountMigrationCheckType = { SKIP: 0, PINCODE: 1, SECURITY_CENTER: 2 };

export type SecurityCenterSettingsType =
	| 0
	| "NOT_APPLICABLE"
	| 1
	| "NOT_SET"
	| 2
	| "SET"
	| 3
	| "NEED_ENFORCED_INPUT";
enums.SecurityCenterSettingsType = {
	NOT_APPLICABLE: 0,
	NOT_SET: 1,
	SET: 2,
	NEED_ENFORCED_INPUT: 3,
};

export type EmailConfirmationType =
	| 0
	| "SERVER_SIDE_EMAIL"
	| 1
	| "CLIENT_SIDE_EMAIL";
enums.EmailConfirmationType = { SERVER_SIDE_EMAIL: 0, CLIENT_SIDE_EMAIL: 1 };

export type SquareChatAnnouncementType = number;

export type SquareChatAttribute =
	| 2
	| "NAME"
	| 3
	| "SQUARE_CHAT_IMAGE"
	| 4
	| "STATE";
enums.SquareChatAttribute = { NAME: 2, SQUARE_CHAT_IMAGE: 3, STATE: 4 };

export type SquareMemberAttribute =
	| 1
	| "DISPLAY_NAME"
	| 2
	| "PROFILE_IMAGE"
	| 3
	| "ABLE_TO_RECEIVE_MESSAGE"
	| 5
	| "MEMBERSHIP_STATE"
	| 6
	| "ROLE"
	| 7
	| "PREFERENCE";
enums.SquareMemberAttribute = {
	DISPLAY_NAME: 1,
	PROFILE_IMAGE: 2,
	ABLE_TO_RECEIVE_MESSAGE: 3,
	MEMBERSHIP_STATE: 5,
	ROLE: 6,
	PREFERENCE: 7,
};

export type SquareMemberRelationAttribute = 1 | "BLOCKED";
enums.SquareMemberRelationAttribute = { BLOCKED: 1 };

export type SquarePreferenceAttribute =
	| 1
	| "FAVORITE"
	| 2
	| "NOTI_FOR_NEW_JOIN_REQUEST";
enums.SquarePreferenceAttribute = { FAVORITE: 1, NOTI_FOR_NEW_JOIN_REQUEST: 2 };

export type SquareState = 0 | "ALIVE" | 1 | "DELETED" | 2 | "SUSPENDED";
enums.SquareState = { ALIVE: 0, DELETED: 1, SUSPENDED: 2 };

export type CommitMessageResultCode =
	| 0
	| "DELIVERED"
	| 1
	| "DELIVERY_SKIPPED"
	| 2
	| "DELIVERY_RESTRICTED";
enums.CommitMessageResultCode = {
	DELIVERED: 0,
	DELIVERY_SKIPPED: 1,
	DELIVERY_RESTRICTED: 2,
};

export type ErrorCode =
	| 0
	| "ILLEGAL_ARGUMENT"
	| 1
	| "AUTHENTICATION_FAILED"
	| 2
	| "DB_FAILED"
	| 3
	| "INVALID_STATE"
	| 4
	| "EXCESSIVE_ACCESS"
	| 5
	| "NOT_FOUND"
	| 6
	| "INVALID_LENGTH"
	| 7
	| "NOT_AVAILABLE_USER"
	| 8
	| "NOT_AUTHORIZED_DEVICE"
	| 9
	| "INVALID_MID"
	| 10
	| "NOT_A_MEMBER"
	| 11
	| "INCOMPATIBLE_APP_VERSION"
	| 12
	| "NOT_READY"
	| 13
	| "NOT_AVAILABLE_SESSION"
	| 14
	| "NOT_AUTHORIZED_SESSION"
	| 15
	| "SYSTEM_ERROR"
	| 16
	| "NO_AVAILABLE_VERIFICATION_METHOD"
	| 17
	| "NOT_AUTHENTICATED"
	| 18
	| "INVALID_IDENTITY_CREDENTIAL"
	| 19
	| "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
	| 20
	| "INTERNAL_ERROR"
	| 21
	| "NO_SUCH_IDENTITY_IDENFIER"
	| 22
	| "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
	| 23
	| "ILLEGAL_IDENTITY_CREDENTIAL"
	| 24
	| "UNKNOWN_CHANNEL"
	| 25
	| "NO_SUCH_MESSAGE_BOX"
	| 26
	| "NOT_AVAILABLE_MESSAGE_BOX"
	| 27
	| "CHANNEL_DOES_NOT_MATCH"
	| 28
	| "NOT_YOUR_MESSAGE"
	| 29
	| "MESSAGE_DEFINED_ERROR"
	| 30
	| "USER_CANNOT_ACCEPT_PRESENTS"
	| 32
	| "USER_NOT_STICKER_OWNER"
	| 33
	| "MAINTENANCE_ERROR"
	| 34
	| "ACCOUNT_NOT_MATCHED"
	| 35
	| "ABUSE_BLOCK"
	| 36
	| "NOT_FRIEND"
	| 37
	| "NOT_ALLOWED_CALL"
	| 38
	| "BLOCK_FRIEND"
	| 39
	| "INCOMPATIBLE_VOIP_VERSION"
	| 40
	| "INVALID_SNS_ACCESS_TOKEN"
	| 41
	| "EXTERNAL_SERVICE_NOT_AVAILABLE"
	| 42
	| "NOT_ALLOWED_ADD_CONTACT"
	| 43
	| "NOT_CERTIFICATED"
	| 44
	| "NOT_ALLOWED_SECONDARY_DEVICE"
	| 45
	| "INVALID_PIN_CODE"
	| 46
	| "NOT_FOUND_IDENTITY_CREDENTIAL"
	| 47
	| "EXCEED_FILE_MAX_SIZE"
	| 48
	| "EXCEED_DAILY_QUOTA"
	| 49
	| "NOT_SUPPORT_SEND_FILE"
	| 50
	| "MUST_UPGRADE"
	| 51
	| "NOT_AVAILABLE_PIN_CODE_SESSION"
	| 52
	| "EXPIRED_REVISION"
	| 54
	| "NOT_YET_PHONE_NUMBER"
	| 55
	| "BAD_CALL_NUMBER"
	| 56
	| "UNAVAILABLE_CALL_NUMBER"
	| 57
	| "NOT_SUPPORT_CALL_SERVICE"
	| 58
	| "CONGESTION_CONTROL"
	| 59
	| "NO_BALANCE"
	| 60
	| "NOT_PERMITTED_CALLER_ID"
	| 61
	| "NO_CALLER_ID_LIMIT_EXCEEDED"
	| 62
	| "CALLER_ID_VERIFICATION_REQUIRED"
	| 63
	| "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
	| 64
	| "MESSAGE_NOT_FOUND"
	| 65
	| "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
	| 66
	| "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
	| 67
	| "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
	| 69
	| "INVALID_PASSWORD_FORMAT"
	| 70
	| "FEATURE_RESTRICTED"
	| 71
	| "MESSAGE_NOT_DESTRUCTIBLE"
	| 72
	| "PAID_CALL_REDEEM_FAILED"
	| 73
	| "PREVENTED_JOIN_BY_TICKET"
	| 75
	| "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
	| 76
	| "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
	| 77
	| "SECURITY_CENTER_NOT_VERIFIED"
	| 78
	| "SECURITY_CENTER_BLOCKED_BY_SETTING"
	| 79
	| "SECURITY_CENTER_BLOCKED"
	| 80
	| "TALK_PROXY_EXCEPTION"
	| 81
	| "E2EE_INVALID_PROTOCOL"
	| 82
	| "E2EE_RETRY_ENCRYPT"
	| 83
	| "E2EE_UPDATE_SENDER_KEY"
	| 84
	| "E2EE_UPDATE_RECEIVER_KEY"
	| 85
	| "E2EE_INVALID_ARGUMENT"
	| 86
	| "E2EE_INVALID_VERSION"
	| 87
	| "E2EE_SENDER_DISABLED"
	| 88
	| "E2EE_RECEIVER_DISABLED"
	| 89
	| "E2EE_SENDER_NOT_ALLOWED"
	| 90
	| "E2EE_RECEIVER_NOT_ALLOWED"
	| 91
	| "E2EE_RESEND_FAIL"
	| 92
	| "E2EE_RESEND_OK"
	| 93
	| "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
	| 94
	| "E2EE_UPDATE_PRIMARY_DEVICE"
	| 95
	| "SUCCESS"
	| 96
	| "CANCEL"
	| 97
	| "E2EE_PRIMARY_NOT_SUPPORT"
	| 98
	| "E2EE_RETRY_PLAIN"
	| 99
	| "E2EE_RECREATE_GROUP_KEY"
	| 100
	| "E2EE_GROUP_TOO_MANY_MEMBERS"
	| 101
	| "SERVER_BUSY"
	| 102
	| "NOT_ALLOWED_ADD_FOLLOW"
	| 103
	| "INCOMING_FRIEND_REQUEST_LIMIT"
	| 104
	| "OUTGOING_FRIEND_REQUEST_LIMIT"
	| 105
	| "OUTGOING_FRIEND_REQUEST_QUOTA"
	| 106
	| "DUPLICATED"
	| 107
	| "BANNED"
	| 108
	| "NOT_AN_INVITEE"
	| 109
	| "NOT_AN_OUTSIDER"
	| 111
	| "EMPTY_GROUP"
	| 112
	| "EXCEED_FOLLOW_LIMIT"
	| 113
	| "UNSUPPORTED_ACCOUNT_TYPE"
	| 114
	| "AGREEMENT_REQUIRED"
	| 115
	| "SHOULD_RETRY"
	| 116
	| "OVER_MAX_CHATS_PER_USER"
	| 117
	| "NOT_AVAILABLE_API"
	| 118
	| "INVALID_OTP"
	| 119
	| "MUST_REFRESH_V3_TOKEN"
	| 120
	| "ALREADY_EXPIRED"
	| 121
	| "USER_NOT_STICON_OWNER"
	| 122
	| "REFRESH_MEDIA_FLOW"
	| 123
	| "EXCEED_FOLLOWER_LIMIT";
enums.ErrorCode = {
	ILLEGAL_ARGUMENT: 0,
	AUTHENTICATION_FAILED: 1,
	DB_FAILED: 2,
	INVALID_STATE: 3,
	EXCESSIVE_ACCESS: 4,
	NOT_FOUND: 5,
	INVALID_LENGTH: 6,
	NOT_AVAILABLE_USER: 7,
	NOT_AUTHORIZED_DEVICE: 8,
	INVALID_MID: 9,
	NOT_A_MEMBER: 10,
	INCOMPATIBLE_APP_VERSION: 11,
	NOT_READY: 12,
	NOT_AVAILABLE_SESSION: 13,
	NOT_AUTHORIZED_SESSION: 14,
	SYSTEM_ERROR: 15,
	NO_AVAILABLE_VERIFICATION_METHOD: 16,
	NOT_AUTHENTICATED: 17,
	INVALID_IDENTITY_CREDENTIAL: 18,
	NOT_AVAILABLE_IDENTITY_IDENTIFIER: 19,
	INTERNAL_ERROR: 20,
	NO_SUCH_IDENTITY_IDENFIER: 21,
	DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: 22,
	ILLEGAL_IDENTITY_CREDENTIAL: 23,
	UNKNOWN_CHANNEL: 24,
	NO_SUCH_MESSAGE_BOX: 25,
	NOT_AVAILABLE_MESSAGE_BOX: 26,
	CHANNEL_DOES_NOT_MATCH: 27,
	NOT_YOUR_MESSAGE: 28,
	MESSAGE_DEFINED_ERROR: 29,
	USER_CANNOT_ACCEPT_PRESENTS: 30,
	USER_NOT_STICKER_OWNER: 32,
	MAINTENANCE_ERROR: 33,
	ACCOUNT_NOT_MATCHED: 34,
	ABUSE_BLOCK: 35,
	NOT_FRIEND: 36,
	NOT_ALLOWED_CALL: 37,
	BLOCK_FRIEND: 38,
	INCOMPATIBLE_VOIP_VERSION: 39,
	INVALID_SNS_ACCESS_TOKEN: 40,
	EXTERNAL_SERVICE_NOT_AVAILABLE: 41,
	NOT_ALLOWED_ADD_CONTACT: 42,
	NOT_CERTIFICATED: 43,
	NOT_ALLOWED_SECONDARY_DEVICE: 44,
	INVALID_PIN_CODE: 45,
	NOT_FOUND_IDENTITY_CREDENTIAL: 46,
	EXCEED_FILE_MAX_SIZE: 47,
	EXCEED_DAILY_QUOTA: 48,
	NOT_SUPPORT_SEND_FILE: 49,
	MUST_UPGRADE: 50,
	NOT_AVAILABLE_PIN_CODE_SESSION: 51,
	EXPIRED_REVISION: 52,
	NOT_YET_PHONE_NUMBER: 54,
	BAD_CALL_NUMBER: 55,
	UNAVAILABLE_CALL_NUMBER: 56,
	NOT_SUPPORT_CALL_SERVICE: 57,
	CONGESTION_CONTROL: 58,
	NO_BALANCE: 59,
	NOT_PERMITTED_CALLER_ID: 60,
	NO_CALLER_ID_LIMIT_EXCEEDED: 61,
	CALLER_ID_VERIFICATION_REQUIRED: 62,
	NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: 63,
	MESSAGE_NOT_FOUND: 64,
	INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: 65,
	ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: 66,
	ACCOUNT_MIGRATION_PINCODE_BLOCKED: 67,
	INVALID_PASSWORD_FORMAT: 69,
	FEATURE_RESTRICTED: 70,
	MESSAGE_NOT_DESTRUCTIBLE: 71,
	PAID_CALL_REDEEM_FAILED: 72,
	PREVENTED_JOIN_BY_TICKET: 73,
	SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: 75,
	SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: 76,
	SECURITY_CENTER_NOT_VERIFIED: 77,
	SECURITY_CENTER_BLOCKED_BY_SETTING: 78,
	SECURITY_CENTER_BLOCKED: 79,
	TALK_PROXY_EXCEPTION: 80,
	E2EE_INVALID_PROTOCOL: 81,
	E2EE_RETRY_ENCRYPT: 82,
	E2EE_UPDATE_SENDER_KEY: 83,
	E2EE_UPDATE_RECEIVER_KEY: 84,
	E2EE_INVALID_ARGUMENT: 85,
	E2EE_INVALID_VERSION: 86,
	E2EE_SENDER_DISABLED: 87,
	E2EE_RECEIVER_DISABLED: 88,
	E2EE_SENDER_NOT_ALLOWED: 89,
	E2EE_RECEIVER_NOT_ALLOWED: 90,
	E2EE_RESEND_FAIL: 91,
	E2EE_RESEND_OK: 92,
	HITOKOTO_BACKUP_NO_AVAILABLE_DATA: 93,
	E2EE_UPDATE_PRIMARY_DEVICE: 94,
	SUCCESS: 95,
	CANCEL: 96,
	E2EE_PRIMARY_NOT_SUPPORT: 97,
	E2EE_RETRY_PLAIN: 98,
	E2EE_RECREATE_GROUP_KEY: 99,
	E2EE_GROUP_TOO_MANY_MEMBERS: 100,
	SERVER_BUSY: 101,
	NOT_ALLOWED_ADD_FOLLOW: 102,
	INCOMING_FRIEND_REQUEST_LIMIT: 103,
	OUTGOING_FRIEND_REQUEST_LIMIT: 104,
	OUTGOING_FRIEND_REQUEST_QUOTA: 105,
	DUPLICATED: 106,
	BANNED: 107,
	NOT_AN_INVITEE: 108,
	NOT_AN_OUTSIDER: 109,
	EMPTY_GROUP: 111,
	EXCEED_FOLLOW_LIMIT: 112,
	UNSUPPORTED_ACCOUNT_TYPE: 113,
	AGREEMENT_REQUIRED: 114,
	SHOULD_RETRY: 115,
	OVER_MAX_CHATS_PER_USER: 116,
	NOT_AVAILABLE_API: 117,
	INVALID_OTP: 118,
	MUST_REFRESH_V3_TOKEN: 119,
	ALREADY_EXPIRED: 120,
	USER_NOT_STICON_OWNER: 121,
	REFRESH_MEDIA_FLOW: 122,
	EXCEED_FOLLOWER_LIMIT: 123,
};

export type FeatureType =
	| 1
	| "OBS_VIDEO"
	| 2
	| "OBS_GENERAL"
	| 3
	| "OBS_RINGBACK_TONE";
enums.FeatureType = { OBS_VIDEO: 1, OBS_GENERAL: 2, OBS_RINGBACK_TONE: 3 };

export type GroupAttribute =
	| 1
	| "NAME"
	| 2
	| "PICTURE_STATUS"
	| 4
	| "PREVENTED_JOIN_BY_TICKET"
	| 8
	| "NOTIFICATION_SETTING"
	| 255
	| "ALL";
enums.GroupAttribute = {
	NAME: 1,
	PICTURE_STATUS: 2,
	PREVENTED_JOIN_BY_TICKET: 4,
	NOTIFICATION_SETTING: 8,
	ALL: 255,
};

export type IdentityProvider =
	| 0
	| "UNKNOWN"
	| 1
	| "LINE"
	| 2
	| "NAVER_KR"
	| 3
	| "LINE_PHONE";
enums.IdentityProvider = { UNKNOWN: 0, LINE: 1, NAVER_KR: 2, LINE_PHONE: 3 };

export type LoginResultType =
	| 1
	| "SUCCESS"
	| 2
	| "REQUIRE_QRCODE"
	| 3
	| "REQUIRE_DEVICE_CONFIRM"
	| 4
	| "REQUIRE_SMS_CONFIRM";
enums.LoginResultType = {
	SUCCESS: 1,
	REQUIRE_QRCODE: 2,
	REQUIRE_DEVICE_CONFIRM: 3,
	REQUIRE_SMS_CONFIRM: 4,
};

export type MessageOperationType =
	| 1
	| "SEND_MESSAGE"
	| 2
	| "RECEIVE_MESSAGE"
	| 3
	| "READ_MESSAGE"
	| 4
	| "NOTIFIED_READ_MESSAGE"
	| 5
	| "NOTIFIED_JOIN_CHAT"
	| 6
	| "FAILED_SEND_MESSAGE"
	| 7
	| "SEND_CONTENT"
	| 8
	| "SEND_CONTENT_RECEIPT"
	| 9
	| "SEND_CHAT_REMOVED"
	| 10
	| "REMOVE_ALL_MESSAGES";
enums.MessageOperationType = {
	SEND_MESSAGE: 1,
	RECEIVE_MESSAGE: 2,
	READ_MESSAGE: 3,
	NOTIFIED_READ_MESSAGE: 4,
	NOTIFIED_JOIN_CHAT: 5,
	FAILED_SEND_MESSAGE: 6,
	SEND_CONTENT: 7,
	SEND_CONTENT_RECEIPT: 8,
	SEND_CHAT_REMOVED: 9,
	REMOVE_ALL_MESSAGES: 10,
};

export type MIDType =
	| 0
	| "USER"
	| 1
	| "ROOM"
	| 2
	| "GROUP"
	| 3
	| "SQUARE"
	| 4
	| "SQUARE_CHAT"
	| 5
	| "SQUARE_MEMBER"
	| 6
	| "BOT";
enums.MIDType = {
	USER: 0,
	ROOM: 1,
	GROUP: 2,
	SQUARE: 3,
	SQUARE_CHAT: 4,
	SQUARE_MEMBER: 5,
	BOT: 6,
};

export type ServiceCode = 0 | "UNKNOWN" | 1 | "TALK" | 2 | "SQUARE";
enums.ServiceCode = { UNKNOWN: 0, TALK: 1, SQUARE: 2 };

export type FriendRequestDirection = 1 | "INCOMING" | 2 | "OUTGOING";
enums.FriendRequestDirection = { INCOMING: 1, OUTGOING: 2 };

export type FriendRequestMethod = 1 | "TIMELINE" | 2 | "NEARBY" | 3 | "SQUARE";
enums.FriendRequestMethod = { TIMELINE: 1, NEARBY: 2, SQUARE: 3 };

export type FriendRequestStatus =
	| 0
	| "NONE"
	| 1
	| "AVAILABLE"
	| 2
	| "ALREADY_REQUESTED"
	| 3
	| "UNAVAILABLE";
enums.FriendRequestStatus = {
	NONE: 0,
	AVAILABLE: 1,
	ALREADY_REQUESTED: 2,
	UNAVAILABLE: 3,
};

export type ModificationType = 0 | "ADD" | 1 | "REMOVE" | 2 | "MODIFY";
enums.ModificationType = { ADD: 0, REMOVE: 1, MODIFY: 2 };

export type NotificationItemFetchMode = 0 | "ALL" | 1 | "APPEND";
enums.NotificationItemFetchMode = { ALL: 0, APPEND: 1 };

export type NotificationQueueType =
	| 1
	| "GLOBAL"
	| 2
	| "MESSAGE"
	| 3
	| "PRIMARY";
enums.NotificationQueueType = { GLOBAL: 1, MESSAGE: 2, PRIMARY: 3 };

export type GroupCallMediaType = 1 | "AUDIO" | 2 | "VIDEO" | 3 | "LIVE";
enums.GroupCallMediaType = { AUDIO: 1, VIDEO: 2, LIVE: 3 };

export type PersonalInfo =
	| 0
	| "EMAIL"
	| 1
	| "PHONE"
	| 2
	| "BIRTHDAY"
	| 3
	| "RAW_BIRTHDAY";
enums.PersonalInfo = { EMAIL: 0, PHONE: 1, BIRTHDAY: 2, RAW_BIRTHDAY: 3 };

export type NotificationStatus =
	| 1
	| "NOTIFICATION_ITEM_EXIST"
	| 2
	| "TIMELINE_ITEM_EXIST"
	| 4
	| "NOTE_GROUP_NEW_ITEM_EXIST"
	| 8
	| "TIMELINE_BUDDYGROUP_CHANGED"
	| 16
	| "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST"
	| 32
	| "ALBUM_ITEM_EXIST"
	| 64
	| "TIMELINE_ITEM_DELETED"
	| 128
	| "OTOGROUP_ITEM_EXIST"
	| 256
	| "GROUPHOME_NEW_ITEM_EXIST"
	| 512
	| "GROUPHOME_HIDDEN_ITEM_CHANGED"
	| 1024
	| "NOTIFICATION_ITEM_CHANGED"
	| 2048
	| "BEAD_ITEM_HIDE"
	| 4096
	| "BEAD_ITEM_SHOW"
	| 8192
	| "LINE_TICKET_UPDATED"
	| 16384
	| "TIMELINE_STORY_UPDATED"
	| 32768
	| "SMARTCH_UPDATED"
	| 65536
	| "AVATAR_UPDATED"
	| 131072
	| "HOME_NOTIFICATION_ITEM_EXIST"
	| 262144
	| "TIMELINE_REBOOT_COMPLETED"
	| 524288
	| "TIMELINE_GUIDE_STORY_UPDATED";
enums.NotificationStatus = {
	NOTIFICATION_ITEM_EXIST: 1,
	TIMELINE_ITEM_EXIST: 2,
	NOTE_GROUP_NEW_ITEM_EXIST: 4,
	TIMELINE_BUDDYGROUP_CHANGED: 8,
	NOTE_ONE_TO_ONE_NEW_ITEM_EXIST: 16,
	ALBUM_ITEM_EXIST: 32,
	TIMELINE_ITEM_DELETED: 64,
	OTOGROUP_ITEM_EXIST: 128,
	GROUPHOME_NEW_ITEM_EXIST: 256,
	GROUPHOME_HIDDEN_ITEM_CHANGED: 512,
	NOTIFICATION_ITEM_CHANGED: 1024,
	BEAD_ITEM_HIDE: 2048,
	BEAD_ITEM_SHOW: 4096,
	LINE_TICKET_UPDATED: 8192,
	TIMELINE_STORY_UPDATED: 16384,
	SMARTCH_UPDATED: 32768,
	AVATAR_UPDATED: 65536,
	HOME_NOTIFICATION_ITEM_EXIST: 131072,
	TIMELINE_REBOOT_COMPLETED: 262144,
	TIMELINE_GUIDE_STORY_UPDATED: 524288,
};

export type NotificationType =
	| 1
	| "APPLE_APNS"
	| 2
	| "GOOGLE_C2DM"
	| 3
	| "NHN_NNI"
	| 4
	| "SKT_AOM"
	| 5
	| "MS_MPNS"
	| 6
	| "RIM_BIS"
	| 7
	| "GOOGLE_GCM"
	| 8
	| "NOKIA_NNAPI"
	| 9
	| "TIZEN"
	| 10
	| "MOZILLA_SIMPLE"
	| 17
	| "LINE_BOT"
	| 18
	| "LINE_WAP"
	| 19
	| "APPLE_APNS_VOIP"
	| 20
	| "MS_WNS"
	| 21
	| "GOOGLE_FCM"
	| 22
	| "CLOVA"
	| 23
	| "CLOVA_VOIP"
	| 24
	| "HUAWEI_HCM";
enums.NotificationType = {
	APPLE_APNS: 1,
	GOOGLE_C2DM: 2,
	NHN_NNI: 3,
	SKT_AOM: 4,
	MS_MPNS: 5,
	RIM_BIS: 6,
	GOOGLE_GCM: 7,
	NOKIA_NNAPI: 8,
	TIZEN: 9,
	MOZILLA_SIMPLE: 10,
	LINE_BOT: 17,
	LINE_WAP: 18,
	APPLE_APNS_VOIP: 19,
	MS_WNS: 20,
	GOOGLE_FCM: 21,
	CLOVA: 22,
	CLOVA_VOIP: 23,
	HUAWEI_HCM: 24,
};

export type OpStatus = 0 | "NORMAL" | 1 | "ALERT_DISABLED" | 2 | "ALWAYS";
enums.OpStatus = { NORMAL: 0, ALERT_DISABLED: 1, ALWAYS: 2 };

export type OpType =
	| 0
	| "END_OF_OPERATION"
	| 1
	| "UPDATE_PROFILE"
	| 2
	| "NOTIFIED_UPDATE_PROFILE"
	| 3
	| "REGISTER_USERID"
	| 4
	| "ADD_CONTACT"
	| 5
	| "NOTIFIED_ADD_CONTACT"
	| 6
	| "BLOCK_CONTACT"
	| 7
	| "UNBLOCK_CONTACT"
	| 8
	| "NOTIFIED_RECOMMEND_CONTACT"
	| 9
	| "CREATE_GROUP"
	| 10
	| "UPDATE_GROUP"
	| 11
	| "NOTIFIED_UPDATE_GROUP"
	| 12
	| "INVITE_INTO_GROUP"
	| 13
	| "NOTIFIED_INVITE_INTO_GROUP"
	| 14
	| "LEAVE_GROUP"
	| 15
	| "NOTIFIED_LEAVE_GROUP"
	| 16
	| "ACCEPT_GROUP_INVITATION"
	| 17
	| "NOTIFIED_ACCEPT_GROUP_INVITATION"
	| 18
	| "KICKOUT_FROM_GROUP"
	| 19
	| "NOTIFIED_KICKOUT_FROM_GROUP"
	| 20
	| "CREATE_ROOM"
	| 21
	| "INVITE_INTO_ROOM"
	| 22
	| "NOTIFIED_INVITE_INTO_ROOM"
	| 23
	| "LEAVE_ROOM"
	| 24
	| "NOTIFIED_LEAVE_ROOM"
	| 25
	| "SEND_MESSAGE"
	| 26
	| "RECEIVE_MESSAGE"
	| 27
	| "SEND_MESSAGE_RECEIPT"
	| 28
	| "RECEIVE_MESSAGE_RECEIPT"
	| 29
	| "SEND_CONTENT_RECEIPT"
	| 30
	| "RECEIVE_ANNOUNCEMENT"
	| 31
	| "CANCEL_INVITATION_GROUP"
	| 32
	| "NOTIFIED_CANCEL_INVITATION_GROUP"
	| 33
	| "NOTIFIED_UNREGISTER_USER"
	| 34
	| "REJECT_GROUP_INVITATION"
	| 35
	| "NOTIFIED_REJECT_GROUP_INVITATION"
	| 36
	| "UPDATE_SETTINGS"
	| 37
	| "NOTIFIED_REGISTER_USER"
	| 38
	| "INVITE_VIA_EMAIL"
	| 39
	| "NOTIFIED_REQUEST_RECOVERY"
	| 40
	| "SEND_CHAT_CHECKED"
	| 41
	| "SEND_CHAT_REMOVED"
	| 42
	| "NOTIFIED_FORCE_SYNC"
	| 43
	| "SEND_CONTENT"
	| 44
	| "SEND_MESSAGE_MYHOME"
	| 45
	| "NOTIFIED_UPDATE_CONTENT_PREVIEW"
	| 46
	| "REMOVE_ALL_MESSAGES"
	| 47
	| "NOTIFIED_UPDATE_PURCHASES"
	| 48
	| "DUMMY"
	| 49
	| "UPDATE_CONTACT"
	| 50
	| "NOTIFIED_RECEIVED_CALL"
	| 51
	| "CANCEL_CALL"
	| 52
	| "NOTIFIED_REDIRECT"
	| 53
	| "NOTIFIED_CHANNEL_SYNC"
	| 54
	| "FAILED_SEND_MESSAGE"
	| 55
	| "NOTIFIED_READ_MESSAGE"
	| 56
	| "FAILED_EMAIL_CONFIRMATION"
	| 58
	| "NOTIFIED_CHAT_CONTENT"
	| 59
	| "NOTIFIED_PUSH_NOTICENTER_ITEM"
	| 60
	| "NOTIFIED_JOIN_CHAT"
	| 61
	| "NOTIFIED_LEAVE_CHAT"
	| 62
	| "NOTIFIED_TYPING"
	| 63
	| "FRIEND_REQUEST_ACCEPTED"
	| 64
	| "DESTROY_MESSAGE"
	| 65
	| "NOTIFIED_DESTROY_MESSAGE"
	| 66
	| "UPDATE_PUBLICKEYCHAIN"
	| 67
	| "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
	| 68
	| "NOTIFIED_BLOCK_CONTACT"
	| 69
	| "NOTIFIED_UNBLOCK_CONTACT"
	| 70
	| "UPDATE_GROUPPREFERENCE"
	| 71
	| "NOTIFIED_PAYMENT_EVENT"
	| 72
	| "REGISTER_E2EE_PUBLICKEY"
	| 73
	| "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
	| 74
	| "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
	| 75
	| "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
	| 76
	| "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
	| 77
	| "NOTIFIED_E2EE_KEY_UPDATE"
	| 78
	| "NOTIFIED_BUDDY_UPDATE_PROFILE"
	| 79
	| "NOTIFIED_UPDATE_LINEAT_TABS"
	| 80
	| "UPDATE_ROOM"
	| 81
	| "NOTIFIED_BEACON_DETECTED"
	| 82
	| "UPDATE_EXTENDED_PROFILE"
	| 83
	| "ADD_FOLLOW"
	| 84
	| "NOTIFIED_ADD_FOLLOW"
	| 85
	| "DELETE_FOLLOW"
	| 86
	| "NOTIFIED_DELETE_FOLLOW"
	| 87
	| "UPDATE_TIMELINE_SETTINGS"
	| 88
	| "NOTIFIED_FRIEND_REQUEST"
	| 89
	| "UPDATE_RINGBACK_TONE"
	| 90
	| "NOTIFIED_POSTBACK"
	| 91
	| "RECEIVE_READ_WATERMARK"
	| 92
	| "NOTIFIED_MESSAGE_DELIVERED"
	| 93
	| "NOTIFIED_UPDATE_CHAT_BAR"
	| 94
	| "NOTIFIED_CHATAPP_INSTALLED"
	| 95
	| "NOTIFIED_CHATAPP_UPDATED"
	| 96
	| "NOTIFIED_CHATAPP_NEW_MARK"
	| 97
	| "NOTIFIED_CHATAPP_DELETED"
	| 98
	| "NOTIFIED_CHATAPP_SYNC"
	| 99
	| "NOTIFIED_UPDATE_MESSAGE"
	| 100
	| "UPDATE_CHATROOMBGM"
	| 101
	| "NOTIFIED_UPDATE_CHATROOMBGM"
	| 102
	| "UPDATE_RINGTONE"
	| 118
	| "UPDATE_USER_SETTINGS"
	| 119
	| "NOTIFIED_UPDATE_STATUS_BAR"
	| 120
	| "CREATE_CHAT"
	| 121
	| "UPDATE_CHAT"
	| 122
	| "NOTIFIED_UPDATE_CHAT"
	| 123
	| "INVITE_INTO_CHAT"
	| 124
	| "NOTIFIED_INVITE_INTO_CHAT"
	| 125
	| "CANCEL_CHAT_INVITATION"
	| 126
	| "NOTIFIED_CANCEL_CHAT_INVITATION"
	| 127
	| "DELETE_SELF_FROM_CHAT"
	| 128
	| "NOTIFIED_DELETE_SELF_FROM_CHAT"
	| 129
	| "ACCEPT_CHAT_INVITATION"
	| 130
	| "NOTIFIED_ACCEPT_CHAT_INVITATION"
	| 131
	| "REJECT_CHAT_INVITATION"
	| 132
	| "DELETE_OTHER_FROM_CHAT"
	| 133
	| "NOTIFIED_DELETE_OTHER_FROM_CHAT"
	| 134
	| "NOTIFIED_CONTACT_CALENDAR_EVENT"
	| 135
	| "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL"
	| 136
	| "UPDATE_THINGS_OPERATIONS"
	| 137
	| "SEND_CHAT_HIDDEN"
	| 138
	| "CHAT_META_SYNC_ALL"
	| 139
	| "SEND_REACTION"
	| 140
	| "NOTIFIED_SEND_REACTION"
	| 141
	| "NOTIFIED_UPDATE_PROFILE_CONTENT"
	| 142
	| "FAILED_DELIVERY_MESSAGE";
enums.OpType = {
	END_OF_OPERATION: 0,
	UPDATE_PROFILE: 1,
	NOTIFIED_UPDATE_PROFILE: 2,
	REGISTER_USERID: 3,
	ADD_CONTACT: 4,
	NOTIFIED_ADD_CONTACT: 5,
	BLOCK_CONTACT: 6,
	UNBLOCK_CONTACT: 7,
	NOTIFIED_RECOMMEND_CONTACT: 8,
	CREATE_GROUP: 9,
	UPDATE_GROUP: 10,
	NOTIFIED_UPDATE_GROUP: 11,
	INVITE_INTO_GROUP: 12,
	NOTIFIED_INVITE_INTO_GROUP: 13,
	LEAVE_GROUP: 14,
	NOTIFIED_LEAVE_GROUP: 15,
	ACCEPT_GROUP_INVITATION: 16,
	NOTIFIED_ACCEPT_GROUP_INVITATION: 17,
	KICKOUT_FROM_GROUP: 18,
	NOTIFIED_KICKOUT_FROM_GROUP: 19,
	CREATE_ROOM: 20,
	INVITE_INTO_ROOM: 21,
	NOTIFIED_INVITE_INTO_ROOM: 22,
	LEAVE_ROOM: 23,
	NOTIFIED_LEAVE_ROOM: 24,
	SEND_MESSAGE: 25,
	RECEIVE_MESSAGE: 26,
	SEND_MESSAGE_RECEIPT: 27,
	RECEIVE_MESSAGE_RECEIPT: 28,
	SEND_CONTENT_RECEIPT: 29,
	RECEIVE_ANNOUNCEMENT: 30,
	CANCEL_INVITATION_GROUP: 31,
	NOTIFIED_CANCEL_INVITATION_GROUP: 32,
	NOTIFIED_UNREGISTER_USER: 33,
	REJECT_GROUP_INVITATION: 34,
	NOTIFIED_REJECT_GROUP_INVITATION: 35,
	UPDATE_SETTINGS: 36,
	NOTIFIED_REGISTER_USER: 37,
	INVITE_VIA_EMAIL: 38,
	NOTIFIED_REQUEST_RECOVERY: 39,
	SEND_CHAT_CHECKED: 40,
	SEND_CHAT_REMOVED: 41,
	NOTIFIED_FORCE_SYNC: 42,
	SEND_CONTENT: 43,
	SEND_MESSAGE_MYHOME: 44,
	NOTIFIED_UPDATE_CONTENT_PREVIEW: 45,
	REMOVE_ALL_MESSAGES: 46,
	NOTIFIED_UPDATE_PURCHASES: 47,
	DUMMY: 48,
	UPDATE_CONTACT: 49,
	NOTIFIED_RECEIVED_CALL: 50,
	CANCEL_CALL: 51,
	NOTIFIED_REDIRECT: 52,
	NOTIFIED_CHANNEL_SYNC: 53,
	FAILED_SEND_MESSAGE: 54,
	NOTIFIED_READ_MESSAGE: 55,
	FAILED_EMAIL_CONFIRMATION: 56,
	NOTIFIED_CHAT_CONTENT: 58,
	NOTIFIED_PUSH_NOTICENTER_ITEM: 59,
	NOTIFIED_JOIN_CHAT: 60,
	NOTIFIED_LEAVE_CHAT: 61,
	NOTIFIED_TYPING: 62,
	FRIEND_REQUEST_ACCEPTED: 63,
	DESTROY_MESSAGE: 64,
	NOTIFIED_DESTROY_MESSAGE: 65,
	UPDATE_PUBLICKEYCHAIN: 66,
	NOTIFIED_UPDATE_PUBLICKEYCHAIN: 67,
	NOTIFIED_BLOCK_CONTACT: 68,
	NOTIFIED_UNBLOCK_CONTACT: 69,
	UPDATE_GROUPPREFERENCE: 70,
	NOTIFIED_PAYMENT_EVENT: 71,
	REGISTER_E2EE_PUBLICKEY: 72,
	NOTIFIED_E2EE_KEY_EXCHANGE_REQ: 73,
	NOTIFIED_E2EE_KEY_EXCHANGE_RESP: 74,
	NOTIFIED_E2EE_MESSAGE_RESEND_REQ: 75,
	NOTIFIED_E2EE_MESSAGE_RESEND_RESP: 76,
	NOTIFIED_E2EE_KEY_UPDATE: 77,
	NOTIFIED_BUDDY_UPDATE_PROFILE: 78,
	NOTIFIED_UPDATE_LINEAT_TABS: 79,
	UPDATE_ROOM: 80,
	NOTIFIED_BEACON_DETECTED: 81,
	UPDATE_EXTENDED_PROFILE: 82,
	ADD_FOLLOW: 83,
	NOTIFIED_ADD_FOLLOW: 84,
	DELETE_FOLLOW: 85,
	NOTIFIED_DELETE_FOLLOW: 86,
	UPDATE_TIMELINE_SETTINGS: 87,
	NOTIFIED_FRIEND_REQUEST: 88,
	UPDATE_RINGBACK_TONE: 89,
	NOTIFIED_POSTBACK: 90,
	RECEIVE_READ_WATERMARK: 91,
	NOTIFIED_MESSAGE_DELIVERED: 92,
	NOTIFIED_UPDATE_CHAT_BAR: 93,
	NOTIFIED_CHATAPP_INSTALLED: 94,
	NOTIFIED_CHATAPP_UPDATED: 95,
	NOTIFIED_CHATAPP_NEW_MARK: 96,
	NOTIFIED_CHATAPP_DELETED: 97,
	NOTIFIED_CHATAPP_SYNC: 98,
	NOTIFIED_UPDATE_MESSAGE: 99,
	UPDATE_CHATROOMBGM: 100,
	NOTIFIED_UPDATE_CHATROOMBGM: 101,
	UPDATE_RINGTONE: 102,
	UPDATE_USER_SETTINGS: 118,
	NOTIFIED_UPDATE_STATUS_BAR: 119,
	CREATE_CHAT: 120,
	UPDATE_CHAT: 121,
	NOTIFIED_UPDATE_CHAT: 122,
	INVITE_INTO_CHAT: 123,
	NOTIFIED_INVITE_INTO_CHAT: 124,
	CANCEL_CHAT_INVITATION: 125,
	NOTIFIED_CANCEL_CHAT_INVITATION: 126,
	DELETE_SELF_FROM_CHAT: 127,
	NOTIFIED_DELETE_SELF_FROM_CHAT: 128,
	ACCEPT_CHAT_INVITATION: 129,
	NOTIFIED_ACCEPT_CHAT_INVITATION: 130,
	REJECT_CHAT_INVITATION: 131,
	DELETE_OTHER_FROM_CHAT: 132,
	NOTIFIED_DELETE_OTHER_FROM_CHAT: 133,
	NOTIFIED_CONTACT_CALENDAR_EVENT: 134,
	NOTIFIED_CONTACT_CALENDAR_EVENT_ALL: 135,
	UPDATE_THINGS_OPERATIONS: 136,
	SEND_CHAT_HIDDEN: 137,
	CHAT_META_SYNC_ALL: 138,
	SEND_REACTION: 139,
	NOTIFIED_SEND_REACTION: 140,
	NOTIFIED_UPDATE_PROFILE_CONTENT: 141,
	FAILED_DELIVERY_MESSAGE: 142,
};

export type PayloadType =
	| 101
	| "PAYLOAD_BUY"
	| 111
	| "PAYLOAD_CS"
	| 121
	| "PAYLOAD_BONUS"
	| 131
	| "PAYLOAD_EVENT";
enums.PayloadType = {
	PAYLOAD_BUY: 101,
	PAYLOAD_CS: 111,
	PAYLOAD_BONUS: 121,
	PAYLOAD_EVENT: 131,
};

export type PaymentPgType =
	| 0
	| "PAYMENT_PG_NONE"
	| 1
	| "PAYMENT_PG_AU"
	| 2
	| "PAYMENT_PG_AL";
enums.PaymentPgType = {
	PAYMENT_PG_NONE: 0,
	PAYMENT_PG_AU: 1,
	PAYMENT_PG_AL: 2,
};

export type PaymentType = 1 | "PAYMENT_APPLE" | 2 | "PAYMENT_GOOGLE";
enums.PaymentType = { PAYMENT_APPLE: 1, PAYMENT_GOOGLE: 2 };

export type ProductBannerLinkType =
	| 0
	| "BANNER_LINK_NONE"
	| 1
	| "BANNER_LINK_ITEM"
	| 2
	| "BANNER_LINK_URL"
	| 3
	| "BANNER_LINK_CATEGORY";
enums.ProductBannerLinkType = {
	BANNER_LINK_NONE: 0,
	BANNER_LINK_ITEM: 1,
	BANNER_LINK_URL: 2,
	BANNER_LINK_CATEGORY: 3,
};

export type ProductEventType =
	| 0
	| "NO_EVENT"
	| 65537
	| "CARRIER_ANY"
	| 131073
	| "BUDDY_ANY"
	| 196609
	| "INSTALL_IOS"
	| 196610
	| "INSTALL_ANDROID"
	| 262145
	| "MISSION_ANY"
	| 327681
	| "MUSTBUY_ANY";
enums.ProductEventType = {
	NO_EVENT: 0,
	CARRIER_ANY: 65537,
	BUDDY_ANY: 131073,
	INSTALL_IOS: 196609,
	INSTALL_ANDROID: 196610,
	MISSION_ANY: 262145,
	MUSTBUY_ANY: 327681,
};

export type StickerResourceType =
	| 1
	| "STATIC"
	| 2
	| "ANIMATION"
	| 3
	| "SOUND"
	| 4
	| "ANIMATION_SOUND"
	| 5
	| "POPUP"
	| 6
	| "POPUP_SOUND"
	| 7
	| "NAME_TEXT"
	| 8
	| "PER_STICKER_TEXT";
enums.StickerResourceType = {
	STATIC: 1,
	ANIMATION: 2,
	SOUND: 3,
	ANIMATION_SOUND: 4,
	POPUP: 5,
	POPUP_SOUND: 6,
	NAME_TEXT: 7,
	PER_STICKER_TEXT: 8,
};

export type PlaceSearchProvider = 0 | "GOOGLE" | 1 | "BAIDU" | 2 | "FOURSQUARE";
enums.PlaceSearchProvider = { GOOGLE: 0, BAIDU: 1, FOURSQUARE: 2 };

export type PointErrorCode =
	| 3001
	| "REQUEST_DUPLICATION"
	| 3002
	| "INVALID_PARAMETER"
	| 3003
	| "NOT_ENOUGH_BALANCE"
	| 3004
	| "AUTHENTICATION_FAIL"
	| 3005
	| "API_ACCESS_FORBIDDEN"
	| 3006
	| "MEMBER_ACCOUNT_NOT_FOUND"
	| 3007
	| "SERVICE_ACCOUNT_NOT_FOUND"
	| 3008
	| "TRANSACTION_NOT_FOUND"
	| 3009
	| "ALREADY_REVERSED_TRANSACTION"
	| 3010
	| "MESSAGE_NOT_READABLE"
	| 3011
	| "HTTP_REQUEST_METHOD_NOT_SUPPORTED"
	| 3012
	| "HTTP_MEDIA_TYPE_NOT_SUPPORTED"
	| 3013
	| "NOT_ALLOWED_TO_DEPOSIT"
	| 3014
	| "NOT_ALLOWED_TO_PAY"
	| 3015
	| "TRANSACTION_ACCESS_FORBIDDEN"
	| 4001
	| "INVALID_SERVICE_CONFIGURATION"
	| 5004
	| "DCS_COMMUNICATION_FAIL"
	| 5007
	| "UPDATE_BALANCE_FAIL"
	| 5888
	| "SYSTEM_MAINTENANCE"
	| 5999
	| "SYSTEM_ERROR";
enums.PointErrorCode = {
	REQUEST_DUPLICATION: 3001,
	INVALID_PARAMETER: 3002,
	NOT_ENOUGH_BALANCE: 3003,
	AUTHENTICATION_FAIL: 3004,
	API_ACCESS_FORBIDDEN: 3005,
	MEMBER_ACCOUNT_NOT_FOUND: 3006,
	SERVICE_ACCOUNT_NOT_FOUND: 3007,
	TRANSACTION_NOT_FOUND: 3008,
	ALREADY_REVERSED_TRANSACTION: 3009,
	MESSAGE_NOT_READABLE: 3010,
	HTTP_REQUEST_METHOD_NOT_SUPPORTED: 3011,
	HTTP_MEDIA_TYPE_NOT_SUPPORTED: 3012,
	NOT_ALLOWED_TO_DEPOSIT: 3013,
	NOT_ALLOWED_TO_PAY: 3014,
	TRANSACTION_ACCESS_FORBIDDEN: 3015,
	INVALID_SERVICE_CONFIGURATION: 4001,
	DCS_COMMUNICATION_FAIL: 5004,
	UPDATE_BALANCE_FAIL: 5007,
	SYSTEM_MAINTENANCE: 5888,
	SYSTEM_ERROR: 5999,
};

export type ProfileAttribute =
	| 1
	| "EMAIL"
	| 2
	| "DISPLAY_NAME"
	| 4
	| "PHONETIC_NAME"
	| 8
	| "PICTURE"
	| 16
	| "STATUS_MESSAGE"
	| 32
	| "ALLOW_SEARCH_BY_USERID"
	| 64
	| "ALLOW_SEARCH_BY_EMAIL"
	| 128
	| "BUDDY_STATUS"
	| 256
	| "MUSIC_PROFILE"
	| 511
	| "ALL";
enums.ProfileAttribute = {
	EMAIL: 1,
	DISPLAY_NAME: 2,
	PHONETIC_NAME: 4,
	PICTURE: 8,
	STATUS_MESSAGE: 16,
	ALLOW_SEARCH_BY_USERID: 32,
	ALLOW_SEARCH_BY_EMAIL: 64,
	BUDDY_STATUS: 128,
	MUSIC_PROFILE: 256,
	ALL: 511,
};

export type PublicType = 0 | "HIDDEN" | 1000 | "PUBLIC";
enums.PublicType = { HIDDEN: 0, PUBLIC: 1000 };

export type RedirectType = 0 | "NONE" | 1 | "EXPIRE_SECOND";
enums.RedirectType = { NONE: 0, EXPIRE_SECOND: 1 };

export type RegistrationType =
	| 0
	| "PHONE"
	| 1
	| "EMAIL_WAP"
	| 2305
	| "FACEBOOK"
	| 2306
	| "SINA"
	| 2307
	| "RENREN"
	| 2308
	| "FEIXIN";
enums.RegistrationType = {
	PHONE: 0,
	EMAIL_WAP: 1,
	FACEBOOK: 2305,
	SINA: 2306,
	RENREN: 2307,
	FEIXIN: 2308,
};

export type ChatRoomAnnouncementType = 0 | "MESSAGE" | 1 | "NOTE";
enums.ChatRoomAnnouncementType = { MESSAGE: 0, NOTE: 1 };

export type SettingsAttribute =
	| 1
	| "NOTIFICATION_ENABLE"
	| 2
	| "NOTIFICATION_MUTE_EXPIRATION"
	| 4
	| "NOTIFICATION_NEW_MESSAGE"
	| 8
	| "NOTIFICATION_GROUP_INVITATION"
	| 16
	| "NOTIFICATION_SHOW_MESSAGE"
	| 32
	| "NOTIFICATION_INCOMING_CALL"
	| 64
	| "PRIVACY_SYNC_CONTACTS"
	| 128
	| "PRIVACY_SEARCH_BY_PHONE_NUMBER"
	| 256
	| "NOTIFICATION_SOUND_MESSAGE"
	| 512
	| "NOTIFICATION_SOUND_GROUP"
	| 1024
	| "CONTACT_MY_TICKET"
	| 2048
	| "IDENTITY_PROVIDER"
	| 4096
	| "IDENTITY_IDENTIFIER"
	| 8192
	| "PRIVACY_SEARCH_BY_USERID"
	| 16384
	| "PRIVACY_SEARCH_BY_EMAIL"
	| 32768
	| "PREFERENCE_LOCALE"
	| 65536
	| "NOTIFICATION_DISABLED_WITH_SUB"
	| 131072
	| "NOTIFICATION_PAYMENT"
	| 262144
	| "SECURITY_CENTER_SETTINGS"
	| 524288
	| "SNS_ACCOUNT"
	| 1048576
	| "PHONE_REGISTRATION"
	| 2097152
	| "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
	| 4194304
	| "CUSTOM_MODE"
	| 8388608
	| "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
	| 16777216
	| "EMAIL_CONFIRMATION_STATUS"
	| 33554432
	| "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
	| 67108864
	| "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
	| 134217728
	| "PRIVACY_AGREE_USE_PAIDCALL"
	| 268435456
	| "ACCOUNT_MIGRATION_PINCODE"
	| 536870912
	| "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
	| 1073741824
	| "PRIVACY_ALLOW_FRIEND_REQUEST"
	| 2147483647
	| "ALL";
enums.SettingsAttribute = {
	NOTIFICATION_ENABLE: 1,
	NOTIFICATION_MUTE_EXPIRATION: 2,
	NOTIFICATION_NEW_MESSAGE: 4,
	NOTIFICATION_GROUP_INVITATION: 8,
	NOTIFICATION_SHOW_MESSAGE: 16,
	NOTIFICATION_INCOMING_CALL: 32,
	PRIVACY_SYNC_CONTACTS: 64,
	PRIVACY_SEARCH_BY_PHONE_NUMBER: 128,
	NOTIFICATION_SOUND_MESSAGE: 256,
	NOTIFICATION_SOUND_GROUP: 512,
	CONTACT_MY_TICKET: 1024,
	IDENTITY_PROVIDER: 2048,
	IDENTITY_IDENTIFIER: 4096,
	PRIVACY_SEARCH_BY_USERID: 8192,
	PRIVACY_SEARCH_BY_EMAIL: 16384,
	PREFERENCE_LOCALE: 32768,
	NOTIFICATION_DISABLED_WITH_SUB: 65536,
	NOTIFICATION_PAYMENT: 131072,
	SECURITY_CENTER_SETTINGS: 262144,
	SNS_ACCOUNT: 524288,
	PHONE_REGISTRATION: 1048576,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: 2097152,
	CUSTOM_MODE: 4194304,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: 8388608,
	EMAIL_CONFIRMATION_STATUS: 16777216,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: 33554432,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: 67108864,
	PRIVACY_AGREE_USE_PAIDCALL: 134217728,
	ACCOUNT_MIGRATION_PINCODE: 268435456,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: 536870912,
	PRIVACY_ALLOW_FRIEND_REQUEST: 1073741824,
	ALL: 2147483647,
};

export type SettingsAttributeEx =
	| 0
	| "NOTIFICATION_ENABLE"
	| 1
	| "NOTIFICATION_MUTE_EXPIRATION"
	| 2
	| "NOTIFICATION_NEW_MESSAGE"
	| 3
	| "NOTIFICATION_GROUP_INVITATION"
	| 4
	| "NOTIFICATION_SHOW_MESSAGE"
	| 5
	| "NOTIFICATION_INCOMING_CALL"
	| 6
	| "PRIVACY_SYNC_CONTACTS"
	| 7
	| "PRIVACY_SEARCH_BY_PHONE_NUMBER"
	| 8
	| "NOTIFICATION_SOUND_MESSAGE"
	| 9
	| "NOTIFICATION_SOUND_GROUP"
	| 10
	| "CONTACT_MY_TICKET"
	| 11
	| "IDENTITY_PROVIDER"
	| 12
	| "IDENTITY_IDENTIFIER"
	| 13
	| "PRIVACY_SEARCH_BY_USERID"
	| 14
	| "PRIVACY_SEARCH_BY_EMAIL"
	| 15
	| "PREFERENCE_LOCALE"
	| 16
	| "NOTIFICATION_DISABLED_WITH_SUB"
	| 17
	| "NOTIFICATION_PAYMENT"
	| 18
	| "SECURITY_CENTER_SETTINGS"
	| 19
	| "SNS_ACCOUNT"
	| 20
	| "PHONE_REGISTRATION"
	| 21
	| "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
	| 22
	| "CUSTOM_MODE"
	| 23
	| "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
	| 24
	| "EMAIL_CONFIRMATION_STATUS"
	| 25
	| "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
	| 26
	| "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
	| 27
	| "PRIVACY_AGREE_USE_PAIDCALL"
	| 28
	| "ACCOUNT_MIGRATION_PINCODE"
	| 29
	| "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
	| 30
	| "PRIVACY_ALLOW_FRIEND_REQUEST"
	| 33
	| "E2EE_ENABLE"
	| 34
	| "HITOKOTO_BACKUP_REQUESTED"
	| 35
	| "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
	| 36
	| "CONTACT_ALLOW_FOLLOWING"
	| 37
	| "PRIVACY_ALLOW_NEARBY"
	| 38
	| "AGREEMENT_NEARBY"
	| 39
	| "AGREEMENT_SQUARE"
	| 40
	| "NOTIFICATION_MENTION"
	| 41
	| "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
	| 42
	| "AGREEMENT_BOT_USE"
	| 43
	| "AGREEMENT_SHAKE_FUNCTION"
	| 44
	| "AGREEMENT_MOBILE_CONTACT_NAME"
	| 45
	| "NOTIFICATION_THUMBNAIL"
	| 46
	| "AGREEMENT_SOUND_TO_TEXT"
	| 47
	| "ENABLE_SOUND_TO_TEXT";
enums.SettingsAttributeEx = {
	NOTIFICATION_ENABLE: 0,
	NOTIFICATION_MUTE_EXPIRATION: 1,
	NOTIFICATION_NEW_MESSAGE: 2,
	NOTIFICATION_GROUP_INVITATION: 3,
	NOTIFICATION_SHOW_MESSAGE: 4,
	NOTIFICATION_INCOMING_CALL: 5,
	PRIVACY_SYNC_CONTACTS: 6,
	PRIVACY_SEARCH_BY_PHONE_NUMBER: 7,
	NOTIFICATION_SOUND_MESSAGE: 8,
	NOTIFICATION_SOUND_GROUP: 9,
	CONTACT_MY_TICKET: 10,
	IDENTITY_PROVIDER: 11,
	IDENTITY_IDENTIFIER: 12,
	PRIVACY_SEARCH_BY_USERID: 13,
	PRIVACY_SEARCH_BY_EMAIL: 14,
	PREFERENCE_LOCALE: 15,
	NOTIFICATION_DISABLED_WITH_SUB: 16,
	NOTIFICATION_PAYMENT: 17,
	SECURITY_CENTER_SETTINGS: 18,
	SNS_ACCOUNT: 19,
	PHONE_REGISTRATION: 20,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: 21,
	CUSTOM_MODE: 22,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: 23,
	EMAIL_CONFIRMATION_STATUS: 24,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: 25,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: 26,
	PRIVACY_AGREE_USE_PAIDCALL: 27,
	ACCOUNT_MIGRATION_PINCODE: 28,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: 29,
	PRIVACY_ALLOW_FRIEND_REQUEST: 30,
	E2EE_ENABLE: 33,
	HITOKOTO_BACKUP_REQUESTED: 34,
	PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: 35,
	CONTACT_ALLOW_FOLLOWING: 36,
	PRIVACY_ALLOW_NEARBY: 37,
	AGREEMENT_NEARBY: 38,
	AGREEMENT_SQUARE: 39,
	NOTIFICATION_MENTION: 40,
	ALLOW_UNREGISTRATION_SECONDARY_DEVICE: 41,
	AGREEMENT_BOT_USE: 42,
	AGREEMENT_SHAKE_FUNCTION: 43,
	AGREEMENT_MOBILE_CONTACT_NAME: 44,
	NOTIFICATION_THUMBNAIL: 45,
	AGREEMENT_SOUND_TO_TEXT: 46,
	ENABLE_SOUND_TO_TEXT: 47,
};

export type SnsIdType =
	| 1
	| "FACEBOOK"
	| 2
	| "SINA"
	| 3
	| "RENREN"
	| 4
	| "FEIXIN"
	| 5
	| "BBM"
	| 6
	| "APPLE"
	| 7
	| "YAHOOJAPAN";
enums.SnsIdType = {
	FACEBOOK: 1,
	SINA: 2,
	RENREN: 3,
	FEIXIN: 4,
	BBM: 5,
	APPLE: 6,
	YAHOOJAPAN: 7,
};

export type SpammerReason =
	| 0
	| "OTHER"
	| 1
	| "ADVERTISING"
	| 2
	| "GENDER_HARASSMENT"
	| 3
	| "HARASSMENT";
enums.SpammerReason = {
	OTHER: 0,
	ADVERTISING: 1,
	GENDER_HARASSMENT: 2,
	HARASSMENT: 3,
};

export type SyncActionType = 0 | "SYNC" | 1 | "REPORT";
enums.SyncActionType = { SYNC: 0, REPORT: 1 };

export type SpotCategory =
	| 0
	| "UNKNOWN"
	| 1
	| "GOURMET"
	| 2
	| "BEAUTY"
	| 3
	| "TRAVEL"
	| 4
	| "SHOPPING"
	| 5
	| "ENTERTAINMENT"
	| 6
	| "SPORTS"
	| 7
	| "TRANSPORT"
	| 8
	| "LIFE"
	| 9
	| "HOSPITAL"
	| 10
	| "FINANCE"
	| 11
	| "EDUCATION"
	| 12
	| "OTHER"
	| 10000
	| "ALL";
enums.SpotCategory = {
	UNKNOWN: 0,
	GOURMET: 1,
	BEAUTY: 2,
	TRAVEL: 3,
	SHOPPING: 4,
	ENTERTAINMENT: 5,
	SPORTS: 6,
	TRANSPORT: 7,
	LIFE: 8,
	HOSPITAL: 9,
	FINANCE: 10,
	EDUCATION: 11,
	OTHER: 12,
	ALL: 10000,
};

export type SyncCategory =
	| 0
	| "PROFILE"
	| 1
	| "SETTINGS"
	| 2
	| "OPS"
	| 3
	| "CONTACT"
	| 4
	| "RECOMMEND"
	| 5
	| "BLOCK"
	| 6
	| "GROUP"
	| 7
	| "ROOM"
	| 8
	| "NOTIFICATION"
	| 9
	| "ADDRESS_BOOK";
enums.SyncCategory = {
	PROFILE: 0,
	SETTINGS: 1,
	OPS: 2,
	CONTACT: 3,
	RECOMMEND: 4,
	BLOCK: 5,
	GROUP: 6,
	ROOM: 7,
	NOTIFICATION: 8,
	ADDRESS_BOOK: 9,
};

export type TMessageBoxStatus = 1 | "ACTIVATED" | 2 | "UNREAD";
enums.TMessageBoxStatus = { ACTIVATED: 1, UNREAD: 2 };

export type UniversalNotificationServiceErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "INVALID_KEY"
	| 2
	| "ILLEGAL_ARGUMENT"
	| 3
	| "TOO_MANY_REQUEST"
	| 4
	| "AUTHENTICATION_FAILED"
	| 5
	| "NO_WRITE_PERMISSION";
enums.UniversalNotificationServiceErrorCode = {
	INTERNAL_ERROR: 0,
	INVALID_KEY: 1,
	ILLEGAL_ARGUMENT: 2,
	TOO_MANY_REQUEST: 3,
	AUTHENTICATION_FAILED: 4,
	NO_WRITE_PERMISSION: 5,
};

export type UnregistrationReason =
	| 1
	| "UNREGISTRATION_REASON_UNREGISTER_USER"
	| 2
	| "UNREGISTRATION_REASON_UNBIND_DEVICE";
enums.UnregistrationReason = {
	UNREGISTRATION_REASON_UNREGISTER_USER: 1,
	UNREGISTRATION_REASON_UNBIND_DEVICE: 2,
};

export type UserAgeType = 1 | "OVER" | 2 | "UNDER" | 3 | "UNDEFINED";
enums.UserAgeType = { OVER: 1, UNDER: 2, UNDEFINED: 3 };

export type VerificationMethod =
	| 0
	| "NO_AVAILABLE"
	| 1
	| "PIN_VIA_SMS"
	| 2
	| "CALLERID_INDIGO"
	| 4
	| "PIN_VIA_TTS"
	| 10
	| "SKIP";
enums.VerificationMethod = {
	NO_AVAILABLE: 0,
	PIN_VIA_SMS: 1,
	CALLERID_INDIGO: 2,
	PIN_VIA_TTS: 4,
	SKIP: 10,
};

export type VerificationResult =
	| 0
	| "FAILED"
	| 1
	| "OK_NOT_REGISTERED_YET"
	| 2
	| "OK_REGISTERED_WITH_SAME_DEVICE"
	| 3
	| "OK_REGISTERED_WITH_ANOTHER_DEVICE";
enums.VerificationResult = {
	FAILED: 0,
	OK_NOT_REGISTERED_YET: 1,
	OK_REGISTERED_WITH_SAME_DEVICE: 2,
	OK_REGISTERED_WITH_ANOTHER_DEVICE: 3,
};

export type WapInvitationType = 1 | "REGISTRATION" | 2 | "CHAT";
enums.WapInvitationType = { REGISTRATION: 1, CHAT: 2 };

export type MediaType = 1 | "AUDIO" | 2 | "VIDEO";
enums.MediaType = { AUDIO: 1, VIDEO: 2 };

export type SQErrorCode =
	| 0
	| "UNKNOWN"
	| 400
	| "ILLEGAL_ARGUMENT"
	| 401
	| "AUTHENTICATION_FAILURE"
	| 403
	| "FORBIDDEN"
	| 404
	| "NOT_FOUND"
	| 409
	| "REVISION_MISMATCH"
	| 410
	| "PRECONDITION_FAILED"
	| 500
	| "INTERNAL_ERROR"
	| 501
	| "NOT_IMPLEMENTED"
	| 505
	| "TRY_AGAIN_LATER";
enums.SQErrorCode = {
	UNKNOWN: 0,
	ILLEGAL_ARGUMENT: 400,
	AUTHENTICATION_FAILURE: 401,
	FORBIDDEN: 403,
	NOT_FOUND: 404,
	REVISION_MISMATCH: 409,
	PRECONDITION_FAILED: 410,
	INTERNAL_ERROR: 500,
	NOT_IMPLEMENTED: 501,
	TRY_AGAIN_LATER: 505,
};

export type SquareEventType =
	| 0
	| "RECEIVE_MESSAGE"
	| 1
	| "SEND_MESSAGE"
	| 2
	| "NOTIFIED_JOIN_SQUARE_CHAT"
	| 3
	| "NOTIFIED_INVITE_INTO_SQUARE_CHAT"
	| 4
	| "NOTIFIED_LEAVE_SQUARE_CHAT"
	| 5
	| "NOTIFIED_DESTROY_MESSAGE"
	| 6
	| "NOTIFIED_MARK_AS_READ"
	| 7
	| "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE"
	| 8
	| "NOTIFIED_UPDATE_SQUARE"
	| 9
	| "NOTIFIED_UPDATE_SQUARE_STATUS"
	| 10
	| "NOTIFIED_UPDATE_SQUARE_AUTHORITY"
	| 11
	| "NOTIFIED_UPDATE_SQUARE_MEMBER"
	| 12
	| "NOTIFIED_UPDATE_SQUARE_CHAT"
	| 13
	| "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS"
	| 14
	| "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER"
	| 15
	| "NOTIFIED_CREATE_SQUARE_MEMBER"
	| 16
	| "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER"
	| 17
	| "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION"
	| 18
	| "NOTIFIED_SHUTDOWN_SQUARE"
	| 19
	| "NOTIFIED_KICKOUT_FROM_SQUARE"
	| 20
	| "NOTIFIED_DELETE_SQUARE_CHAT"
	| 21
	| "NOTIFICATION_JOIN_REQUEST"
	| 22
	| "NOTIFICATION_JOINED"
	| 23
	| "NOTIFICATION_PROMOTED_COADMIN"
	| 24
	| "NOTIFICATION_PROMOTED_ADMIN"
	| 25
	| "NOTIFICATION_DEMOTED_MEMBER"
	| 26
	| "NOTIFICATION_KICKED_OUT"
	| 27
	| "NOTIFICATION_SQUARE_DELETE"
	| 28
	| "NOTIFICATION_SQUARE_CHAT_DELETE"
	| 29
	| "NOTIFICATION_MESSAGE"
	| 30
	| "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME"
	| 31
	| "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE"
	| 32
	| "NOTIFIED_UPDATE_SQUARE_FEATURE_SET"
	| 33
	| "NOTIFIED_ADD_BOT"
	| 34
	| "NOTIFIED_REMOVE_BOT"
	| 36
	| "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS"
	| 37
	| "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT"
	| 38
	| "NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT"
	| 39
	| "NOTIFICATION_POST_ANNOUNCEMENT"
	| 40
	| "NOTIFICATION_POST"
	| 41
	| "MUTATE_MESSAGE"
	| 42
	| "NOTIFICATION_NEW_CHAT_MEMBER"
	| 43
	| "NOTIFIED_UPDATE_READONLY_CHAT"
	| 46
	| "NOTIFIED_UPDATE_MESSAGE_STATUS"
	| 47
	| "NOTIFICATION_MESSAGE_REACTION"
	| 48
	| "NOTIFIED_CHAT_POPUP"
	| 49
	| "NOTIFIED_SYSTEM_MESSAGE"
	| 50
	| "NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET";
enums.SquareEventType = {
	RECEIVE_MESSAGE: 0,
	SEND_MESSAGE: 1,
	NOTIFIED_JOIN_SQUARE_CHAT: 2,
	NOTIFIED_INVITE_INTO_SQUARE_CHAT: 3,
	NOTIFIED_LEAVE_SQUARE_CHAT: 4,
	NOTIFIED_DESTROY_MESSAGE: 5,
	NOTIFIED_MARK_AS_READ: 6,
	NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE: 7,
	NOTIFIED_UPDATE_SQUARE: 8,
	NOTIFIED_UPDATE_SQUARE_STATUS: 9,
	NOTIFIED_UPDATE_SQUARE_AUTHORITY: 10,
	NOTIFIED_UPDATE_SQUARE_MEMBER: 11,
	NOTIFIED_UPDATE_SQUARE_CHAT: 12,
	NOTIFIED_UPDATE_SQUARE_CHAT_STATUS: 13,
	NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER: 14,
	NOTIFIED_CREATE_SQUARE_MEMBER: 15,
	NOTIFIED_CREATE_SQUARE_CHAT_MEMBER: 16,
	NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION: 17,
	NOTIFIED_SHUTDOWN_SQUARE: 18,
	NOTIFIED_KICKOUT_FROM_SQUARE: 19,
	NOTIFIED_DELETE_SQUARE_CHAT: 20,
	NOTIFICATION_JOIN_REQUEST: 21,
	NOTIFICATION_JOINED: 22,
	NOTIFICATION_PROMOTED_COADMIN: 23,
	NOTIFICATION_PROMOTED_ADMIN: 24,
	NOTIFICATION_DEMOTED_MEMBER: 25,
	NOTIFICATION_KICKED_OUT: 26,
	NOTIFICATION_SQUARE_DELETE: 27,
	NOTIFICATION_SQUARE_CHAT_DELETE: 28,
	NOTIFICATION_MESSAGE: 29,
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME: 30,
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE: 31,
	NOTIFIED_UPDATE_SQUARE_FEATURE_SET: 32,
	NOTIFIED_ADD_BOT: 33,
	NOTIFIED_REMOVE_BOT: 34,
	NOTIFIED_UPDATE_SQUARE_NOTE_STATUS: 36,
	NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT: 37,
	NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT: 38,
	NOTIFICATION_POST_ANNOUNCEMENT: 39,
	NOTIFICATION_POST: 40,
	MUTATE_MESSAGE: 41,
	NOTIFICATION_NEW_CHAT_MEMBER: 42,
	NOTIFIED_UPDATE_READONLY_CHAT: 43,
	NOTIFIED_UPDATE_MESSAGE_STATUS: 46,
	NOTIFICATION_MESSAGE_REACTION: 47,
	NOTIFIED_CHAT_POPUP: 48,
	NOTIFIED_SYSTEM_MESSAGE: 49,
	NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET: 50,
};

export type SquareMemberRelationState = 1 | "NONE" | 2 | "BLOCKED";
enums.SquareMemberRelationState = { NONE: 1, BLOCKED: 2 };

export type SquareFeatureControlState = 1 | "DISABLED" | 2 | "ENABLED";
enums.SquareFeatureControlState = { DISABLED: 1, ENABLED: 2 };

export type BooleanState = 0 | "NONE" | 1 | "OFF" | 2 | "ON";
enums.BooleanState = { NONE: 0, OFF: 1, ON: 2 };

export type SquareType = 0 | "CLOSED" | 1 | "OPEN";
enums.SquareType = { CLOSED: 0, OPEN: 1 };

export type SquareChatType =
	| 1
	| "OPEN"
	| 2
	| "SECRET"
	| 3
	| "ONE_ON_ONE"
	| 4
	| "SQUARE_DEFAULT";
enums.SquareChatType = { OPEN: 1, SECRET: 2, ONE_ON_ONE: 3, SQUARE_DEFAULT: 4 };

export type SquareErrorCode =
	| 0
	| "UNKNOWN"
	| 400
	| "ILLEGAL_ARGUMENT"
	| 401
	| "AUTHENTICATION_FAILURE"
	| 403
	| "FORBIDDEN"
	| 404
	| "NOT_FOUND"
	| 409
	| "REVISION_MISMATCH"
	| 410
	| "PRECONDITION_FAILED"
	| 500
	| "INTERNAL_ERROR"
	| 501
	| "NOT_IMPLEMENTED"
	| 503
	| "TRY_AGAIN_LATER"
	| 505
	| "MAINTENANCE"
	| 506
	| "NO_PRESENCE_EXISTS";
enums.SquareErrorCode = {
	UNKNOWN: 0,
	ILLEGAL_ARGUMENT: 400,
	AUTHENTICATION_FAILURE: 401,
	FORBIDDEN: 403,
	NOT_FOUND: 404,
	REVISION_MISMATCH: 409,
	PRECONDITION_FAILED: 410,
	INTERNAL_ERROR: 500,
	NOT_IMPLEMENTED: 501,
	TRY_AGAIN_LATER: 503,
	MAINTENANCE: 505,
	NO_PRESENCE_EXISTS: 506,
};

export type SquareChatState = 0 | "ALIVE" | 1 | "DELETED" | 2 | "SUSPENDED";
enums.SquareChatState = { ALIVE: 0, DELETED: 1, SUSPENDED: 2 };

export type SquareFeatureSetAttribute =
	| 1
	| "CREATING_SECRET_SQUARE_CHAT"
	| 2
	| "INVITING_INTO_OPEN_SQUARE_CHAT";
enums.SquareFeatureSetAttribute = {
	CREATING_SECRET_SQUARE_CHAT: 1,
	INVITING_INTO_OPEN_SQUARE_CHAT: 2,
};

export type SquareMembershipState =
	| 1
	| "JOIN_REQUESTED"
	| 2
	| "JOINED"
	| 3
	| "REJECTED"
	| 4
	| "LEFT"
	| 5
	| "KICK_OUT"
	| 6
	| "BANNED"
	| 7
	| "DELETED";
enums.SquareMembershipState = {
	JOIN_REQUESTED: 1,
	JOINED: 2,
	REJECTED: 3,
	LEFT: 4,
	KICK_OUT: 5,
	BANNED: 6,
	DELETED: 7,
};

export type SquareChatMemberAttribute =
	| 4
	| "MEMBERSHIP_STATE"
	| 6
	| "NOTIFICATION_MESSAGE";
enums.SquareChatMemberAttribute = {
	MEMBERSHIP_STATE: 4,
	NOTIFICATION_MESSAGE: 6,
};

export type SquareMemberRole = 1 | "ADMIN" | 2 | "CO_ADMIN" | 10 | "MEMBER";
enums.SquareMemberRole = { ADMIN: 1, CO_ADMIN: 2, MEMBER: 10 };

export type PreconditionFailedExtraInfo = 0 | "DUPLICATED_DISPLAY_NAME";
enums.PreconditionFailedExtraInfo = { DUPLICATED_DISPLAY_NAME: 0 };

export type SquareChatMembershipState = 1 | "JOINED" | 2 | "LEFT";
enums.SquareChatMembershipState = { JOINED: 1, LEFT: 2 };

export type FetchDirection = 1 | "FORWARD" | 2 | "BACKWARD";
enums.FetchDirection = { FORWARD: 1, BACKWARD: 2 };

export type SquareAttribute =
	| 1
	| "NAME"
	| 2
	| "WELCOME_MESSAGE"
	| 3
	| "PROFILE_IMAGE"
	| 4
	| "DESCRIPTION"
	| 6
	| "SEARCHABLE"
	| 7
	| "CATEGORY"
	| 8
	| "INVITATION_URL"
	| 9
	| "ABLE_TO_USE_INVITATION_URL"
	| 10
	| "STATE";
enums.SquareAttribute = {
	NAME: 1,
	WELCOME_MESSAGE: 2,
	PROFILE_IMAGE: 3,
	DESCRIPTION: 4,
	SEARCHABLE: 6,
	CATEGORY: 7,
	INVITATION_URL: 8,
	ABLE_TO_USE_INVITATION_URL: 9,
	STATE: 10,
};

export type SquareAuthorityAttribute =
	| 1
	| "UPDATE_SQUARE_PROFILE"
	| 2
	| "INVITE_NEW_MEMBER"
	| 3
	| "APPROVE_JOIN_REQUEST"
	| 4
	| "CREATE_POST"
	| 5
	| "CREATE_OPEN_SQUARE_CHAT"
	| 6
	| "DELETE_SQUARE_CHAT_OR_POST"
	| 7
	| "REMOVE_SQUARE_MEMBER"
	| 8
	| "GRANT_ROLE"
	| 9
	| "ENABLE_INVITATION_TICKET"
	| 10
	| "CREATE_CHAT_ANNOUNCEMENT";
enums.SquareAuthorityAttribute = {
	UPDATE_SQUARE_PROFILE: 1,
	INVITE_NEW_MEMBER: 2,
	APPROVE_JOIN_REQUEST: 3,
	CREATE_POST: 4,
	CREATE_OPEN_SQUARE_CHAT: 5,
	DELETE_SQUARE_CHAT_OR_POST: 6,
	REMOVE_SQUARE_MEMBER: 7,
	GRANT_ROLE: 8,
	ENABLE_INVITATION_TICKET: 9,
	CREATE_CHAT_ANNOUNCEMENT: 10,
};

export type SquareEventStatus = 1 | "NORMAL" | 2 | "ALERT_DISABLED";
enums.SquareEventStatus = { NORMAL: 1, ALERT_DISABLED: 2 };

export type SuggestDictionaryIncrementStatus =
	| 0
	| "SUCCESS"
	| 1
	| "INVALID_REVISION"
	| 2
	| "TOO_LARGE_DATA"
	| 3
	| "SCHEME_CHANGED"
	| 4
	| "RETRY"
	| 5
	| "FAIL"
	| 6
	| "TOO_OLD_DATA";
enums.SuggestDictionaryIncrementStatus = {
	SUCCESS: 0,
	INVALID_REVISION: 1,
	TOO_LARGE_DATA: 2,
	SCHEME_CHANGED: 3,
	RETRY: 4,
	FAIL: 5,
	TOO_OLD_DATA: 6,
};

export type LiffErrorCode =
	| 1
	| "INVALID_REQUEST"
	| 2
	| "UNAUTHORIZED"
	| 3
	| "CONSENT_REQUIRED"
	| 4
	| "VERSION_UPDATE_REQUIRED"
	| 5
	| "COMPREHENSIVE_AGREEMENT_REQUIRED"
	| 6
	| "SPLASH_SCREEN_REQUIRED"
	| 100
	| "SERVER_ERROR";
enums.LiffErrorCode = {
	INVALID_REQUEST: 1,
	UNAUTHORIZED: 2,
	CONSENT_REQUIRED: 3,
	VERSION_UPDATE_REQUIRED: 4,
	COMPREHENSIVE_AGREEMENT_REQUIRED: 5,
	SPLASH_SCREEN_REQUIRED: 6,
	SERVER_ERROR: 100,
};

export type HomeExceptionCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "ILLEGAL_ARGUMENT"
	| 2
	| "VERIFICATION_FAILED"
	| 3
	| "NOT_FOUND"
	| 4
	| "RETRY_LATER"
	| 5
	| "HUMAN_VERIFICATION_REQUIRED"
	| 100
	| "INVALID_CONTEXT"
	| 101
	| "APP_UPGRADE_REQUIRED"
	| 102
	| "NO_CONTENT";
enums.HomeExceptionCode = {
	INTERNAL_ERROR: 0,
	ILLEGAL_ARGUMENT: 1,
	VERIFICATION_FAILED: 2,
	NOT_FOUND: 3,
	RETRY_LATER: 4,
	HUMAN_VERIFICATION_REQUIRED: 5,
	INVALID_CONTEXT: 100,
	APP_UPGRADE_REQUIRED: 101,
	NO_CONTENT: 102,
};

export type ChatappErrorCode =
	| 1
	| "INVALID_REQUEST"
	| 2
	| "UNAUTHORIZED"
	| 100
	| "SERVER_ERROR";
enums.ChatappErrorCode = {
	INVALID_REQUEST: 1,
	UNAUTHORIZED: 2,
	SERVER_ERROR: 100,
};

export type MembershipErrorCode =
	| 0
	| "ILLEGAL_ARGUMENT"
	| 1
	| "AUTHENTICATION_FAILED"
	| 5
	| "NOT_FOUND"
	| 20
	| "INTERNAL_ERROR"
	| 33
	| "MAINTENANCE_ERROR";
enums.MembershipErrorCode = {
	ILLEGAL_ARGUMENT: 0,
	AUTHENTICATION_FAILED: 1,
	NOT_FOUND: 5,
	INTERNAL_ERROR: 20,
	MAINTENANCE_ERROR: 33,
};

export type BotErrorCode =
	| 0
	| "UNKNOWN"
	| 1
	| "BOT_NOT_FOUND"
	| 2
	| "BOT_NOT_AVAILABLE"
	| 3
	| "NOT_A_MEMBER"
	| 400
	| "ILLEGAL_ARGUMENT"
	| 401
	| "AUTHENTICATION_FAILED"
	| 500
	| "INTERNAL_ERROR";
enums.BotErrorCode = {
	UNKNOWN: 0,
	BOT_NOT_FOUND: 1,
	BOT_NOT_AVAILABLE: 2,
	NOT_A_MEMBER: 3,
	ILLEGAL_ARGUMENT: 400,
	AUTHENTICATION_FAILED: 401,
	INTERNAL_ERROR: 500,
};

export type BotExternalErrorCode =
	| 0
	| "ILLEGAL_ARGUMENT"
	| 1
	| "INTERNAL_ERROR";
enums.BotExternalErrorCode = { ILLEGAL_ARGUMENT: 0, INTERNAL_ERROR: 1 };

export type AccessTokenRefreshErrorCode =
	| 1000
	| "INVALID_REQUEST"
	| 1001
	| "RETRY_REQUIRED";
enums.AccessTokenRefreshErrorCode = {
	INVALID_REQUEST: 1000,
	RETRY_REQUIRED: 1001,
};

export type AccountEapConnectErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "ILLEGAL_ARGUMENT"
	| 2
	| "VERIFICATION_FAILED"
	| 4
	| "RETRY_LATER"
	| 5
	| "HUMAN_VERIFICATION_REQUIRED"
	| 101
	| "APP_UPGRADE_REQUIRED";
enums.AccountEapConnectErrorCode = {
	INTERNAL_ERROR: 0,
	ILLEGAL_ARGUMENT: 1,
	VERIFICATION_FAILED: 2,
	RETRY_LATER: 4,
	HUMAN_VERIFICATION_REQUIRED: 5,
	APP_UPGRADE_REQUIRED: 101,
};

export type PwlessCredentialErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "ILLEGAL_ARGUMENT"
	| 2
	| "VERIFICATION_FAILED"
	| 3
	| "EXTERNAL_SERVICE_UNAVAILABLE"
	| 4
	| "RETRY_LATER"
	| 100
	| "INVALID_CONTEXT"
	| 101
	| "NOT_SUPPORTED"
	| 102
	| "FORBIDDEN"
	| 201
	| "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR";
enums.PwlessCredentialErrorCode = {
	INTERNAL_ERROR: 0,
	ILLEGAL_ARGUMENT: 1,
	VERIFICATION_FAILED: 2,
	EXTERNAL_SERVICE_UNAVAILABLE: 3,
	RETRY_LATER: 4,
	INVALID_CONTEXT: 100,
	NOT_SUPPORTED: 101,
	FORBIDDEN: 102,
	FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR: 201,
};

export type SecondAuthFactorPinCodeErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "ILLEGAL_ARGUMENT"
	| 2
	| "VERIFICATION_FAILED"
	| 3
	| "RETRY_LATER"
	| 100
	| "INVALID_CONTEXT"
	| 101
	| "APP_UPGRADE_REQUIRED";
enums.SecondAuthFactorPinCodeErrorCode = {
	INTERNAL_ERROR: 0,
	ILLEGAL_ARGUMENT: 1,
	VERIFICATION_FAILED: 2,
	RETRY_LATER: 3,
	INVALID_CONTEXT: 100,
	APP_UPGRADE_REQUIRED: 101,
};

export type AuthErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "ILLEGAL_ARGUMENT"
	| 2
	| "VERIFICATION_FAILED"
	| 3
	| "NOT_FOUND"
	| 4
	| "RETRY_LATER"
	| 5
	| "HUMAN_VERIFICATION_REQUIRED"
	| 100
	| "INVALID_CONTEXT"
	| 101
	| "APP_UPGRADE_REQUIRED";
enums.AuthErrorCode = {
	INTERNAL_ERROR: 0,
	ILLEGAL_ARGUMENT: 1,
	VERIFICATION_FAILED: 2,
	NOT_FOUND: 3,
	RETRY_LATER: 4,
	HUMAN_VERIFICATION_REQUIRED: 5,
	INVALID_CONTEXT: 100,
	APP_UPGRADE_REQUIRED: 101,
};

export type SecondaryPwlessLoginErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "VERIFICATION_FAILED"
	| 2
	| "LOGIN_NOT_ALLOWED"
	| 3
	| "EXTERNAL_SERVICE_UNAVAILABLE"
	| 4
	| "RETRY_LATER"
	| 100
	| "NOT_SUPPORTED"
	| 101
	| "ILLEGAL_ARGUMENT"
	| 102
	| "INVALID_CONTEXT"
	| 103
	| "FORBIDDEN"
	| 200
	| "FIDO_UNKNOWN_CREDENTIAL_ID"
	| 201
	| "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR"
	| 202
	| "FIDO_UNACCEPTABLE_CONTENT";
enums.SecondaryPwlessLoginErrorCode = {
	INTERNAL_ERROR: 0,
	VERIFICATION_FAILED: 1,
	LOGIN_NOT_ALLOWED: 2,
	EXTERNAL_SERVICE_UNAVAILABLE: 3,
	RETRY_LATER: 4,
	NOT_SUPPORTED: 100,
	ILLEGAL_ARGUMENT: 101,
	INVALID_CONTEXT: 102,
	FORBIDDEN: 103,
	FIDO_UNKNOWN_CREDENTIAL_ID: 200,
	FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR: 201,
	FIDO_UNACCEPTABLE_CONTENT: 202,
};

export type SecondaryQrCodeErrorCode =
	| 0
	| "INTERNAL_ERROR"
	| 1
	| "ILLEGAL_ARGUMENT"
	| 2
	| "VERIFICATION_FAILED"
	| 3
	| "NOT_ALLOWED_QR_CODE_LOGIN"
	| 4
	| "VERIFICATION_NOTICE_FAILED"
	| 5
	| "RETRY_LATER"
	| 100
	| "INVALID_CONTEXT"
	| 101
	| "APP_UPGRADE_REQUIRED";
enums.SecondaryQrCodeErrorCode = {
	INTERNAL_ERROR: 0,
	ILLEGAL_ARGUMENT: 1,
	VERIFICATION_FAILED: 2,
	NOT_ALLOWED_QR_CODE_LOGIN: 3,
	VERIFICATION_NOTICE_FAILED: 4,
	RETRY_LATER: 5,
	INVALID_CONTEXT: 100,
	APP_UPGRADE_REQUIRED: 101,
};

export type PaymentErrorCode =
	| 0
	| "SUCCESS"
	| 1000
	| "GENERAL_USER_ERROR"
	| 1101
	| "ACCOUNT_NOT_EXISTS"
	| 1102
	| "ACCOUNT_INVALID_STATUS"
	| 1103
	| "ACCOUNT_ALREADY_EXISTS"
	| 1104
	| "MERCHANT_NOT_EXISTS"
	| 1105
	| "MERCHANT_INVALID_STATUS"
	| 1107
	| "AGREEMENT_REQUIRED"
	| 1108
	| "BLACKLISTED"
	| 1109
	| "WRONG_PASSWORD"
	| 1110
	| "INVALID_CREDIT_CARD"
	| 1111
	| "LIMIT_EXCEEDED"
	| 1115
	| "CANNOT_PROCEED"
	| 1120
	| "TOO_WEAK_PASSWORD"
	| 1125
	| "CANNOT_CREATE_ACCOUNT"
	| 1130
	| "TEMPORARY_PASSWORD_ERROR"
	| 1140
	| "MISSING_PARAMETERS"
	| 1141
	| "NO_VALID_MYCODE_ACCOUNT"
	| 1142
	| "INSUFFICIENT_BALANCE"
	| 1150
	| "TRANSACTION_NOT_FOUND"
	| 1152
	| "TRANSACTION_FINISHED"
	| 1153
	| "PAYMENT_AMOUNT_WRONG"
	| 1157
	| "BALANCE_ACCOUNT_NOT_EXISTS"
	| 1158
	| "DUPLICATED_CITIZEN_ID"
	| 1159
	| "PAYMENT_REQUEST_NOT_FOUND"
	| 1169
	| "AUTH_FAILED"
	| 1171
	| "PASSWORD_SETTING_REQUIRED"
	| 1172
	| "TRANSACTION_ALREADY_PROCESSED"
	| 1178
	| "CURRENCY_NOT_SUPPORTED"
	| 1180
	| "PAYMENT_NOT_AVAILABLE"
	| 1181
	| "TRANSFER_REQUEST_NOT_FOUND"
	| 1183
	| "INVALID_PAYMENT_AMOUNT"
	| 1184
	| "INSUFFICIENT_PAYMENT_AMOUNT"
	| 1185
	| "EXTERNAL_SYSTEM_MAINTENANCE"
	| 1186
	| "EXTERNAL_SYSTEM_INOPERATIONAL"
	| 1192
	| "SESSION_EXPIRED"
	| 1195
	| "UPGRADE_REQUIRED"
	| 1196
	| "REQUEST_TOKEN_EXPIRED"
	| 1198
	| "OPERATION_FINISHED"
	| 1199
	| "EXTERNAL_SYSTEM_ERROR"
	| 1299
	| "PARTIAL_AMOUNT_APPROVED"
	| 1600
	| "PINCODE_AUTH_REQUIRED"
	| 1601
	| "ADDITIONAL_AUTH_REQUIRED"
	| 1603
	| "NOT_BOUND"
	| 1610
	| "OTP_USER_REGISTRATION_ERROR"
	| 1611
	| "OTP_CARD_REGISTRATION_ERROR"
	| 1612
	| "NO_AUTH_METHOD"
	| 1696
	| "GENERAL_USER_ERROR_RESTART"
	| 1697
	| "GENERAL_USER_ERROR_REFRESH"
	| 1698
	| "GENERAL_USER_ERROR_CLOSE"
	| 9000
	| "INTERNAL_SERVER_ERROR"
	| 9999
	| "INTERNAL_SYSTEM_MAINTENANCE"
	| 10000
	| "UNKNOWN_ERROR";
enums.PaymentErrorCode = {
	SUCCESS: 0,
	GENERAL_USER_ERROR: 1000,
	ACCOUNT_NOT_EXISTS: 1101,
	ACCOUNT_INVALID_STATUS: 1102,
	ACCOUNT_ALREADY_EXISTS: 1103,
	MERCHANT_NOT_EXISTS: 1104,
	MERCHANT_INVALID_STATUS: 1105,
	AGREEMENT_REQUIRED: 1107,
	BLACKLISTED: 1108,
	WRONG_PASSWORD: 1109,
	INVALID_CREDIT_CARD: 1110,
	LIMIT_EXCEEDED: 1111,
	CANNOT_PROCEED: 1115,
	TOO_WEAK_PASSWORD: 1120,
	CANNOT_CREATE_ACCOUNT: 1125,
	TEMPORARY_PASSWORD_ERROR: 1130,
	MISSING_PARAMETERS: 1140,
	NO_VALID_MYCODE_ACCOUNT: 1141,
	INSUFFICIENT_BALANCE: 1142,
	TRANSACTION_NOT_FOUND: 1150,
	TRANSACTION_FINISHED: 1152,
	PAYMENT_AMOUNT_WRONG: 1153,
	BALANCE_ACCOUNT_NOT_EXISTS: 1157,
	DUPLICATED_CITIZEN_ID: 1158,
	PAYMENT_REQUEST_NOT_FOUND: 1159,
	AUTH_FAILED: 1169,
	PASSWORD_SETTING_REQUIRED: 1171,
	TRANSACTION_ALREADY_PROCESSED: 1172,
	CURRENCY_NOT_SUPPORTED: 1178,
	PAYMENT_NOT_AVAILABLE: 1180,
	TRANSFER_REQUEST_NOT_FOUND: 1181,
	INVALID_PAYMENT_AMOUNT: 1183,
	INSUFFICIENT_PAYMENT_AMOUNT: 1184,
	EXTERNAL_SYSTEM_MAINTENANCE: 1185,
	EXTERNAL_SYSTEM_INOPERATIONAL: 1186,
	SESSION_EXPIRED: 1192,
	UPGRADE_REQUIRED: 1195,
	REQUEST_TOKEN_EXPIRED: 1196,
	OPERATION_FINISHED: 1198,
	EXTERNAL_SYSTEM_ERROR: 1199,
	PARTIAL_AMOUNT_APPROVED: 1299,
	PINCODE_AUTH_REQUIRED: 1600,
	ADDITIONAL_AUTH_REQUIRED: 1601,
	NOT_BOUND: 1603,
	OTP_USER_REGISTRATION_ERROR: 1610,
	OTP_CARD_REGISTRATION_ERROR: 1611,
	NO_AUTH_METHOD: 1612,
	GENERAL_USER_ERROR_RESTART: 1696,
	GENERAL_USER_ERROR_REFRESH: 1697,
	GENERAL_USER_ERROR_CLOSE: 1698,
	INTERNAL_SERVER_ERROR: 9000,
	INTERNAL_SYSTEM_MAINTENANCE: 9999,
	UNKNOWN_ERROR: 10000,
};

export type SettingsErrorCode =
	| 0
	| "UNKNOWN"
	| 1
	| "NONE"
	| 16641
	| "ILLEGAL_ARGUMENT"
	| 16642
	| "NOT_FOUND"
	| 16643
	| "NOT_AVAILABLE"
	| 16644
	| "TOO_LARGE_VALUE"
	| 16645
	| "CLOCK_DRIFT_DETECTED"
	| 16646
	| "UNSUPPORTED_APPLICATION_TYPE"
	| 16647
	| "DUPLICATED_ENTRY"
	| 16897
	| "AUTHENTICATION_FAILED"
	| 20737
	| "INTERNAL_SERVER_ERROR"
	| 20738
	| "SERVICE_IN_MAINTENANCE_MODE"
	| 20739
	| "SERVICE_UNAVAILABLE";
enums.SettingsErrorCode = {
	UNKNOWN: 0,
	NONE: 1,
	ILLEGAL_ARGUMENT: 16641,
	NOT_FOUND: 16642,
	NOT_AVAILABLE: 16643,
	TOO_LARGE_VALUE: 16644,
	CLOCK_DRIFT_DETECTED: 16645,
	UNSUPPORTED_APPLICATION_TYPE: 16646,
	DUPLICATED_ENTRY: 16647,
	AUTHENTICATION_FAILED: 16897,
	INTERNAL_SERVER_ERROR: 20737,
	SERVICE_IN_MAINTENANCE_MODE: 20738,
	SERVICE_UNAVAILABLE: 20739,
};

export type ThingsErrorCode =
	| 0
	| "INTERNAL_SERVER_ERROR"
	| 1
	| "UNAUTHORIZED"
	| 2
	| "INVALID_REQUEST"
	| 3
	| "INVALID_STATE"
	| 4096
	| "DEVICE_LIMIT_EXCEEDED"
	| 4097
	| "UNSUPPORTED_REGION";
enums.ThingsErrorCode = {
	INTERNAL_SERVER_ERROR: 0,
	UNAUTHORIZED: 1,
	INVALID_REQUEST: 2,
	INVALID_STATE: 3,
	DEVICE_LIMIT_EXCEEDED: 4096,
	UNSUPPORTED_REGION: 4097,
};

export type SuggestTrialErrorCode =
	| 0
	| "UNKNOWN"
	| 1
	| "NONE"
	| 16641
	| "ILLEGAL_ARGUMENT"
	| 16642
	| "NOT_FOUND"
	| 16643
	| "NOT_AVAILABLE"
	| 16897
	| "AUTHENTICATION_FAILED"
	| 20737
	| "INTERNAL_SERVER_ERROR"
	| 20739
	| "SERVICE_UNAVAILABLE";
enums.SuggestTrialErrorCode = {
	UNKNOWN: 0,
	NONE: 1,
	ILLEGAL_ARGUMENT: 16641,
	NOT_FOUND: 16642,
	NOT_AVAILABLE: 16643,
	AUTHENTICATION_FAILED: 16897,
	INTERNAL_SERVER_ERROR: 20737,
	SERVICE_UNAVAILABLE: 20739,
};

export type LFLPremiumErrorCode =
	| 16641
	| "ILLEGAL_ARGUMENT"
	| 16642
	| "MAJOR_VERSION_NOT_SUPPORTED"
	| 16897
	| "AUTHENTICATION_FAILED"
	| 20737
	| "INTERNAL_SERVER_ERROR";
enums.LFLPremiumErrorCode = {
	ILLEGAL_ARGUMENT: 16641,
	MAJOR_VERSION_NOT_SUPPORTED: 16642,
	AUTHENTICATION_FAILED: 16897,
	INTERNAL_SERVER_ERROR: 20737,
};

export type WalletErrorCode =
	| 400
	| "INVALID_PARAMETER"
	| 401
	| "AUTHENTICATION_FAILED"
	| 500
	| "INTERNAL_SERVER_ERROR"
	| 503
	| "SERVICE_IN_MAINTENANCE_MODE";
enums.WalletErrorCode = {
	INVALID_PARAMETER: 400,
	AUTHENTICATION_FAILED: 401,
	INTERNAL_SERVER_ERROR: 500,
	SERVICE_IN_MAINTENANCE_MODE: 503,
};

export type ShopErrorCode =
	| 0
	| "UNKNOWN"
	| 1
	| "NONE"
	| 16641
	| "ILLEGAL_ARGUMENT"
	| 16642
	| "NOT_FOUND"
	| 16643
	| "NOT_AVAILABLE"
	| 16644
	| "NOT_PAID_PRODUCT"
	| 16645
	| "NOT_FREE_PRODUCT"
	| 16646
	| "ALREADY_OWNED"
	| 16647
	| "ERROR_WITH_CUSTOM_MESSAGE"
	| 16648
	| "NOT_AVAILABLE_TO_RECIPIENT"
	| 16649
	| "NOT_AVAILABLE_FOR_CHANNEL_ID"
	| 16650
	| "NOT_SALE_FOR_COUNTRY"
	| 16651
	| "NOT_SALES_PERIOD"
	| 16652
	| "NOT_SALE_FOR_DEVICE"
	| 16653
	| "NOT_SALE_FOR_VERSION"
	| 16654
	| "ALREADY_EXPIRED"
	| 16655
	| "LIMIT_EXCEEDED"
	| 16656
	| "MISSING_CAPABILITY"
	| 16897
	| "AUTHENTICATION_FAILED"
	| 17153
	| "BALANCE_SHORTAGE"
	| 20737
	| "INTERNAL_SERVER_ERROR"
	| 20738
	| "SERVICE_IN_MAINTENANCE_MODE"
	| 20739
	| "SERVICE_UNAVAILABLE";
enums.ShopErrorCode = {
	UNKNOWN: 0,
	NONE: 1,
	ILLEGAL_ARGUMENT: 16641,
	NOT_FOUND: 16642,
	NOT_AVAILABLE: 16643,
	NOT_PAID_PRODUCT: 16644,
	NOT_FREE_PRODUCT: 16645,
	ALREADY_OWNED: 16646,
	ERROR_WITH_CUSTOM_MESSAGE: 16647,
	NOT_AVAILABLE_TO_RECIPIENT: 16648,
	NOT_AVAILABLE_FOR_CHANNEL_ID: 16649,
	NOT_SALE_FOR_COUNTRY: 16650,
	NOT_SALES_PERIOD: 16651,
	NOT_SALE_FOR_DEVICE: 16652,
	NOT_SALE_FOR_VERSION: 16653,
	ALREADY_EXPIRED: 16654,
	LIMIT_EXCEEDED: 16655,
	MISSING_CAPABILITY: 16656,
	AUTHENTICATION_FAILED: 16897,
	BALANCE_SHORTAGE: 17153,
	INTERNAL_SERVER_ERROR: 20737,
	SERVICE_IN_MAINTENANCE_MODE: 20738,
	SERVICE_UNAVAILABLE: 20739,
};

export type E2EEKeyBackupErrorCode =
	| 0
	| "ILLEGAL_ARGUMENT"
	| 1
	| "AUTHENTICATION_FAILED"
	| 2
	| "INTERNAL_ERROR"
	| 3
	| "RESTORE_KEY_FIRST"
	| 4
	| "NO_BACKUP"
	| 5
	| "LOCKOUT"
	| 6
	| "INVALID_PIN";
enums.E2EEKeyBackupErrorCode = {
	ILLEGAL_ARGUMENT: 0,
	AUTHENTICATION_FAILED: 1,
	INTERNAL_ERROR: 2,
	RESTORE_KEY_FIRST: 3,
	NO_BACKUP: 4,
	LOCKOUT: 5,
	INVALID_PIN: 6,
};

export type TalkSyncReason =
	| 0
	| "UNSPECIFIED"
	| 1
	| "UNKNOWN"
	| 2
	| "INITIALIZATION"
	| 3
	| "OPERATION"
	| 4
	| "FULL_SYNC"
	| 5
	| "AUTO_REPAIR"
	| 6
	| "MANUAL_REPAIR"
	| 7
	| "INTERNAL"
	| 8
	| "USER_INITIATED";
enums.TalkSyncReason = {
	UNSPECIFIED: 0,
	UNKNOWN: 1,
	INITIALIZATION: 2,
	OPERATION: 3,
	FULL_SYNC: 4,
	AUTO_REPAIR: 5,
	MANUAL_REPAIR: 6,
	INTERNAL: 7,
	USER_INITIATED: 8,
};

export type AppExtensionType =
	| 1
	| "SIRI"
	| 2
	| "GOOGLE_ASSISTANT"
	| 3
	| "OS_SHARE";
enums.AppExtensionType = { SIRI: 1, GOOGLE_ASSISTANT: 2, OS_SHARE: 3 };

export type PredefinedReactionType =
	| 2
	| "NICE"
	| 3
	| "LOVE"
	| 4
	| "FUN"
	| 5
	| "AMAZING"
	| 6
	| "SAD"
	| 7
	| "OMG";
enums.PredefinedReactionType = {
	NICE: 2,
	LOVE: 3,
	FUN: 4,
	AMAZING: 5,
	SAD: 6,
	OMG: 7,
};

export type GeolocationAccuracyMode =
	| 0
	| "UNKNOWN"
	| 1
	| "IOS_REDUCED_ACCURACY"
	| 2
	| "IOS_FULL_ACCURACY"
	| 3
	| "AOS_PRECISE_LOCATION"
	| 4
	| "AOS_APPROXIMATE_LOCATION";
enums.GeolocationAccuracyMode = {
	UNKNOWN: 0,
	IOS_REDUCED_ACCURACY: 1,
	IOS_FULL_ACCURACY: 2,
	AOS_PRECISE_LOCATION: 3,
	AOS_APPROXIMATE_LOCATION: 4,
};

export type ContactCalendarEventType = 0 | "BIRTHDAY";
enums.ContactCalendarEventType = { BIRTHDAY: 0 };

export type ContactCalendarEventState = 0 | "SHOW" | 1 | "HIDE";
enums.ContactCalendarEventState = { SHOW: 0, HIDE: 1 };

export type UserAllowProfileHistoryType = 0 | "OWNER" | 1 | "FRIEND";
enums.UserAllowProfileHistoryType = { OWNER: 0, FRIEND: 1 };

export type UserStatusMessageHistoryType = 1 | "NONE" | 2 | "ALL";
enums.UserStatusMessageHistoryType = { NONE: 1, ALL: 2 };

export type UserSharePersonalInfoToFriendsType =
	| 0
	| "NEVER_SHOW"
	| 1
	| "ONE_WAY"
	| 2
	| "MUTUAL";
enums.UserSharePersonalInfoToFriendsType = {
	NEVER_SHOW: 0,
	ONE_WAY: 1,
	MUTUAL: 2,
};

export type CharType = 0 | "GROUP" | 1 | "ROOM" | 2 | "PEER";
enums.CharType = { GROUP: 0, ROOM: 1, PEER: 2 };

export type ChatAttribute =
	| 1
	| "NAME"
	| 2
	| "PICTURE_STATUS"
	| 4
	| "PREVENTED_JOIN_BY_TICKET"
	| 8
	| "NOTIFICATION_SETTING"
	| 16
	| "INVITATION_TICKET"
	| 32
	| "FAVORITE_TIMESTAMP"
	| 64
	| "CHAT_TYPE";
enums.ChatAttribute = {
	NAME: 1,
	PICTURE_STATUS: 2,
	PREVENTED_JOIN_BY_TICKET: 4,
	NOTIFICATION_SETTING: 8,
	INVITATION_TICKET: 16,
	FAVORITE_TIMESTAMP: 32,
	CHAT_TYPE: 64,
};

export type BuddyBotActiveStatus =
	| 0
	| "UNSPECIFIED"
	| 1
	| "INACTIVE"
	| 2
	| "ACTIVE"
	| 3
	| "DELETED";
enums.BuddyBotActiveStatus = {
	UNSPECIFIED: 0,
	INACTIVE: 1,
	ACTIVE: 2,
	DELETED: 3,
};

export type GroupCallProtocol = 1 | "STANDARD" | 2 | "CONSTELLA";
enums.GroupCallProtocol = { STANDARD: 1, CONSTELLA: 2 };

export type GlobalEventType =
	| 0
	| "DUMMY"
	| 1
	| "NOTICE"
	| 2
	| "MORETAB"
	| 3
	| "STICKERSHOP"
	| 4
	| "CHANNEL"
	| 5
	| "DENY_KEYWORD"
	| 6
	| "CONNECTIONINFO"
	| 7
	| "BUDDY"
	| 8
	| "TIMELINEINFO"
	| 9
	| "THEMESHOP"
	| 10
	| "CALLRATE"
	| 11
	| "CONFIGURATION"
	| 12
	| "STICONSHOP"
	| 13
	| "SUGGESTDICTIONARY"
	| 14
	| "SUGGESTSETTINGS"
	| 15
	| "USERSETTINGS"
	| 16
	| "ANALYTICSINFO"
	| 17
	| "SEARCHPOPULARKEYWORD"
	| 18
	| "SEARCHNOTICE"
	| 19
	| "TIMELINE"
	| 20
	| "SEARCHPOPULARCATEGORY"
	| 21
	| "EXTENDEDPROFILE"
	| 22
	| "SEASONALMARKETING"
	| 23
	| "NEWSTAB"
	| 24
	| "SUGGESTDICTIONARYV2"
	| 25
	| "CHATAPPSYNC"
	| 26
	| "AGREEMENTS"
	| 27
	| "INSTANTNEWS"
	| 28
	| "EMOJI_MAPPING"
	| 29
	| "SEARCHBARKEYWORDS"
	| 30
	| "SHOPPING"
	| 31
	| "CHAT_EFFECT_BACKGROUND"
	| 32
	| "CHAT_EFFECT_KEYWORD"
	| 33
	| "SEARCHINDEX"
	| 34
	| "HUBTAB"
	| 35
	| "PAY_RULE_UPDATED"
	| 36
	| "SMARTCH"
	| 37
	| "HOME_SERVICE_LIST"
	| 38
	| "TIMELINESTORY"
	| 39
	| "WALLET_TAB"
	| 40
	| "POD_TAB"
	| 41
	| "HOME_SAFETY_CHECK";
enums.GlobalEventType = {
	DUMMY: 0,
	NOTICE: 1,
	MORETAB: 2,
	STICKERSHOP: 3,
	CHANNEL: 4,
	DENY_KEYWORD: 5,
	CONNECTIONINFO: 6,
	BUDDY: 7,
	TIMELINEINFO: 8,
	THEMESHOP: 9,
	CALLRATE: 10,
	CONFIGURATION: 11,
	STICONSHOP: 12,
	SUGGESTDICTIONARY: 13,
	SUGGESTSETTINGS: 14,
	USERSETTINGS: 15,
	ANALYTICSINFO: 16,
	SEARCHPOPULARKEYWORD: 17,
	SEARCHNOTICE: 18,
	TIMELINE: 19,
	SEARCHPOPULARCATEGORY: 20,
	EXTENDEDPROFILE: 21,
	SEASONALMARKETING: 22,
	NEWSTAB: 23,
	SUGGESTDICTIONARYV2: 24,
	CHATAPPSYNC: 25,
	AGREEMENTS: 26,
	INSTANTNEWS: 27,
	EMOJI_MAPPING: 28,
	SEARCHBARKEYWORDS: 29,
	SHOPPING: 30,
	CHAT_EFFECT_BACKGROUND: 31,
	CHAT_EFFECT_KEYWORD: 32,
	SEARCHINDEX: 33,
	HUBTAB: 34,
	PAY_RULE_UPDATED: 35,
	SMARTCH: 36,
	HOME_SERVICE_LIST: 37,
	TIMELINESTORY: 38,
	WALLET_TAB: 39,
	POD_TAB: 40,
	HOME_SAFETY_CHECK: 41,
};

export type SyncCategories =
	| 0
	| "ALL"
	| 1
	| "PROFILE"
	| 2
	| "SETTINGS"
	| 3
	| "CONFIGURATIONS"
	| 4
	| "CONTACT"
	| 5
	| "GROUP"
	| 6
	| "E2EE"
	| 7
	| "MESSAGE";
enums.SyncCategories = {
	ALL: 0,
	PROFILE: 1,
	SETTINGS: 2,
	CONFIGURATIONS: 3,
	CONTACT: 4,
	GROUP: 5,
	E2EE: 6,
	MESSAGE: 7,
};

export type MediaMessageFlow = 1 | "V1" | 2 | "V2";
enums.MediaMessageFlow = { V1: 1, V2: 2 };

export type MessageReactionType =
	| 0
	| "ALL"
	| 1
	| "UNDO"
	| 2
	| "NICE"
	| 3
	| "LOVE"
	| 4
	| "FUN"
	| 5
	| "AMAZING"
	| 6
	| "SAD"
	| 7
	| "OMG";
enums.MessageReactionType = {
	ALL: 0,
	UNDO: 1,
	NICE: 2,
	LOVE: 3,
	FUN: 4,
	AMAZING: 5,
	SAD: 6,
	OMG: 7,
};

export type PictureSource = 1 | "NFT" | 2 | "AVATAR" | 3 | "SNOW" | 4 | "ARCZ";
enums.PictureSource = { NFT: 1, AVATAR: 2, SNOW: 3, ARCZ: 4 };

export type RejectionReason =
	| 0
	| "UNKNOWN"
	| 1
	| "INVALID_TARGET_USER"
	| 2
	| "AGE_VALIDATION"
	| 3
	| "TOO_MANY_FRIENDS"
	| 4
	| "TOO_MANY_REQUESTS"
	| 5
	| "MALFORMED_REQUEST";
enums.RejectionReason = {
	UNKNOWN: 0,
	INVALID_TARGET_USER: 1,
	AGE_VALIDATION: 2,
	TOO_MANY_FRIENDS: 3,
	TOO_MANY_REQUESTS: 4,
	MALFORMED_REQUEST: 5,
};

export type SquareMessageState =
	| 1
	| "SENT"
	| 2
	| "DELETED"
	| 3
	| "FORBIDDEN"
	| 4
	| "UNSENT";
enums.SquareMessageState = { SENT: 1, DELETED: 2, FORBIDDEN: 3, UNSENT: 4 };

export type SquareEmblem = 1 | "SUPER" | 2 | "OFFICIAL";
enums.SquareEmblem = { SUPER: 1, OFFICIAL: 2 };

export type SquareJoinMethodType = 0 | "NONE" | 1 | "APPROVAL" | 2 | "CODE";
enums.SquareJoinMethodType = { NONE: 0, APPROVAL: 1, CODE: 2 };

export type MessageStatusType = number;

export type NotifiedMessageType = 1 | "MENTION" | 2 | "REPLY";
enums.NotifiedMessageType = { MENTION: 1, REPLY: 2 };

export type SquareChatFeatureControlState = 1 | "DISABLED" | 2 | "ENABLED";
enums.SquareChatFeatureControlState = { DISABLED: 1, ENABLED: 2 };

export type NotificationPostType =
	| 2
	| "POST_MENTION"
	| 3
	| "POST_LIKE"
	| 4
	| "POST_COMMENT"
	| 5
	| "POST_COMMENT_MENTION"
	| 6
	| "POST_COMMENT_LIKE"
	| 7
	| "POST_RELAY_JOIN";
enums.NotificationPostType = {
	POST_MENTION: 2,
	POST_LIKE: 3,
	POST_COMMENT: 4,
	POST_COMMENT_MENTION: 5,
	POST_COMMENT_LIKE: 6,
	POST_RELAY_JOIN: 7,
};

export type SquareChatThreadState = 1 | "ACTIVE" | 2 | "INACTIVE";
enums.SquareChatThreadState = { ACTIVE: 1, INACTIVE: 2 };

export type SquareChatThreadeMembershipState =
	| 1
	| "ACTIVATED"
	| 2
	| "DEACTIVATED";
enums.SquareChatThreadeMembershipState = { ACTIVATED: 1, DEACTIVATED: 2 };

export type LiveTalkEventType =
	| 1
	| "NOTIFIED_UPDATE_LIVE_TALK_TITLE"
	| 2
	| "NOTIFIED_UPDATE_LIVE_TALK_SPEAKER_SETTING"
	| 3
	| "NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT"
	| 4
	| "NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE"
	| 5
	| "NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK";
enums.LiveTalkEventType = {
	NOTIFIED_UPDATE_LIVE_TALK_TITLE: 1,
	NOTIFIED_UPDATE_LIVE_TALK_SPEAKER_SETTING: 2,
	NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT: 3,
	NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE: 4,
	NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK: 5,
};

export type LiveTalkSpeakerSetting =
	| 1
	| "LIMITED_SPEAKERS"
	| 2
	| "ALL_AS_SPEAKERS";
enums.LiveTalkSpeakerSetting = { LIMITED_SPEAKERS: 1, ALL_AS_SPEAKERS: 2 };

export type LiveTalkType = 1 | "PUBLIC" | 2 | "PRIVATE";
enums.LiveTalkType = { PUBLIC: 1, PRIVATE: 2 };

export type UserType = 1 | "USER" | 2 | "BOT";
enums.UserType = { USER: 1, BOT: 2 };

export type ProductType = 1 | "STICKER" | 2 | "THEME" | 3 | "STICON";
enums.ProductType = { STICKER: 1, THEME: 2, STICON: 3 };

export type ThemeResourceType = 1 | "STATIC" | 2 | "ANIMATION";
enums.ThemeResourceType = { STATIC: 1, ANIMATION: 2 };

export type SticonResourceType = 1 | "STATIC" | 2 | "ANIMATION";
enums.SticonResourceType = { STATIC: 1, ANIMATION: 2 };

export type ImageTextStatus =
	| 0
	| "OK"
	| 1
	| "PRODUCT_UNSUPPORTED"
	| 2
	| "TEXT_NOT_SPECIFIED"
	| 3
	| "TEXT_STYLE_UNAVAILABLE"
	| 4
	| "CHARACTER_COUNT_LIMIT_EXCEEDED"
	| 5
	| "CONTAINS_INVALID_WORD";
enums.ImageTextStatus = {
	OK: 0,
	PRODUCT_UNSUPPORTED: 1,
	TEXT_NOT_SPECIFIED: 2,
	TEXT_STYLE_UNAVAILABLE: 3,
	CHARACTER_COUNT_LIMIT_EXCEEDED: 4,
	CONTAINS_INVALID_WORD: 5,
};

export type SubType = 0 | "GENERAL" | 1 | "CREATORS" | 2 | "STICON";
enums.SubType = { GENERAL: 0, CREATORS: 1, STICON: 2 };

export type StickerSize = 0 | "NORMAL" | 1 | "BIG";
enums.StickerSize = { NORMAL: 0, BIG: 1 };

export type PopupLayer = 0 | "FOREGROUND" | 1 | "BACKGROUND";
enums.PopupLayer = { FOREGROUND: 0, BACKGROUND: 1 };

export type ProductSalesState =
	| 0
	| "ON_SALE"
	| 1
	| "OUTDATED_VERSION"
	| 2
	| "NOT_ON_SALE";
enums.ProductSalesState = { ON_SALE: 0, OUTDATED_VERSION: 1, NOT_ON_SALE: 2 };

export type PromotionType =
	| 0
	| "NONE"
	| 1
	| "CARRIER"
	| 2
	| "BUDDY"
	| 3
	| "INSTALL"
	| 4
	| "MISSION"
	| 5
	| "MUSTBUY";
enums.PromotionType = {
	NONE: 0,
	CARRIER: 1,
	BUDDY: 2,
	INSTALL: 3,
	MISSION: 4,
	MUSTBUY: 5,
};

export type PromotionMissionType = 1 | "DEFAULT" | 2 | "VIEW_VIDEO";
enums.PromotionMissionType = { DEFAULT: 1, VIEW_VIDEO: 2 };

export type BrandType = 1 | "PREMIUM" | 2 | "VERIFIED" | 3 | "UNVERIFIED";
enums.BrandType = { PREMIUM: 1, VERIFIED: 2, UNVERIFIED: 3 };

export type EditorsPickShowcaseType =
	| 0
	| "STATIC"
	| 1
	| "POPULAR"
	| 2
	| "NEW_RELEASE";
enums.EditorsPickShowcaseType = { STATIC: 0, POPULAR: 1, NEW_RELEASE: 2 };

export type ProductAvailability =
	| 0
	| "PURCHASE_ONLY"
	| 1
	| "PURCHASE_OR_SUBSCRIPTION"
	| 2
	| "SUBSCRIPTION_ONLY";
enums.ProductAvailability = {
	PURCHASE_ONLY: 0,
	PURCHASE_OR_SUBSCRIPTION: 1,
	SUBSCRIPTION_ONLY: 2,
};

export type DemographicGenderType = 0 | "ALL" | 1 | "MALE" | 2 | "FEMALE";
enums.DemographicGenderType = { ALL: 0, MALE: 1, FEMALE: 2 };

export type DemographicAgeType =
	| 0
	| "ALL"
	| 1
	| "AGE_0_19"
	| 2
	| "AGE_20_29"
	| 3
	| "AGE_30_39"
	| 4
	| "AGE_40_INF"
	| 5
	| "AGE_40_49"
	| 6
	| "AGE_50_INF";
enums.DemographicAgeType = {
	ALL: 0,
	AGE_0_19: 1,
	AGE_20_29: 2,
	AGE_30_39: 3,
	AGE_40_INF: 4,
	AGE_40_49: 5,
	AGE_50_INF: 6,
};

export type ShowcaseType =
	| 0
	| "POPULAR"
	| 1
	| "NEW_RELEASE"
	| 2
	| "EVENT"
	| 3
	| "RECOMMENDED"
	| 4
	| "POPULAR_WEEKLY"
	| 5
	| "POPULAR_MONTHLY"
	| 6
	| "POPULAR_RECENTLY_PUBLISHED"
	| 7
	| "BUDDY"
	| 8
	| "EXTRA_EVENT"
	| 9
	| "BROWSING_HISTORY"
	| 10
	| "POPULAR_TOTAL_SALES"
	| 11
	| "NEW_SUBSCRIPTION"
	| 12
	| "POPULAR_SUBSCRIPTION_30D"
	| 13
	| "CPD_STICKER"
	| 14
	| "POPULAR_WITH_FREE";
enums.ShowcaseType = {
	POPULAR: 0,
	NEW_RELEASE: 1,
	EVENT: 2,
	RECOMMENDED: 3,
	POPULAR_WEEKLY: 4,
	POPULAR_MONTHLY: 5,
	POPULAR_RECENTLY_PUBLISHED: 6,
	BUDDY: 7,
	EXTRA_EVENT: 8,
	BROWSING_HISTORY: 9,
	POPULAR_TOTAL_SALES: 10,
	NEW_SUBSCRIPTION: 11,
	POPULAR_SUBSCRIPTION_30D: 12,
	CPD_STICKER: 13,
	POPULAR_WITH_FREE: 14,
};

export type EditorsPickContentType =
	| 1
	| "STICKER"
	| 2
	| "URL"
	| 3
	| "THEME"
	| 4
	| "EMOJI";
enums.EditorsPickContentType = { STICKER: 1, URL: 2, THEME: 3, EMOJI: 4 };

export type TagType = 0 | "UNKNOWN" | 1 | "CHARACTER" | 2 | "TASTE";
enums.TagType = { UNKNOWN: 0, CHARACTER: 1, TASTE: 2 };

export type CategoryType = 1 | "GENERAL_CATEGORY" | 2 | "CREATORS_TAG";
enums.CategoryType = { GENERAL_CATEGORY: 1, CREATORS_TAG: 2 };

export type SubscriptionPlanAvailability =
	| 0
	| "AVAILABLE"
	| 1
	| "DIFFERENT_STORE"
	| 2
	| "NOT_STUDENT"
	| 3
	| "ALREADY_PURCHASED";
enums.SubscriptionPlanAvailability = {
	AVAILABLE: 0,
	DIFFERENT_STORE: 1,
	NOT_STUDENT: 2,
	ALREADY_PURCHASED: 3,
};

export type SubscriptionServiceType = 1 | "STICKERS_PREMIUM";
enums.SubscriptionServiceType = { STICKERS_PREMIUM: 1 };

export type SubscriptionPlanTarget = 1 | "GENERAL" | 2 | "STUDENT";
enums.SubscriptionPlanTarget = { GENERAL: 1, STUDENT: 2 };

export type SubscriptionPlanType = 1 | "MONTHLY" | 2 | "YEARLY";
enums.SubscriptionPlanType = { MONTHLY: 1, YEARLY: 2 };

export type SubscriptionPlanTier = 1 | "BASIC" | 2 | "DELUXE";
enums.SubscriptionPlanTier = { BASIC: 1, DELUXE: 2 };

export type SubscriptionSlotModificationResult =
	| 0
	| "OK"
	| 1
	| "UNKNOWN"
	| 2
	| "NO_SUBSCRIPTION"
	| 3
	| "EXISTS"
	| 4
	| "NOT_FOUND"
	| 5
	| "EXCEEDS_LIMIT"
	| 6
	| "NOT_AVAILABLE";
enums.SubscriptionSlotModificationResult = {
	OK: 0,
	UNKNOWN: 1,
	NO_SUBSCRIPTION: 2,
	EXISTS: 3,
	NOT_FOUND: 4,
	EXCEEDS_LIMIT: 5,
	NOT_AVAILABLE: 6,
};

export type SubscriptionBillingResult =
	| 0
	| "OK"
	| 1
	| "UNKNOWN"
	| 2
	| "NOT_SUPPORTED"
	| 3
	| "NO_SUBSCRIPTION"
	| 4
	| "SUBSCRIPTION_EXISTS"
	| 5
	| "NOT_AVAILABLE"
	| 6
	| "CONFLICT"
	| 7
	| "OUTDATED_VERSION"
	| 8
	| "NO_STUDENT_INFORMATION"
	| 9
	| "ACCOUNT_HOLD"
	| 10
	| "RETRY_STATE";
enums.SubscriptionBillingResult = {
	OK: 0,
	UNKNOWN: 1,
	NOT_SUPPORTED: 2,
	NO_SUBSCRIPTION: 3,
	SUBSCRIPTION_EXISTS: 4,
	NOT_AVAILABLE: 5,
	CONFLICT: 6,
	OUTDATED_VERSION: 7,
	NO_STUDENT_INFORMATION: 8,
	ACCOUNT_HOLD: 9,
	RETRY_STATE: 10,
};

export type SubscriptionCampaignType = 1 | "MISSION" | 2 | "FREE_TRIAL";
enums.SubscriptionCampaignType = { MISSION: 1, FREE_TRIAL: 2 };

export type SubscriptionSortType = 1 | "DATE_ASC" | 2 | "DATE_DESC";
enums.SubscriptionSortType = { DATE_ASC: 1, DATE_DESC: 2 };

export type StartBundleSubscriptionResult =
	| 0
	| "OK"
	| 1
	| "UNKNOWN"
	| 2
	| "INVALID_PARAMETER"
	| 3
	| "NOT_ELIGIBLE"
	| 4
	| "CONFLICT"
	| 5
	| "ACCOUNT_HOLD"
	| 6
	| "RETRY_STATE";
enums.StartBundleSubscriptionResult = {
	OK: 0,
	UNKNOWN: 1,
	INVALID_PARAMETER: 2,
	NOT_ELIGIBLE: 3,
	CONFLICT: 4,
	ACCOUNT_HOLD: 5,
	RETRY_STATE: 6,
};

export type StopBundleSubscriptionResult =
	| 0
	| "OK"
	| 1
	| "INVALID_PARAMETER"
	| 2
	| "NOT_FOUND"
	| 3
	| "NOT_SUPPORTED"
	| 4
	| "CONFLICT"
	| 5
	| "NOT_ELIGIBLE";
enums.StopBundleSubscriptionResult = {
	OK: 0,
	INVALID_PARAMETER: 1,
	NOT_FOUND: 2,
	NOT_SUPPORTED: 3,
	CONFLICT: 4,
	NOT_ELIGIBLE: 5,
};

export type GetSubscriptionCouponCodeResult =
	| 0
	| "OK"
	| 1
	| "UNKNOWN"
	| 2
	| "NOT_SUPPORTED"
	| 3
	| "NOT_AVAILABLE"
	| 4
	| "NOT_APPLICABLE";
enums.GetSubscriptionCouponCodeResult = {
	OK: 0,
	UNKNOWN: 1,
	NOT_SUPPORTED: 2,
	NOT_AVAILABLE: 3,
	NOT_APPLICABLE: 4,
};

export type GetFriendStatusWithPremiumOaResult =
	| 0
	| "FRIEND"
	| 1
	| "BLOCKED"
	| 2
	| "NOT_FRIEND"
	| 3
	| "ERROR";
enums.GetFriendStatusWithPremiumOaResult = {
	FRIEND: 0,
	BLOCKED: 1,
	NOT_FRIEND: 2,
	ERROR: 3,
};

export type SubscriptionCouponCampaignStatus =
	| 0
	| "OK"
	| 1
	| "UNKNOWN"
	| 2
	| "NOT_SUPPORTED"
	| 3
	| "NOT_ACTIVE"
	| 4
	| "NOT_APPLICABLE";
enums.SubscriptionCouponCampaignStatus = {
	OK: 0,
	UNKNOWN: 1,
	NOT_SUPPORTED: 2,
	NOT_ACTIVE: 3,
	NOT_APPLICABLE: 4,
};

export type AcceptSubscriptionAgreementResult =
	| 0
	| "OK"
	| 1
	| "UNKNOWN"
	| 2
	| "NOT_SUPPORTED"
	| 3
	| "NO_SUBSCRIPTION";
enums.AcceptSubscriptionAgreementResult = {
	OK: 0,
	UNKNOWN: 1,
	NOT_SUPPORTED: 2,
	NO_SUBSCRIPTION: 3,
};

export type StoreCode =
	| 0
	| "GOOGLE"
	| 1
	| "APPLE"
	| 2
	| "WEBSTORE"
	| 3
	| "LINEMO"
	| 4
	| "LINE_MUSIC"
	| 5
	| "LYP"
	| 6
	| "TW_CHT"
	| 7
	| "FREEMIUM";
enums.StoreCode = {
	GOOGLE: 0,
	APPLE: 1,
	WEBSTORE: 2,
	LINEMO: 3,
	LINE_MUSIC: 4,
	LYP: 5,
	TW_CHT: 6,
	FREEMIUM: 7,
};

export type BirthdayGiftAssociationVerifyTokenStatus =
	| 0
	| "VALID"
	| 1
	| "INVALID";
enums.BirthdayGiftAssociationVerifyTokenStatus = { VALID: 0, INVALID: 1 };

export type PopupDesignTemplate = 0 | "FIXED";
enums.PopupDesignTemplate = { FIXED: 0 };

export type PopupDisplayCount = 0 | "ONCE";
enums.PopupDisplayCount = { ONCE: 0 };

export type PopupVisualType = 0 | "BASIC" | 1 | "FULLSCREEN";
enums.PopupVisualType = { BASIC: 0, FULLSCREEN: 1 };

export interface TalkException {
	code: ErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface ChannelException {
	code: ChannelErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface SquareException {
	errorCode: SquareErrorCode;
	errorExtraInfo: ErrorExtraInfo;
	reason: string;
}

export interface LiffException {
	code: LiffErrorCode;
	message: string;
	payload: LiffErrorPayload;
}

export interface HomeException {
	exceptionCode: HomeExceptionCode;
	message: string;
	retryTimeMillis: Int64;
}

export interface ChatappException {
	code: ChatappErrorCode;
	reason: string;
}

export interface MembershipException {
	code: MembershipErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface BotException {
	errorCode: BotErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface BotExternalException {
	errorCode: BotExternalErrorCode;
	reason: string;
}

export interface LiffChannelException {
	code: ChannelErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface AccessTokenRefreshException {
	errorCode: AccessTokenRefreshErrorCode;
	reasonCode: Int64;
}

export interface AccountEapConnectException {
	code: AccountEapConnectErrorCode;
	alertMessage: string;
	webAuthDetails: WebAuthDetails;
}

export interface PwlessCredentialException {
	code: PwlessCredentialErrorCode;
	alertMessage: string;
}

export interface SecondAuthFactorPinCodeException {
	code: SecondAuthFactorPinCodeErrorCode;
	alertMessage: string;
}

export interface AuthException {
	code: AuthErrorCode;
	alertMessage: string;
	webAuthDetails: WebAuthDetails;
}

export interface SecondaryPwlessLoginException {
	code: SecondaryPwlessLoginErrorCode;
	alertMessage: string;
}

export interface SecondaryQrCodeException {
	code: SecondaryQrCodeErrorCode;
	alertMessage: string;
}

export interface PaymentException {
	errorCode: PaymentErrorCode;
	debugReason: string;
	serverDefinedMessage: string;
	errorDetailMap: { [k: string]: string };
}

export interface SettingsException {
	code: SettingsErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface TicketException {
	code: number;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface ThingsException {
	code: ThingsErrorCode;
	reason: string;
}

export interface SuggestTrialException {
	code: SuggestTrialErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface LFLPremiumException {
	code: LFLPremiumErrorCode;
}

export interface WalletException {
	code: WalletErrorCode;
	reason: string;
	attributes: { [k: string]: string };
}

export interface ShopException {
	code: ShopErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface PointException {
	code: PointErrorCode;
	reason: string;
	extra: { [k: string]: string };
}

export interface E2EEKeyBackupException {
	code: E2EEKeyBackupErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface RejectedException {
	rejectionReason: RejectionReason;
	hint: string;
}

export interface ServerFailureException {
	hint: string;
}

export interface UpdateChatRequest {
	reqSeq: number;
	chat: Chat;
	updatedAttribute: number;
}

export interface UpdateChatResponse {}

export interface AcceptChatInvitationByTicketRequest {
	reqSeq: number;
	chatMid: string;
	ticketId: string;
}

export interface AcceptChatInvitationByTicketResponse {}

export interface AcceptChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
}

export interface ReissueChatTicketRequest {
	reqSeq: number;
	groupMid: string;
}

export interface AcceptChatInvitationResponse {}

export interface ReissueChatTicketResponse {
	ticketId: string;
}

export interface RejectChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
}

export interface GetAllChatMidsRequest {
	withMemberChats?: boolean;
	withInvitedChats?: boolean;
}

export interface RejectChatInvitationResponse {}

export interface GetAllChatMidsResponse {
	memberChatMids: string[];
	invitedChatMids: string[];
}

export interface CreateChatRequest {
	reqSeq: number;
	type: number;
	name?: string;
	targetUserMids: string[];
	picturePath?: string;
}

export interface CreateChatResponse {
	chat: Chat;
}

export interface BeaconCondition {
	inFriends: string;
	notInFriends: string;
	termsAgreed: boolean;
}

export interface BeaconBackgroundNotification {
	actionInterval: Int64;
	actionAndConditions: BeaconCondition[];
	actionDelay: Int64;
	actionConditions: BeaconCondition[];
}

export interface LiffErrorPayload {
	consentRequired: LiffErrorConsentRequired;
}

export interface LiffErrorConsentRequired {
	channelId: string;
	consentUrl: string;
}

export interface ErrorExtraInfo {
	preconditionFailedExtraInfo: PreconditionFailedExtraInfo;
	userRestrictionInfo: UserRestrictionExtraInfo;
}

export interface UserRestrictionExtraInfo {
	linkUrl: string;
}

export interface WebAuthDetails {
	baseUrl: string;
	token: string;
}

export interface Profile {
	mid: string;
	userid: string;
	phone: string;
	email: string;
	regionCode: string;
	displayName: string;
	phoneticName: string;
	pictureStatus: string;
	thumbnailUrl: string;
	statusMessage: string;
	allowSearchByUserid: boolean;
	allowSearchByEmail: boolean;
	picturePath: string;
	musicProfile: string;
	videoProfile: string;
	statusMessageContentMetadata: { [k: string]: string };
	avatarProfile: AvatarProfile;
	nftProfile: boolean;
	pictureSource: PictureSource;
}

export interface AvatarProfile {
	version: string;
	updatedMillis: Int64;
	thumbnail: string;
	usablePublicly: boolean;
}

export interface Operation {
	revision: Int64;
	createdTime: Int64;
	type: OpType;
	reqSeq: number;
	checksum: string;
	status: OpStatus;
	param1: string;
	param2: string;
	param3: string;
	message: Message;
}

export interface Message {
	_from: string;
	to: string;
	toType: MIDType;
	id: string;
	createdTime: Int64;
	deliveredTime: Int64;
	text: string;
	location: Location;
	hasContent: boolean;
	contentType: ContentType;
	contentPreview: Buffer | string;
	contentMetadata: { [k: string]: string };
	sessionId: any;
	chunks: Buffer[] | string[];
	relatedMessageId: string;
	messageRelationType: MessageRelationType;
	readCount: Int64;
	relatedMessageServiceCode: ServiceCode;
	appExtensionType: AppExtensionType;
	reactions: Reaction[];
}

export interface Reaction {
	fromUserMid: string;
	atMillis: Int64;
	reactionType: ReactionType;
}

export interface ReactionType {
	predefinedReactionType: PredefinedReactionType;
}

export interface ReactRequest {
	reqSeq: number;
	messageId: Int64;
	reactionType: ReactionType;
}

export interface Location {
	title: string;
	address: string;
	latitude: number;
	longitude: number;
	phone: string;
	categoryId: string;
	provider: PlaceSearchProvider;
	accuracy: GeolocationAccuracy;
	altitudeMeters: number;
}

export interface GeolocationAccuracy {
	radiusMeters: number;
	radiusConfidence: number;
	altitudeAccuracy: number;
	velocityAccuracy: number;
	bearingAccuracy: number;
	accuracyMode: GeolocationAccuracyMode;
}

export interface Contact {
	mid: string;
	createdTime: Int64;
	type: ContactType;
	status: ContactStatus;
	relation: ContactRelation;
	displayName: string;
	phoneticName: string;
	pictureStatus: string;
	thumbnailUrl: string;
	statusMessage: string;
	displayNameOverridden: string;
	favoriteTime: Int64;
	capableVoiceCall: boolean;
	capableVideoCall: boolean;
	capableMyhome: boolean;
	capableBuddy: boolean;
	attributes: number;
	settings: Int64;
	picturePath: string;
	recommendParams: string;
	friendRequestStatus: FriendRequestStatus;
	musicProfile: string;
	videoProfile: string;
	statusMessageContentMetadata: { [k: string]: string };
	avatarProfile: AvatarProfile;
	friendRingtone: string;
	friendRingbackTone: string;
	nftProfile: boolean;
	pictureSource: PictureSource;
}

export interface GetContactsV2Request {
	targetUserMids: string[];
	neededContactCalendarEvents: ContactCalendarEventType[];
	withUserStatus: boolean;
}

export interface GetContactsV2Response {
	contacts: { [k: string]: ContactEntry };
}

export interface ContactEntry {
	userStatus: UserStatus;
	snapshotTimeMillis: Int64;
	contact: Contact;
	calendarEvents: ContactCalendarEvents;
}

export interface ContactCalendarEvents {
	events: { [k: number /*ContactCalendarEventType*/]: ContactCalendarEvent };
}

export interface ContactCalendarEvent {
	id: string;
	state: ContactCalendarEventState;
	year: number;
	month: number;
	day: number;
}

export interface Configurations {
	revision: Int64;
	configMap: { [k: string]: string };
}

export interface E2EEPublicKey {
	version: number;
	keyId: number;
	keyData: Buffer | string;
	createdTime: Int64;
}

export interface RSAKey {
	keynm: string;
	nvalue: string;
	evalue: string;
	sessionKey: string;
}

export interface Settings {
	notificationEnable: boolean;
	notificationMuteExpiration: Int64;
	notificationNewMessage: boolean;
	notificationGroupInvitation: boolean;
	notificationShowMessage: boolean;
	notificationIncomingCall: boolean;
	notificationSoundMessage: string;
	notificationSoundGroup: string;
	notificationDisabledWithSub: boolean;
	notificationPayment: boolean;
	privacySyncContacts: boolean;
	privacySearchByPhoneNumber: boolean;
	privacySearchByUserid: boolean;
	privacySearchByEmail: boolean;
	privacyAllowSecondaryDeviceLogin: boolean;
	privacyProfileImagePostToMyhome: boolean;
	privacyReceiveMessagesFromNotFriend: boolean;
	privacyAgreeUseLineCoinToPaidCall: boolean;
	privacyAgreeUsePaidCall: boolean;
	privacyAllowFriendRequest: boolean;
	contactMyTicket: string;
	identityProvider: IdentityProvider;
	identityIdentifier: string;
	snsAccounts: { [k: number /*SnsIdType*/]: string };
	phoneRegistration: boolean;
	emailConfirmationStatus: EmailConfirmationStatus;
	accountMigrationPincodeType: AccountMigrationPincodeType;
	enforcedInputAccountMigrationPincode: boolean;
	securityCenterSettingsType: SecurityCenterSettingsType;
	allowUnregistrationSecondaryDevice: boolean;
	pwlessPrimaryCredentialRegistration: boolean;
	preferenceLocale: string;
	customModes: { [k: number /*CustomMode*/]: string };
	e2eeEnable: boolean;
	hitokotoBackupRequested: boolean;
	privacyProfileMusicPostToMyhome: boolean;
	privacyAllowNearby: boolean;
	agreementNearbyTime: Int64;
	agreementSquareTime: Int64;
	notificationMention: boolean;
	botUseAgreementAcceptedAt: Int64;
	agreementShakeFunction: Int64;
	agreementMobileContactName: Int64;
	agreementSoundToText: Int64;
	privacyPolicyVersion: string;
	agreementAdByWebAccess: Int64;
	agreementPhoneNumberMatching: Int64;
	agreementCommunicationInfo: Int64;
	privacySharePersonalInfoToFriends: UserSharePersonalInfoToFriendsType;
	agreementThingsWirelessCommunication: Int64;
	agreementGdpr: Int64;
	privacyStatusMessageHistory: UserStatusMessageHistoryType;
	agreementProvideLocation: Int64;
	agreementBeacon: Int64;
	privacyAllowProfileHistory: UserAllowProfileHistoryType;
	agreementContentsSuggest: Int64;
	agreementContentsSuggestDataCollection: Int64;
	privacyAgeResult: UserAgeType;
	privacyAgeResultReceived: boolean;
	notificationThumbnail: boolean;
	agreementOcrImageCollection: Int64;
	privacyAllowFollow: boolean;
	privacyShowFollowList: boolean;
	notificationBadgeTalkOnly: boolean;
	agreementIcna: Int64;
	notificationReaction: boolean;
	agreementMid: Int64;
	homeNotificationNewFriend: boolean;
	homeNotificationFavoriteFriendUpdate: boolean;
	homeNotificationGroupMemberUpdate: boolean;
	homeNotificationBirthday: boolean;
	eapAllowedToConnect: { [k: number /*SnsIdType*/]: boolean };
	agreementLineOutUse: Int64;
	agreementLineOutProvideInfo: Int64;
	notificationShowProfileImage: boolean;
	agreementPdpa: Int64;
	agreementLocationVersion: string;
	zhdPageAllowedToShow: boolean;
}

export interface E2EENegotiationResult {
	allowedTypes: ContentType[];
	publicKey: E2EEPublicKey;
	specVersion: number;
}

export interface ContactRegistration {
	contact: Contact;
	luid: string;
	contactType: ContactType;
	contactKey: string;
}

export interface E2EEGroupSharedKey {
	keyVersion: number;
	groupKeyId: number;
	creator: string;
	creatorKeyId: number;
	receiver: string;
	receiverKeyId: number;
	encryptedSharedKey: Buffer | string;
	allowedTypes: ContentType[];
	specVersion: number;
}

export interface VerificationSessionData {
	sessionId: string;
	method: VerificationMethod;
	callback: string;
	normalizedPhone: string;
	countryCode: string;
	nationalSignificantNumber: string;
	availableVerificationMethods: VerificationMethod[];
	callerIdMask: string;
}

export interface FollowRequest {
	followMid: FollowMid;
}

export interface FollowMid {
	mid: string;
	eMid: string;
}

export interface UnfollowRequest {
	followMid: FollowMid;
}

export interface Ticket {
	id: string;
	expirationTime: Int64;
	maxUseCount: number;
}

export interface GetChatsRequest {
	chatMids: string[];
	withMembers: boolean;
	withInvitees: boolean;
}

export interface GetChatsResponse {
	chats: Chat[];
}

export interface Chat {
	type: CharType;
	chatMid: string;
	createdTime: Int64;
	notificationDisabled: boolean;
	favoriteTimestamp: Int64;
	chatName: string;
	picturePath: string;
	extra: Extra;
}

export interface Extra {
	groupExtra: GroupExtra;
	peerExtra: PeerExtra;
}

export interface GroupExtra {
	creator: string;
	preventedJoinByTicket: boolean;
	invitationTicket: string;
	memberMids: { [k: string]: Int64 };
	inviteeMids: { [k: string]: Int64 };
	addFriendDisabled: boolean;
	ticketDisabled: boolean;
}

export interface PeerExtra {}

export interface GetFollowersRequest {
	followMid: FollowMid;
	cursor: string;
}

export interface GetFollowersResponse {
	profiles: FollowProfile[];
	cursor: string;
	followingCount: Int64;
	followerCount: Int64;
}

export interface FollowProfile {
	followMid: FollowMid;
	displayName: string;
	picturePath: string;
	following: boolean;
	allowFollow: boolean;
	followBuddyDetail: FollowBuddyDetail;
}

export interface FollowBuddyDetail {
	iconType: number;
}

export interface GetFollowingsRequest {
	followMid: FollowMid;
	cursor: string;
}

export interface GetFollowingsResponse {
	profiles: FollowProfile[];
	cursor: string;
	followingCount: Int64;
	followerCount: Int64;
}

export interface Room {
	mid: string;
	createdTime: Int64;
	contacts: Contact[];
	notificationDisabled: boolean;
	memberMids: string[];
}

export interface ContactModification {
	type: ModificationType;
	luid: string;
	phones: string[];
	emails: string[];
	userids: string[];
}

export interface GetE2EEKeyBackupCertificatesRequest {}

export interface GetE2EEKeyBackupCertificatesResponse {
	urlHashList: string[];
}

export interface DeleteOtherFromChatRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];
}

export interface DeleteOtherFromChatResponse {}

export interface InviteIntoChatRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];
}

export interface InviteIntoChatResponse {}

export interface CancelChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];
}

export interface CancelChatInvitationResponse {}

export interface DeleteSelfFromChatRequest {
	reqSeq: number;
	chatMid: string;
	lastSeenMessageDeliveredTime: Int64;
	lastSeenMessageId: string;
	lastMessageDeliveredTime: Int64;
	lastMessageId: string;
}

export interface DeleteSelfFromChatResponse {}

export interface FindChatByTicketRequest {
	ticketId: string;
}

export interface FindChatByTicketResponse {
	chat: Chat;
}

export interface RefreshAccessTokenRequest {
	refreshToken: string;
}

export interface RefreshAccessTokenResponse {
	accessToken: string;
	durationUntilRefreshInSec: Int64;
	retryPolicy: RetryPolicy;
	tokenIssueTimeEpochSec: Int64;
	refreshToken: string;
}

export interface RetryPolicy {
	initialDelayInMillis: Int64;
	maxDelayInMillis: Int64;
	multiplier: number;
	jitterRate: number;
}

export interface TMessageReadRange {
	chatId: string;
	ranges: { [k: string]: TMessageReadRangeEntry[] };
}

export interface TMessageReadRangeEntry {
	startMessageId: Int64;
	endMessageId: Int64;
	startTime: Int64;
	endTime: Int64;
}

export interface BuddyDetail {
	mid: string;
	memberCount: Int64;
	onAir: boolean;
	businessAccount: boolean;
	addable: boolean;
	acceptableContentTypes: ContentType[];
	capableMyhome: boolean;
	freePhoneCallable: boolean;
	phoneNumberToDial: string;
	needPermissionApproval: boolean;
	channelId: string;
	channelProviderName: string;
	iconType: number;
	botType: BotType;
	showRichMenu: boolean;
	richMenuRevision: Int64;
	onAirLabel: BuddyOnAirLabel;
	useTheme: boolean;
	themeId: string;
	useBar: boolean;
	barRevision: Int64;
	useBackground: boolean;
	backgroundId: string;
	statusBarEnabled: boolean;
	statusBarRevision: Int64;
	searchId: string;
	onAirVersion: number;
	blockable: boolean;
	botActiveStatus: BuddyBotActiveStatus;
	membershipEnabled: boolean;
}

export interface MessageBoxV2MessageId {
	deliveredTime: Int64;
	messageId: Int64;
}

export interface GetPreviousMessagesV2Request {
	messageBoxId: string;
	endMessageId: MessageBoxV2MessageId;
	messagesCount: number;
	withReadCount: boolean;
	receivedOnly: boolean;
}

export interface ChannelToken {
	token: string;
	obsToken: string;
	expiration: Int64;
	refreshToken: string;
	channelAccessToken: string;
}

export interface GroupCall {
	online: boolean;
	chatMid: string;
	hostMids: string;
	memberMids: string[];
	started: Int64;
	mediaType: GroupCallMediaType;
	protocol: GroupCallProtocol;
}

export interface SyncResponse {
	operationResponse: OperationResponse;
	fullSyncResponse: FullSyncResponse;
	partialFullSyncResponse: PartialFullSyncResponse;
}

export interface OperationResponse {
	operations: Operation[];
	hasMoreOps: boolean;
	globalEvents: TGlobalEvents;
	individualEvents: TIndividualEvents;
}

export interface FullSyncResponse {
	reasons: SyncTriggerReason[];
	nextRevision: Int64;
}

export interface PartialFullSyncResponse {
	targetCategories: { [k: number /*SyncCategories*/]: Int64 };
}

export interface TGlobalEvents {
	events: { [k: number /*GlobalEventType*/]: GlobalEvent };
	lastRevision: Int64;
}

export interface TIndividualEvents {
	events: NotificationStatus[];
	lastRevision: Int64;
}

export interface GlobalEvent {
	type: GlobalEventType;
	minDelayInMinutes: number;
	maxDelayInMinutes: number;
	createTimeMillis: Int64;
	maxDelayHardLimit: boolean;
}

export interface DetermineMediaMessageFlowResponse {
	flowMap: { [k: number /*ContentType*/]: MediaMessageFlow };
	cacheTtlMillis: Int64;
}

export interface ChatRoomAnnouncementContentMetadata {
	replace: string;
	sticonOwnership: string;
	postNotificationMetadata: string;
}

export interface ChatRoomAnnouncementContents {
	displayFields: number;
	text: string;
	link: string;
	thumbnail: string;
	contentMetadata: ChatRoomAnnouncementContentMetadata;
}

export interface ChatRoomAnnouncement {
	announcementSeq: Int64;
	type: number;
	contents: ChatRoomAnnouncementContents;
	creatorMid: string;
	createdTime: Int64;
	deletePermission: number;
}

export interface DisasterInfo {
	disasterId: string;
	title: string;
	region: string;
	disasterDescription: string;
	seeMoreUrl: string;
	status: number;
}

export interface GetDisasterCasesRequest {}

export interface GetDisasterCasesResponse {
	disasters: DisasterInfo[];
	messageTemplate: string[];
	ttlInMillis: Int64;
}

export interface SquareMessage {
	message: Message;
	fromType: MIDType;
	squareMessageRevision: Int64;
	state: SquareMessageState;
}

export interface SquarePreference {
	favoriteTimestamp: Int64;
	notiForNewJoinRequest: boolean;
}

export interface SquareMember {
	squareMemberMid: string;
	squareMid: string;
	displayName: string;
	profileImageObsHash: string;
	ableToReceiveMessage: boolean;
	membershipState: SquareMembershipState;
	role: SquareMemberRole;
	revision: Int64;
	preference: SquarePreference;
	joinMessage: string;
}

export interface SquareMessageReaction {
	type: MessageReactionType;
	reactor: SquareMember;
	createdAt: Int64;
	updatedAt: Int64;
}

export interface SquareMessageReactionStatus {
	totalCount: number;
	countByReactionType: { [k: number /*MessageReactionType*/]: number };
	myReaction: SquareMessageReaction;
}

export interface SquareEventReceiveMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	senderDisplayName: string;
	messageReactionStatus: SquareMessageReactionStatus;
	senderRevision: Int64;
	squareMid: string;
}

export interface SquareEventSendMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	reqSeq: number;
	senderDisplayName: string;
	messageReactionStatus: SquareMessageReactionStatus;
}

export interface SquareEventMutateMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	reqSeq: number;
	senderDisplayName: string;
}

export interface SquareEventNotifiedJoinSquareChat {
	squareChatMid: string;
	joinedMember: SquareMember;
}

export interface SquareMemberRelation {
	state: SquareMemberRelationState;
	revision: Int64;
}

export interface SquareEventNotifiedInviteIntoSquareChat {
	squareChatMid: string;
	invitees: SquareMember[];
	invitor: SquareMember;
	invitorRelation: SquareMemberRelation;
}

export interface SquareEventNotifiedLeaveSquareChat {
	squareChatMid: string;
	squareMemberMid: string;
	sayGoodbye: boolean;
	squareMember: SquareMember;
}

export interface SquareEventNotifiedDestroyMessage {
	squareChatMid: string;
	messageId: string;
}

export interface SquareEventNotifiedMarkAsRead {
	squareChatMid: string;
	sMemberMid: string;
	messageId: string;
}

export interface SquareEventNotifiedUpdateSquareMemberProfile {
	squareChatMid: string;
	squareMember: SquareMember;
}

export interface SquareEventNotifiedKickoutFromSquare {
	squareChatMid: string;
	kickees: SquareMember[];
	kicker: SquareMember;
}

export interface ApprovalValue {
	message: string;
}

export interface CodeValue {
	code: string;
}

export interface SquareJoinMethodValue {
	approvalValue: ApprovalValue;
	codeValue: CodeValue;
}

export interface SquareJoinMethod {
	type: SquareJoinMethodType;
	value: SquareJoinMethodValue;
}

export interface Square {
	mid: string;
	name: string;
	welcomeMessage: string;
	profileImageObsHash: string;
	desc: string;
	searchable: boolean;
	type: SquareType;
	categoryId: number;
	invitationURL: string;
	revision: Int64;
	ableToUseInvitationTicket: boolean;
	state: SquareState;
	emblems: SquareEmblem[];
	joinMethod: SquareJoinMethod;
	adultOnly: BooleanState;
	svcTags: string[];
	createdAt: Int64;
}

export interface SquareEventNotifiedShutdownSquare {
	squareChatMid: string;
	square: Square;
}

export interface MessageVisibility {
	showJoinMessage: boolean;
	showLeaveMessage: boolean;
	showKickoutMessage: boolean;
}

export interface SquareChat {
	squareChatMid: string;
	squareMid: string;
	type: SquareChatType;
	name: string;
	chatImageObsHash: string;
	squareChatRevision: Int64;
	maxMemberCount: number;
	state: SquareChatState;
	invitationUrl: string;
	messageVisibility: MessageVisibility;
	ableToSearchMessage: BooleanState;
}

export interface SquareEventNotifiedDeleteSquareChat {
	squareChat: SquareChat;
}

export interface SquareEventNotifiedUpdateSquareChatProfileName {
	squareChatMid: string;
	editor: SquareMember;
	updatedChatName: string;
}

export interface SquareEventNotifiedUpdateSquareChatProfileImage {
	squareChatMid: string;
	editor: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareChatMaxMemberCount {
	squareChatMid: string;
	maxMemberCount: number;
	editor: SquareMember;
}

export interface SquareEventNotifiedAddBot {
	squareChatMid: string;
	squareMember: SquareMember;
	botMid: string;
	botDisplayName: string;
}

export interface SquareEventNotifiedRemoveBot {
	squareChatMid: string;
	squareMember: SquareMember;
	botMid: string;
	botDisplayName: string;
}

export interface SquareEventNotifiedUpdateReadonlyChat {
	squareChatMid: string;
	readonly: boolean;
}

export interface MessageStatusContents {
	messageReactionStatus: SquareMessageReactionStatus;
}

export interface SquareMessageStatus {
	squareChatMid: string;
	globalMessageId: string;
	type: MessageStatusType;
	contents: MessageStatusContents;
	publishedAt: Int64;
}

export interface SquareEventNotifiedUpdateMessageStatus {
	squareChatMid: string;
	messageId: string;
	messageStatus: SquareMessageStatus;
}

export interface UrlButton {
	text: string;
	url: string;
}

export interface TextButton {
	text: string;
}

export interface OkButton {
	text: string;
}

export interface ButtonContent {
	urlButton: UrlButton;
	textButton: TextButton;
	okButton: OkButton;
}

export interface SquareEventChatPopup {
	squareChatMid: string;
	popupId: Int64;
	flexJson: string;
	button: ButtonContent;
}

export interface SquareEventNotifiedSystemMessage {
	squareChatMid: string;
	text: string;
}

export interface SquareEventNotifiedUpdateSquare {
	squareMid: string;
	square: Square;
}

export interface SquareStatus {
	memberCount: number;
	joinRequestCount: number;
	lastJoinRequestAt: Int64;
	openChatCount: number;
}

export interface SquareEventNotifiedUpdateSquareStatus {
	squareMid: string;
	squareStatus: SquareStatus;
}

export interface SquareEventNotifiedUpdateSquareMember {
	squareMid: string;
	squareMemberMid: string;
	squareMember: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareChat {
	squareMid: string;
	squareChatMid: string;
	squareChat: SquareChat;
}

export interface SquareChatStatusWithoutMessage {
	memberCount: number;
	unreadMessageCount: number;
	markedAsReadMessageId: string;
	mentionedMessageId: string;
	notifiedMessageType: NotifiedMessageType;
}

export interface SquareEventNotifiedUpdateSquareChatStatus {
	squareChatMid: string;
	statusWithoutMessage: SquareChatStatusWithoutMessage;
}

export interface SquareChatMember {
	squareMemberMid: string;
	squareChatMid: string;
	revision: Int64;
	membershipState: SquareChatMembershipState;
	notificationForMessage: boolean;
	notificationForNewMember: boolean;
}

export interface SquareEventNotifiedUpdateSquareChatMember {
	squareChatMid: string;
	squareChatMember: SquareChatMember;
}

export interface SquareAuthority {
	squareMid: string;
	updateSquareProfile: SquareMemberRole;
	inviteNewMember: SquareMemberRole;
	approveJoinRequest: SquareMemberRole;
	createPost: SquareMemberRole;
	createOpenSquareChat: SquareMemberRole;
	deleteSquareChatOrPost: SquareMemberRole;
	removeSquareMember: SquareMemberRole;
	grantRole: SquareMemberRole;
	enableInvitationTicket: SquareMemberRole;
	revision: Int64;
	createSquareChatAnnouncement: SquareMemberRole;
	updateMaxChatMemberCount: SquareMemberRole;
	useReadonlyDefaultChat: SquareMemberRole;
}

export interface SquareEventNotifiedUpdateSquareAuthority {
	squareMid: string;
	squareAuthority: SquareAuthority;
}

export interface SquareFeature {
	controlState: SquareFeatureControlState;
	booleanValue: BooleanState;
}

export interface SquareFeatureSet {
	squareMid: string;
	revision: Int64;
	creatingSecretSquareChat: SquareFeature;
	invitingIntoOpenSquareChat: SquareFeature;
	creatingSquareChat: SquareFeature;
	readonlyDefaultChat: SquareFeature;
	showingAdvertisement: SquareFeature;
	delegateJoinToPlug: SquareFeature;
	delegateKickOutToPlug: SquareFeature;
	disableUpdateJoinMethod: SquareFeature;
	disableTransferAdmin: SquareFeature;
	creatingLiveTalk: SquareFeature;
	disableUpdateSearchable: SquareFeature;
}

export interface NoteStatus {
	noteCount: number;
	latestCreatedAt: Int64;
}

export interface SquareEventNotifiedCreateSquareMember {
	square: Square;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareMember: SquareMember;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
}

export interface SquareChatStatus {
	lastMessage: SquareMessage;
	senderDisplayName: string;
	otherStatus: SquareChatStatusWithoutMessage;
}

export interface SquareChatFeature {
	controlState: SquareChatFeatureControlState;
	booleanValue: BooleanState;
}

export interface SquareChatFeatureSet {
	squareChatMid: string;
	revision: Int64;
	disableUpdateMaxChatMemberCount: SquareChatFeature;
	disableMarkAsReadEvent: SquareChatFeature;
}

export interface SquareEventNotifiedCreateSquareChatMember {
	chat: SquareChat;
	chatStatus: SquareChatStatus;
	chatMember: SquareChatMember;
	joinedAt: Int64;
	peerSquareMember: SquareMember;
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareMemberRelation {
	squareMid: string;
	myMemberMid: string;
	targetSquareMemberMid: string;
	squareMemberRelation: SquareMemberRelation;
}

export interface SquareEventNotifiedUpdateSquareFeatureSet {
	squareFeatureSet: SquareFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareChatFeatureSet {
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareNoteStatus {
	squareMid: string;
	noteStatus: NoteStatus;
}

export interface SquareEventNotifiedUpdateSquareChatAnnouncement {
	squareChatMid: string;
	announcementSeq: Int64;
}

export interface SquareEventNotificationJoinRequest {
	squareMid: string;
	squareName: string;
	requestMemberName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationMemberUpdate {
	squareMid: string;
	squareName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationSquareDelete {
	squareMid: string;
	squareName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationSquareChatDelete {
	squareChatMid: string;
	squareChatName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	senderDisplayName: string;
	unreadCount: number;
	requiredToFetchChatEvents: boolean;
	mentionedMessageId: string;
	notifiedMessageType: NotifiedMessageType;
	reqSeq: number;
}

export interface SquareEventNotificationPostAnnouncement {
	squareMid: string;
	squareName: string;
	squareProfileImageObsHash: string;
	actionUri: string;
}

export interface SquareEventNotificationPost {
	squareMid: string;
	notificationPostType: NotificationPostType;
	thumbnailObsHash: string;
	text: string;
	actionUri: string;
}

export interface SquareEventNotificationNewChatMember {
	squareChatMid: string;
	squareChatName: string;
}

export interface SquareEventNotificationMessageReaction {
	squareChatMid: string;
	messageId: string;
	squareChatName: string;
	reactorName: string;
	thumbnailObsHash: string;
	messageText: string;
	type: MessageReactionType;
}

export interface SquareEventPayload {
	receiveMessage?: SquareEventReceiveMessage;
	sendMessage?: SquareEventSendMessage;
	notifiedJoinSquareChat?: SquareEventNotifiedJoinSquareChat;
	notifiedInviteIntoSquareChat?: SquareEventNotifiedInviteIntoSquareChat;
	notifiedLeaveSquareChat?: SquareEventNotifiedLeaveSquareChat;
	notifiedDestroyMessage?: SquareEventNotifiedDestroyMessage;
	notifiedMarkAsRead?: SquareEventNotifiedMarkAsRead;
	notifiedUpdateSquareMemberProfile?:
		SquareEventNotifiedUpdateSquareMemberProfile;
	notifiedUpdateSquare?: SquareEventNotifiedUpdateSquare;
	notifiedUpdateSquareMember?: SquareEventNotifiedUpdateSquareMember;
	notifiedUpdateSquareChat?: SquareEventNotifiedUpdateSquareChat;
	notifiedUpdateSquareChatMember?: SquareEventNotifiedUpdateSquareChatMember;
	notifiedUpdateSquareAuthority?: SquareEventNotifiedUpdateSquareAuthority;
	notifiedUpdateSquareStatus?: SquareEventNotifiedUpdateSquareStatus;
	notifiedUpdateSquareChatStatus?: SquareEventNotifiedUpdateSquareChatStatus;
	notifiedCreateSquareMember?: SquareEventNotifiedCreateSquareMember;
	notifiedCreateSquareChatMember?: SquareEventNotifiedCreateSquareChatMember;
	notifiedUpdateSquareMemberRelation?:
		SquareEventNotifiedUpdateSquareMemberRelation;
	notifiedShutdownSquare?: SquareEventNotifiedShutdownSquare;
	notifiedKickoutFromSquare?: SquareEventNotifiedKickoutFromSquare;
	notifiedDeleteSquareChat?: SquareEventNotifiedDeleteSquareChat;
	notificationJoinRequest?: SquareEventNotificationJoinRequest;
	notificationJoined?: SquareEventNotificationMemberUpdate;
	notificationPromoteCoadmin?: SquareEventNotificationMemberUpdate;
	notificationPromoteAdmin?: SquareEventNotificationMemberUpdate;
	notificationDemoteMember?: SquareEventNotificationMemberUpdate;
	notificationKickedOut?: SquareEventNotificationMemberUpdate;
	notificationSquareDelete?: SquareEventNotificationSquareDelete;
	notificationSquareChatDelete?: SquareEventNotificationSquareChatDelete;
	notificationMessage?: SquareEventNotificationMessage;
	notifiedUpdateSquareChatProfileName?:
		SquareEventNotifiedUpdateSquareChatProfileName;
	notifiedUpdateSquareChatProfileImage?:
		SquareEventNotifiedUpdateSquareChatProfileImage;
	notifiedUpdateSquareFeatureSet?: SquareEventNotifiedUpdateSquareFeatureSet;
	notifiedAddBot?: SquareEventNotifiedAddBot;
	notifiedRemoveBot?: SquareEventNotifiedRemoveBot;
	notifiedUpdateSquareNoteStatus?: SquareEventNotifiedUpdateSquareNoteStatus;
	notifiedUpdateSquareChatAnnouncement?:
		SquareEventNotifiedUpdateSquareChatAnnouncement;
	notifiedUpdateSquareChatMaxMemberCount?:
		SquareEventNotifiedUpdateSquareChatMaxMemberCount;
	notificationPostAnnouncement?: SquareEventNotificationPostAnnouncement;
	notificationPost?: SquareEventNotificationPost;
	mutateMessage?: SquareEventMutateMessage;
	notificationNewChatMember?: SquareEventNotificationNewChatMember;
	notifiedUpdateReadonlyChat?: SquareEventNotifiedUpdateReadonlyChat;
	notifiedUpdateMessageStatus?: SquareEventNotifiedUpdateMessageStatus;
	notificationMessageReaction?: SquareEventNotificationMessageReaction;
	chatPopup?: SquareEventChatPopup;
	notifiedSystemMessage?: SquareEventNotifiedSystemMessage;
	notifiedUpdateSquareChatFeatureSet?:
		SquareEventNotifiedUpdateSquareChatFeatureSet;
}

export interface SquareEvent {
	createdTime: Int64;
	type: SquareEventType;
	payload: SquareEventPayload;
	syncToken: string;
	eventStatus: SquareEventStatus;
}

export interface SendMessageResponse {
	createdSquareMessage: SquareMessage;
}

export interface UnsendMessageResponse {
	unsentMessage: SquareMessage;
}

export interface FetchMyEventsResponse {
	subscription: SubscriptionState;
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;
}

export interface GetSquareEmidResponse {
	squareEmid: string;
}

export interface GetSquareMembersBySquareResponse {
	members: SquareMember[];
}

export interface ManualRepairResponse {
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;
}

export interface InviteIntoSquareChatResponse {
	inviteeMids: string[];
}

export interface InviteToSquareResponse {}

export interface GetJoinedSquaresResponse {
	squares: Square[];
	members: { [k: string]: SquareMember };
	authorities: { [k: string]: SquareAuthority };
	statuses: { [k: string]: SquareStatus };
	continuationToken: string;
	noteStatuses: { [k: string]: NoteStatus };
}

export interface MarkAsReadResponse {}

export interface ReactToMessageResponse {
	reaction: SquareMessageReaction;
	status: SquareMessageReactionStatus;
}

export interface FindSquareByInvitationTicketResponse {
	square: Square;
	myMembership: SquareMember;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
	chat: SquareChat;
	chatStatus: SquareChatStatus;
}

export interface SubscriptionState {
	subscriptionId: Int64;
	ttlMillis: Int64;
}

export interface FetchSquareChatEventsResponse {
	subscription: SubscriptionState;
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;
}

export interface GetSquareResponse {
	square: Square;
	myMembership: SquareMember;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareFeatureSet?: SquareFeatureSet;
	noteStatus: NoteStatus;
}

export interface GetJoinableSquareChatsResponse {
	squareChats: SquareChat[];
	continuationToken: string;
	totalSquareChatCount: number;
	squareChatStatuses: { [k: string]: SquareChatStatus };
}

export interface CreateSquareResponse {
	square: Square;
	creator: SquareMember;
	authority: SquareAuthority;
	status: SquareStatus;
	featureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface TextMessageAnnouncementContents {
	messageId: string;
	text: string;
	senderSquareMemberMid: string;
	createdAt: Int64;
	senderMid: string;
}

export interface SquareChatAnnouncementContents {
	textMessageAnnouncementContents: TextMessageAnnouncementContents;
}

export interface SquareChatAnnouncement {
	announcementSeq: Int64;
	type: SquareChatAnnouncementType;
	contents: SquareChatAnnouncementContents;
	createdAt: Int64;
	creator: string;
}

export interface GetSquareChatAnnouncementsResponse {
	announcements: SquareChatAnnouncement[];
}

export interface GetSquareFeatureSetResponse {
	squareFeatureSet: SquareFeatureSet;
}

export interface GetSquareChatFeatureSetResponse {
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SyncSquareMembersResponse {
	updatedSquareMembers: SquareMember[];
}

export interface SquareChatThread {
	squareChatThreadMid: string;
	squareChatMid: string;
	squareMid: string;
	messageId: string;
	state: SquareChatThreadState;
}

export interface GetJoinedSquareChatThreadsResponse {
	squareChatThreads: SquareChatThread[];
	continuationToken: string;
}

export interface CreateSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
}

export interface SquareChatThreadMember {
	squareMemberMid: string;
	squareChatThreadMid: string;
	revision: Int64;
	membershipState: SquareChatThreadeMembershipState;
}

export interface GetSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
	mySquareChatThreadMember: SquareChatThreadMember;
}

export interface JoinSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
}

export interface AcceptSpeakersResponse {}

export interface AcceptToChangeRoleResponse {}

export interface AcceptToListenResponse {}

export interface AcceptToSpeakResponse {}

export interface CancelToSpeakResponse {}

export interface EndLiveTalkResponse {}

export interface LiveTalkEventNotifiedUpdateLiveTalkTitle {
	title: string;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting {
	speakerSetting: LiveTalkSpeakerSetting;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkAnnouncement {
	announcement: string;
}

export interface LiveTalkEventNotifiedUpdateSquareMemberRole {
	squareMemberMid: string;
	role: SquareMemberRole;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak {
	allowRequestToSpeak: boolean;
}

export interface LiveTalkEventPayload {
	notifiedUpdateLiveTalkTitle: LiveTalkEventNotifiedUpdateLiveTalkTitle;
	notifiedUpdateLiveTalkSpeakerSetting:
		LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting;
	notifiedUpdateLiveTalkAnnouncement:
		LiveTalkEventNotifiedUpdateLiveTalkAnnouncement;
	notifiedUpdateSquareMemberRole: LiveTalkEventNotifiedUpdateSquareMemberRole;
	notifiedUpdateLiveTalkAllowRequestToSpeak:
		LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak;
}

export interface LiveTalkEvent {
	type: LiveTalkEventType;
	payload: LiveTalkEventPayload;
	syncToken: string;
}

export interface FetchLiveTalkEventsResponse {
	events: LiveTalkEvent[];
	syncToken: string;
	hasMore: boolean;
}

export interface LiveTalk {
	squareChatMid: string;
	sessionId: string;
	title: string;
	type: LiveTalkType;
	speakerSetting: LiveTalkSpeakerSetting;
	allowRequestToSpeak: boolean;
	announcement: string;
	participantCount: number;
	revision: Int64;
	startedAt: Int64;
}

export interface FindLiveTalkByInvitationTicketResponse {
	chatInvitationTicket: string;
	liveTalk: LiveTalk;
	chat: SquareChat;
	squareMember: SquareMember;
	chatMembershipState: SquareChatMembershipState;
}

export interface ForceEndLiveTalkResponse {}

export interface LiveTalkSpeaker {
	displayName: string;
	profileImageObsHash: string;
	role: SquareMemberRole;
}

export interface GetLiveTalkInfoForNonMemberResponse {
	chatName: string;
	liveTalk: LiveTalk;
	speakers: LiveTalkSpeaker[];
	chatInvitationUrl: string;
}

export interface GetLiveTalkInvitationUrlResponse {
	invitationUrl: string;
}

export interface GetLiveTalkSpeakersForNonMemberResponse {
	speakers: LiveTalkSpeaker[];
}

export interface GetSquareInfoByChatMidResponse {
	defaultChatMid: string;
	squareName: string;
	squareDesc: string;
}

export interface InviteToChangeRoleResponse {}

export interface InviteToListenResponse {}

export interface InviteToLiveTalkResponse {}

export interface InviteToSpeakResponse {
	inviteRequestId: string;
}

export interface JoinLiveTalkResponse {
	hostMemberMid: string;
	memberSessionId: string;
	token: string;
	proto: string;
	voipAddress: string;
	voipAddress6: string;
	voipUdpPort: number;
	voipTcpPort: number;
	fromZone: string;
	commParam: string;
	orionAddress: string;
	polarisAddress: string;
	polarisZone: string;
	polarisUdpPort: number;
}

export interface KickOutLiveTalkParticipantsResponse {}

export interface RejectSpeakersResponse {}

export interface RejectToSpeakResponse {}

export interface ReportLiveTalkResponse {}

export interface ReportLiveTalkSpeakerResponse {}

export interface RequestToListenResponse {}

export interface RequestToSpeakResponse {}

export interface StartLiveTalkResponse {
	liveTalk: LiveTalk;
}

export interface UpdateLiveTalkAttrsResponse {}

export interface AcquireLiveTalkResponse {
	liveTalk: LiveTalk;
}

export interface CreateQrCodeForSecureResponse {
	callbackUrl: string;
	longPollingMaxCount: number;
	longPollingIntervalSec: number;
	nonce: string;
}

export interface RefreshApiRetryPolicy {
	initialDelayInMillis: Int64;
	maxDelayInMillis: Int64;
	multiplier: number;
	jitterRate: number;
}

export interface TokenV3IssueResult {
	accessToken: string;
	refreshToken: string;
	durationUntilRefreshInSec: Int64;
	refreshApiRetryPolicy: RefreshApiRetryPolicy;
	loginSessionId: string;
	tokenIssueTimeEpochSec: Int64;
}

export interface QrCodeLoginV2Response {
	certificate: string;
	accessTokenV2: string;
	tokenV3IssueResult: TokenV3IssueResult;
	mid: string;
	lastBindTimestamp: Int64;
	metaData: { [k: string]: string };
}

export interface RichString {
	content: string;
	meta: { [k: string]: string };
}

export interface TargetProfileDetail {
	snapshotTimeMillis: Int64;
	profileName: string;
	picturePath: string;
	statusMessage: RichString;
	musicProfile: string;
	videoProfile: string;
	avatarProfile: AvatarProfile;
	pictureSource: PictureSource;
	pictureStatus: string;
}

export interface UserFriendDetail {
	createdTime: Int64;
	overriddenName: string;
	favoriteTime: Int64;
	hidden: boolean;
	ringtone: string;
	ringbackTone: string;
}

export interface BotFriendDetail {
	createdTime: Int64;
	favoriteTime: Int64;
	hidden: boolean;
}

export interface NotFriend {}

export interface FriendDetail {
	user: UserFriendDetail;
	bot: BotFriendDetail;
	notFriend: NotFriend;
}

export interface UserBlockDetail {
	deletedFromBlockList: boolean;
}

export interface BotBlockDetail {
	deletedFromBlockList: boolean;
}

export interface NotBlocked {}

export interface BlockDetail {
	user: UserBlockDetail;
	bot: BotBlockDetail;
	notBlocked: NotBlocked;
}

export interface RecommendationReasonSharedChat {
	chatMid: string;
}

export interface RecommendationReasonReverseFriendByUserId {}

export interface RecommendationReasonReverseFriendByQRCode {}

export interface RecommendationReasonReverseFriendByPhone {}

export interface RecommendationReason {
	sharedChat: RecommendationReasonSharedChat;
	reverseFriendByUserId: RecommendationReasonReverseFriendByUserId;
	reverseFriendByQrCode: RecommendationReasonReverseFriendByQRCode;
	reverseFriendByPhone: RecommendationReasonReverseFriendByPhone;
}

export interface Recommended {
	createdTime: Int64;
	reasons: RecommendationReason[];
	hidden: boolean;
}

export interface NotRecommended {}

export interface RecommendationDetail {
	recommendationDetail: Recommended;
	notRecommended: NotRecommended;
}

export interface NotificationSetting {
	mute: boolean;
}

export interface NotificationSettingEntry {
	notificationSetting: NotificationSetting;
}

export interface GetContactV3Response {
	targetUserMid: string;
	userType: UserType;
	targetProfileDetail: TargetProfileDetail;
	friendDetail: FriendDetail;
	blockDetail: BlockDetail;
	recommendationDetail: RecommendationDetail;
	notificationSettingEntry: NotificationSettingEntry;
}

export interface GetContactsV3Response {
	responses: GetContactV3Response[];
}

export interface AddFriendByMidResponse {}

export interface GetContactCalendarEventResponse {
	targetUserMid: string;
	userType: UserType;
	contactCalendarEvents: ContactCalendarEvents;
	snapshotTimeMillis: Int64;
}

export interface GetContactCalendarEventsResponse {
	responses: GetContactCalendarEventResponse[];
}

export interface Locale {
	language: string;
	country: string;
}

export interface GetProductRequest {
	productType: ProductType;
	productId: string;
	carrierCode: string;
	saveBrowsingHistory: boolean;
}

export interface GetProductResponse {
	productDetail: ProductDetail;
}

export interface ProductDetail {
	id: string;
	billingItemId: string;
	type: string;
	subtype: SubType;
	billingCpId: string;
	name: string;
	author: string;
	details: string;
	copyright: string;
	notice: string;
	promotionInfo: PromotionInfo;
	latestVersion: Int64;
	latestVersionString: string;
	version: Int64;
	versionString: string;
	applicationVersionRange: ApplicationVersionRange;
	owned: boolean;
	grantedByDefault: boolean;
	validFor: number;
	validUntil: Int64;
	onSale: boolean;
	salesFlag: string[];
	availableForPresent: boolean;
	availableForMyself: boolean;
	priceTier: number;
	price: Price;
	priceInLineCoin: string;
	localizedPrice: Price;
	images: { [k: string]: string[] };
	attributes: { [k: string]: string };
	authorId: string;
	stickerResourceType: StickerResourceType;
	productProperty: ProductProperty;
	productSalesState: ProductSalesState;
	installedTime: Int64;
	wishProperty: ProductWishProperty;
	subscriptionProperty: ProductSubscriptionProperty;
	productPromotionProperty: ProductPromotionProperty;
	availableInCountry: boolean;
	editorsPickBanners: EditorsPickBannerForClient[];
	ableToBeGivenAsPresent: boolean;
	madeWithStickerMaker: boolean;
	customDownloadButtonLabel: string;
}

export interface ApplicationVersionRange {
	lowerBound: string;
	lowerBoundInclusive: boolean;
	upperBound: string;
	upperBoundInclusive: boolean;
}

export interface EditorsPickBannerForClient {
	id: Int64;
	endPageBannerImageUrl: string;
	defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
	showNewBadge: boolean;
	name: string;
	description: string;
}

export interface Price {
	currency: string;
	amount: string;
	priceString: string;
}

export interface ProductProperty {
	stickerProperty: StickerProperty;
	themeProperty: ThemeProperty;
	sticonProperty: SticonProperty;
}

export interface StickerProperty {
	hasAnimation: boolean;
	hasSound: boolean;
	hasPopup: boolean;
	stickerResourceType: StickerResourceType;
	stickerOptions: string;
	compactStickerOptions: number;
	stickerHash: string;
	stickerIds: string[];
	nameTextProperty: ImageTextProperty;
	availableForPhotoEdit: boolean;
	stickerDefaultTexts: { [k: string]: string };
	stickerSize: StickerSize;
	popupLayer: PopupLayer;
	cpdProduct: boolean;
	availableForCombinationSticker: boolean;
}

export interface ThemeProperty {
	thumbnail: string;
	themeResourceType: ThemeResourceType;
}

export interface SticonProperty {
	sticonIds: string[];
	availableForPhotoEdit: boolean;
	sticonResourceType: SticonResourceType;
	endPageMainImages: string[][];
}

export interface ImageTextProperty {
	status: ImageTextStatus;
	plaintext: string;
	nameTextMaxCharacterCount: number;
	encryptedText: string;
}

export interface LpPromotionProperty {
	landingPageUrl: string;
	label: string;
	buttonLabel: string;
}

export interface ProductWishProperty {
	totalCount: Int64;
}

export interface ProductSubscriptionProperty {
	availableForSubscribe: boolean;
	subscriptionAvailability: number;
}

export interface ProductPromotionProperty {
	lpPromotionProperty: LpPromotionProperty;
}

export interface PromotionDetail {
	promotionBuddyInfo: PromotionBuddyInfo;
	promotionInstallInfo: PromotionInstallInfo;
	promotionMissionInfo: PromotionMissionInfo;
}

export interface PromotionInfo {
	promotionType: PromotionType;
	promotionDetail: PromotionDetail;
	buddyInfo: PromotionBuddyInfo;
}

export interface PromotionBuddyInfo {
	buddyMid: string;
	promotionBuddyDetail: PromotionBuddyDetail;
	showBanner: boolean;
}

export interface PromotionInstallInfo {
	downloadUrl: string;
	customUrlSchema: string;
}

export interface PromotionMissionInfo {
	promotionMissionType: PromotionMissionType;
	missionCompleted: boolean;
	downloadUrl: string;
	customUrlSchema: string;
	oaMid: string;
}

export interface PromotionBuddyDetail {
	searchId: string;
	contactStatus: ContactStatus;
	name: string;
	pictureUrl: string;
	statusMessage: string;
	brandType: BrandType;
}

export interface PurchaseOrder {
	shopId: string;
	productId: string;
	recipientMid: string;
	price: Price;
	enableLinePointAutoExchange: boolean;
	locale: Locale;
	presentAttributes: { [k: string]: string };
}

export interface PurchaseOrderResponse {
	orderId: string;
	attributes: { [k: string]: string };
	billingConfirmUrl: string;
}

export interface PurchaseRecordList {
	purchaseRecords: PurchaseRecord[];
	offset: number;
	totalSize: number;
}

export interface PurchaseRecord {
	productDetail: ProductDetail;
	purchasedTime: Int64;
	giver: string;
	recipient: string;
	purchasedPrice: Price;
}

export interface DetailedProductList {
	productList: ProductDetail[];
	offset: number;
	totalSize: number;
}

export interface CreateCombinationStickerResponse {
	id: string;
}

export interface ProductSearchSummary {
	id: string;
	type: ProductType;
	name: string;
	author: string;
	promotionInfo: PromotionInfo;
	version: Int64;
	newFlag: boolean;
	priceTier: number;
	priceInLineCoin: string;
	property: ProductProperty;
	subType: SubType;
	onSale: boolean;
	availableForPresent: boolean;
	availableForPurchase: boolean;
	validDays: number;
	authorId: string;
	bargainFlag: boolean;
	copyright: string;
	availability: ProductAvailability;
	interactionEventParameter: string;
	editorsPickIds: Int64[];
}

export interface DemographicType {
	demographicGenderType: DemographicGenderType;
	demographicAgeType: DemographicAgeType;
	defaultOrder: boolean;
}

export interface ShowcaseV3 {
	productList: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
	showcaseType: ShowcaseType;
	productType: ProductType;
	subType: SubType;
	demographicType: DemographicType;
}

export interface StickerIdRange {
	start: Int64;
	size: number;
}

export interface StickerSummary {
	stickerIdRanges: StickerIdRange[];
	suggestVersion: Int64;
	stickerHash: string;
	defaultDisplayOnKeyboard: boolean;
	stickerResourceType: StickerResourceType;
	nameTextProperty: ImageTextProperty;
	availableForPhotoEdit: boolean;
	popupLayer: PopupLayer;
	stickerSize: StickerSize;
	availableForCombinationSticker: boolean;
}

export interface ThemeSummary {
	imagePath: string;
	version: Int64;
	versionString: string;
}

export interface SticonSummary {
	suggestVersion: Int64;
	availableForPhotoEdit: boolean;
	sticonResourceType: SticonResourceType;
}

export interface ProductTypeSummary {
	stickerSummary: StickerSummary;
	themeSummary: ThemeSummary;
	sticonSummary: SticonSummary;
}

export interface ProductSummary {
	id: string;
	name: string;
	latestVersion: Int64;
	applicationVersionRange: ApplicationVersionRange;
	grantedByDefault: boolean;
	attributes: { [k: string]: string };
	productTypeSummary: ProductTypeSummary;
	validUntil: Int64;
	validFor: number;
	installedTime: Int64;
	availability: ProductAvailability;
	authorId: string;
	canAutoDownload: boolean;
	promotionInfo: PromotionInfo;
}

export interface ProductSummaryList {
	productList: ProductSummary[];
	offset: number;
	totalSize: number;
}

export interface ProductValidationScheme {
	key: string;
	offset: Int64;
	size: Int64;
}

export interface ProductValidationResult {
	validated: boolean;
}

export interface ShopUpdates {
	shopId: string;
	latestUpdateTime: Int64;
}

export interface SearchProductsV2Response {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface EditorsPickBanner {
	id: Int64;
	imageUrl: string;
	homeBannerImageUrl: string;
	showcaseBannerImageUrl: string;
	enableEditorsPickShowcaseTypes: EditorsPickShowcaseType[];
	defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
	homeBannerV2ImageUrl: string;
	name: string;
	containsProducts: boolean;
	displayPeriodBegin: Int64;
	description: string;
	showNewBadge: boolean;
}

export interface AuthorForShowcase {
	authorId: Int64;
	productList: ProductSearchSummary[];
	productTotalSize: Int64;
}

export interface ImageSearchSummary {
	imageId: string;
	product: ProductSearchSummary;
}

export interface KeywordImageList {
	tagId: string;
	keyword: string;
	imageList: ImageSearchSummary[];
}

export interface URLItem {
	title: string;
	imageUrl: string;
	url: string;
}

export interface EditorsPickContent {
	urlItem: URLItem;
	productDetail: ProductDetail;
}

export interface EditorsPick {
	contentType: EditorsPickContentType;
	editorsPickContent: EditorsPickContent;
}

export interface EditorsPickTab {
	editorsPickId: Int64;
	name: string;
	showcaseType: ShowcaseType;
}

export interface EditorsPickShowcase {
	id: Int64;
	name: string;
	banner: EditorsPickBanner;
	editorsPicks: EditorsPick[];
	continuationToken: string;
	totalSize: number;
	description: string;
	type: EditorsPickShowcaseType;
	tabs: EditorsPickTab[];
}

export interface Category {
	id: Int64;
	name: string;
	newFlag: boolean;
	productCount: number;
	thumbnailUrl: string;
}

export interface Tag {
	id: Int64;
	name: string;
	tagType: TagType;
	productCount: number;
	thumbnailUrl: string;
}

export interface ProductList {
	productList: ProductDetail[];
	offset: number;
	totalSize: number;
	title: string;
}

export interface CategoryProductList {
	category: Category;
	productList: ProductList;
}

export interface AggregatedHomeV2Response {
	showcases: ShowcaseV3[];
	editorsPickBanners: EditorsPickBanner[];
	authorList: AuthorForShowcase[];
	keywordStickerList: KeywordImageList[];
	detailedEditorsPick: EditorsPickShowcase;
	detailedCategoryList: CategoryProductList[];
	categoryList: Category[];
	tagList: Tag[];
}

export interface AggregatedCategory {
	id: Int64;
	categoryType: CategoryType;
	name: string;
	productCount: number;
	thumbnailUrl: string;
}

export interface ListContentData {
	showcase: ShowcaseV3;
	editorsPickBanners: EditorsPickBanner[];
	categories: AggregatedCategory[];
}

export interface ListContent {
	contentData: ListContentData;
	localizedTitle: string;
	tsKey: string;
	moreLinkFragment: string;
}

export interface AggregatedHomeNativeResponse {
	listContents: ListContent[];
}

export interface DynamicHomeNativeResponse {
	listContents: ListContent[];
}

export interface TagsProductList {
	tasteTag: Tag;
	characterTag: Tag;
	products: ProductSearchSummary[];
}

export interface AggregatedPremiumHomeResponse {
	showcases: ShowcaseV3[];
	editorsPickBanners: EditorsPickBanner[];
	popularCreator: AuthorForShowcase;
	featuredCategory: TagsProductList;
	categoryList: TagsProductList[];
	browsingHistory: ShowcaseV3;
	subscriptionSlotHistory: ShowcaseV3;
}

export interface AggregatedShowcaseV4 {
	showcases: ShowcaseV3[];
}

export interface GetRecommendationResponse {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface AuthorListResponse {
	authorList: AuthorForShowcase[];
	totalSize: Int64;
	continuationToken: string;
}

export interface ProductResourceType {
	stickerResourceType: StickerResourceType;
	themeResourceType: ThemeResourceType;
	sticonResourceType: SticonResourceType;
}

export interface LatestProductByAuthorItem {
	productId: string;
	displayName: string;
	version: Int64;
	newFlag: boolean;
	productResourceType: ProductResourceType;
	popupLayer: PopupLayer;
}

export interface LatestProductsByAuthorResponse {
	authorId: Int64;
	author: string;
	items: LatestProductByAuthorItem[];
}

export interface GetExperimentsResponse {
	variables: { [k: string]: string };
}

export interface ProductSummaryForAutoSuggest {
	id: string;
	version: Int64;
	name: string;
	stickerResourceType: StickerResourceType;
	suggestVersion: Int64;
	popupLayer: PopupLayer;
	type: ProductType;
	resourceType: ProductResourceType;
	stickerSize: StickerSize;
}

export interface AutoSuggestionShowcaseResponse {
	productList: ProductSummaryForAutoSuggest[];
	totalSize: Int64;
}

export interface SuggestResource {
	dataUrl: string;
	version: Int64;
	updatedTime: Int64;
}

export interface SuggestDictionarySetting {
	language: string;
	name: string;
	preload: boolean;
	suggestResource: SuggestResource;
	patch: any;
	suggestTagResource: SuggestResource;
	tagPatch: any;
	corpusResource: SuggestResource;
}

export interface GetSuggestDictionarySettingResponse {
	results: SuggestDictionarySetting[];
}

export interface GetRecommendOaResponse {
	buddyMids: string[];
}

export interface GetSuggestResourcesResponse {
	suggestResources: any;
}

export interface GetSuggestResourcesV2Response {
	suggestResources: { [k: string]: SuggestResource };
}

export interface GetTagClusterFileResponse {
	path: string;
	updatedTimeMillis: Int64;
}

export interface GetResourceFileReponse {
	tagClusterFileResponse: GetTagClusterFileResponse;
}

export interface BrowsingHistory {
	productSearchSummary: ProductSearchSummary;
	browsingTime: Int64;
}

export interface GetBrowsingHistoryResponse {
	browsingHistory: BrowsingHistory[];
	continuationToken: string;
	totalSize: number;
}

export interface DeleteAllBrowsingHistoryResponse {}

export interface SticonProductMapping {
	productId: string;
	oldProductId: string;
	newToOldSticonIdMapping: { [k: string]: string };
	oldPackageVersion: number;
	oldMetaVersion: number;
	stickerPackageId: Int64;
	stickerPackageVersion: number;
	stickerIds: { [k: string]: string };
}

export interface GetOldSticonMappingResponse {
	sticonProductMappings: SticonProductMapping[];
	updatedTimeMillis: Int64;
	updated: boolean;
}

export interface SimilarImageShowcase {
	chosenImage: ImageSearchSummary;
	similarImageList: ImageSearchSummary[];
	continuationToken: string;
}

export interface CustomizeImageTextResponse {
	nameTextProperty: ImageTextProperty;
}

export interface SubscriptionPlan {
	billingItemId: string;
	subscriptionService: SubscriptionServiceType;
	target: SubscriptionPlanTarget;
	type: SubscriptionPlanType;
	period: string;
	freeTrial: string;
	localizedName: string;
	price: Price;
	availability: SubscriptionPlanAvailability;
	cpId: string;
	nameKey: string;
	tier: SubscriptionPlanTier;
}

export interface GetSubscriptionPlansResponse {
	plans: SubscriptionPlan[];
}

export interface SubscriptionStatus {
	billingItemId: string;
	subscriptionService: SubscriptionServiceType;
	period: string;
	localizedName: string;
	freeTrial: boolean;
	expired: boolean;
	validUntil: Int64;
	maxSlotCount: number;
	target: SubscriptionPlanTarget;
	type: SubscriptionPlanType;
	storeCode: StoreCode;
	nameKey: string;
	tier: SubscriptionPlanTier;
	accountHold: boolean;
	maxSlotCountsByProductType: { [k: number /*ProductType*/]: number };
	agreementAccepted: boolean;
}

export interface GetSubscriptionStatusResponse {
	subscriptions: { [k: number]: SubscriptionStatus };
	hasValidStudentInformation: boolean;
	otherOwnedSubscriptions: { [k: number]: SubscriptionStatus[] };
}

export interface GetProductSummariesInSubscriptionSlotsResponse {
	products: ProductSummary[];
	continuationToken: string;
	totalSize: Int64;
	maxSlotCount: number;
}

export interface AddProductToSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;
}

export interface AddThemeToSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;
}

export interface RemoveProductFromSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;
}

export interface PurchaseSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;
}

export interface ChangeSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;
}

export interface RestoreSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;
}

export interface GetProductsByTagsV2Response {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface StudentInformation {
	schoolName: string;
	graduationDate: string;
}

export interface GetStudentInformationResponse {
	studentInformation: StudentInformation;
	isValid: boolean;
}

export interface SaveStudentInformationResponse {}

export interface PurchasedSubscription {
	orderId: string;
	subscriptionService: SubscriptionServiceType;
	billingItemId: string;
	type: SubscriptionPlanType;
	localizedName: string;
	purchasedTime: Int64;
	validUntil: Int64;
	price: Price;
	nameKey: string;
	tier: SubscriptionPlanTier;
}

export interface GetPurchasedSubscriptionsResponse {
	subscriptions: PurchasedSubscription[];
	continuationToken: string;
	totalSize: Int64;
}

export interface FindRestorablePlanResponse {
	result: SubscriptionBillingResult;
	billingItemId: string;
	storeOrderId: string;
	originalStoreOrderId: string;
	orderId: string;
	mid: string;
}

export interface SubscriptionMissionCampaign {
	productType: ProductType;
	productId: string;
}

export interface SubscriptionCampaignPayload {
	mission: SubscriptionMissionCampaign;
}

export interface SubscriptionCampaign {
	campaignId: string;
	fromInclusive: Int64;
	toExclusive: Int64;
	type: SubscriptionCampaignType;
	payload: SubscriptionCampaignPayload;
}

export interface GetSubscriptionCampaignsResponse {
	campaigns: SubscriptionCampaign[];
}

export interface GetSubscriptionRecommendationsResponse {
	products: ProductSearchSummary[];
}

export interface InteractionEventResponse {
	responseStatus: number;
}

export interface LibraExperiment {
	experimentId: string;
	groupId: string;
}

export interface GetExperimentsV2Response {
	experiments: { [k: string]: LibraExperiment };
}

export interface BirthdayGiftAssociationVerifyResponse {
	tokenStatus: BirthdayGiftAssociationVerifyTokenStatus;
	recipientUserMid: string;
}

export interface SubscriptionSlotHistory {
	product: ProductSearchSummary;
	addedTime: Int64;
	removedTime: Int64;
}

export interface GetSubscriptionSlotHistoryResponse {
	history: SubscriptionSlotHistory[];
	continuationToken: string;
	totalSize: Int64;
}

export interface PopupDisplaySettings {
	pages: number[];
	editorsPickIds: string[];
}

export interface PopupPage {
	imageUrl: string;
	title: string;
	body: string;
}

export interface PopupActionButton {
	label: string;
	actionUrl: string;
	textColorCode: string;
	backgroundColorCode: string;
}

export interface PopupDismissButton {
	label: string;
	textColorCode: string;
	backgroundColorCode: string;
}

export interface PopupContent {
	pages: PopupPage[];
	actionButton: PopupActionButton;
	dismissButton: PopupDismissButton;
}

export interface ShopPopup {
	popupId: string;
	displaySettings: PopupDisplaySettings;
	displayCount: PopupDisplayCount;
	content: PopupContent;
	displayPriority: number;
	visualType: PopupVisualType;
	displayIntervalInDays: number;
}

export interface GetPopupsResponse {
	popups: ShopPopup[];
}

export interface GetSubscriptionSlotStatusResponse {
	productIdsInSlots: string[];
	usedSlotCount: number;
	maxSlotCount: number;
}

export interface GetProductKeyboardListResponse {
	productType: ProductType;
	keyboardProductIds: string[];
}

export interface GetMusicSubscriptionStatusResponse {
	validUntil: Int64;
	expired: boolean;
	isStickersPremiumEnabled: boolean;
}

export interface StartBundleSubscriptionResponse {
	result: StartBundleSubscriptionResult;
}

export interface StopBundleSubscriptionResponse {
	result: StopBundleSubscriptionResult;
}

export interface GetSubscriptionCouponCodeResponse {
	result: GetSubscriptionCouponCodeResult;
	couponCode: string;
}

export interface GetSubscriptionCouponCampaignResponse {
	status: SubscriptionCouponCampaignStatus;
}

export interface PopupModel {
	popupId: string;
	active: boolean;
}

export interface GetPopupDisplayStatusResponse {
	popups: { [k: string]: PopupModel };
}

export interface GetFilteredProductsResponse {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface GetProductLatestVersionForUserResponse {
	latestVersion: Int64;
	latestVersionString: string;
}

export interface GetSubscriptionAgreementStatusResponse {
	accepted: boolean;
}

export interface AcceptSubscriptionAgreementResponse {
	result: AcceptSubscriptionAgreementResult;
}

export interface ShouldShowWelcomeStickerBannerResponse {
	shouldShowBanner: boolean;
}

export interface StickerDisplayData {
	stickerHash: string;
	stickerResourceType: StickerResourceType;
	nameTextProperty: ImageTextProperty;
	popupLayer: PopupLayer;
	stickerSize: StickerSize;
	productAvailability: ProductAvailability;
	height: number;
	width: number;
	version: Int64;
	availableForCombinationSticker: boolean;
}

export interface DisplayData {
	stickerSummary: StickerDisplayData;
}

export interface CollectionItem {
	itemId: string;
	productId: string;
	displayData: DisplayData;
	sortId: number;
}

export interface Collection {
	collectionId: string;
	items: CollectionItem[];
	productType: ProductType;
	createdTimeMillis: Int64;
	updatedTimeMillis: Int64;
}

export interface GetUserCollectionsResponse {
	collections: Collection[];
	updated: boolean;
}

export interface CreateCollectionForUserResponse {
	collection: Collection;
}

export interface AddItemToCollectionResponse {}

export interface RemoveItemFromCollectionResponse {}

export interface IsProductForCollectionsResponse {
	isAvailable: boolean;
}

export interface MessageCommitResult {
	requestId: string;
	state: BuddyResultState;
	messageStoreRequestId: string;
	messageIds: string[];
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	blockCount: Int64;
	unregisteredCount: Int64;
	unrelatedCount: Int64;
	errorDescription: string;
}

export interface CallHost {
	host: string;
	port: number;
	zone: string;
}

export interface AgeCheckDocomoResult {
	authUrl: string;
	userAgeType: UserAgeType;
}

export interface AgeCheckRequestResult {
	authUrl: string;
	sessionId: string;
}

export interface Announcement {
	index: number;
	forceUpdate: boolean;
	title: string;
	text: string;
	createdTime: Int64;
	pictureUrl: string;
	thumbnailUrl: string;
}

export interface ChannelProvider {
	name: string;
}

export interface ChannelDomain {
	host: string;
	removed: boolean;
}

export interface OTPResult {
	otpId: string;
	otp: string;
}

export interface SquareInfo {
	square: Square;
	squareStatus: SquareStatus;
	squareNoteStatus: NoteStatus;
}

export interface BotUseInfo {
	botUseAgreementAccepted: boolean;
	botInFriends: boolean;
	primaryApplication: string;
	locale: string;
}

export interface PaidCallAdCountry {
	countryCode: string;
	rateDivision: string;
}

export interface PaidCallAdResult {
	adRemains: number;
}

export interface PaidCallBalance {
	productType: PaidCallProductType;
	productName: string;
	unit: string;
	limitedPaidBalance: number;
	limitedFreeBalance: number;
	unlimitedPaidBalance: number;
	unlimitedFreeBalance: number;
	startTime: Int64;
	endTime: Int64;
	autopayEnabled: boolean;
}

export interface PaidCallCurrencyExchangeRate {
	currencyCode: string;
	currencyName: string;
	currencySign: string;
	preferred: boolean;
	coinRate: string;
	creditRate: string;
}

export interface ExtendedProfileBirthday {
	year: string;
	yearPrivacyLevelType: PrivacyLevelType;
	yearEnabled: boolean;
	day: string;
	dayPrivacyLevelType: PrivacyLevelType;
	dayEnabled: boolean;
}

export interface ExtendedProfile {
	birthday: ExtendedProfileBirthday;
}

export interface PaidCallDialing {
	type: PaidCallType;
	dialedNumber: string;
	serviceDomain: string;
	productType: PaidCallProductType;
	productName: string;
	multipleProduct: boolean;
	callerIdStatus: PaidCallerIdStatus;
	balance: number;
	unit: string;
	rate: number;
	displayCode: string;
	calledNumber: string;
	calleeNationalNumber: string;
	calleeCallingCode: string;
	rateDivision: string;
	adMaxMin: number;
	adRemains: number;
	adSessionId: string;
}

export interface SpotItem {
	name: string;
	phone: string;
	category: SpotCategory;
	mid: string;
	countryAreaCode: string;
	freePhoneCallable: boolean;
}

export interface SpotNearbyItem {
	spotItem: SpotItem;
	location: Location;
}

export interface SpotNearbyResponse {
	spotNearbyItems: SpotNearbyItem[];
}

export interface SpotPhoneNumberResponse {
	spotItems: SpotItem[];
}

export interface PaidCallHistory {
	seq: Int64;
	type: PaidCallType;
	dialedNumber: string;
	calledNumber: string;
	toMid: string;
	toName: string;
	setupTime: Int64;
	startTime: Int64;
	endTime: Int64;
	duration: Int64;
	terminate: number;
	productType: PaidCallProductType;
	charge: number;
	unit: string;
	result: string;
}

export interface PaidCallHistoryResult {
	historys: PaidCallHistory[];
	hasNext: boolean;
}

export interface PaidCallMetadataResult {
	currencyExchangeRates: PaidCallCurrencyExchangeRate[];
	recommendedCountryCodes: string[];
	adCountries: PaidCallAdCountry[];
}

export interface PaidCallRedeemResult {
	eventName: string;
	eventAmount: number;
}

export interface PaidCallResponse {
	host: CallHost;
	dialing: PaidCallDialing;
	token: string;
	spotItems: SpotItem[];
}

export interface PaidCallUserRate {
	countryCode: string;
	rate: number;
	rateDivision: string;
	rateName: string;
}

export interface ChannelInfo {
	channelId: string;
	name: string;
	entryPageUrl: string;
	descriptionText: string;
	provider: ChannelProvider;
	publicType: PublicType;
	iconImage: string;
	permissions: string[];
	iconThumbnailImage: string;
	channelConfigurations: ChannelConfiguration[];
	lcsAllApiUsable: boolean;
	allowedPermissions: ChannelPermission[];
	channelDomains: ChannelDomain[];
	updatedTimestamp: Int64;
}

export interface ApprovedChannelInfo {
	channelInfo: ChannelInfo;
	approvedAt: Int64;
}

export interface ApprovedChannelInfos {
	approvedChannelInfos: ApprovedChannelInfo[];
	revision: Int64;
}

export interface AuthQrcode {
	qrcode: string;
	verifier: string;
	callbackUrl: string;
}

export interface AnalyticsInfo {
	gaSamplingRate: number;
	tmid: string;
}

export interface ContactTransition {
	ownerMid: string;
	targetMid: string;
	previousStatus: ContactStatus;
	resultStatus: ContactStatus;
}

export interface UserTicketResponse {
	mid: string;
	userTicket: string;
}

export interface BuddyBanner {
	buddyBannerLinkType: BuddyBannerLinkType;
	buddyBannerLink: string;
	buddyBannerImageUrl: string;
}

export interface BuddyList {
	classification: string;
	displayName: string;
	totalBuddyCount: number;
	popularContacts: Contact[];
}

export interface RegisterWithPhoneNumberResult {
	authToken: string;
	recommendEmailRegistration: boolean;
	certificate: string;
}

export interface BuddyMessageRequest {
	contentType: ContentType;
	text: string;
	location: Location;
	content: Buffer;
	contentMetadata: { [k: string]: string };
}

export interface BuddyOnAirUrls {
	hls: { [k: string]: string };
	smoothStreaming: { [k: string]: string };
}

export interface BuddyOnAir {
	mid: string;
	freshnessLifetime: Int64;
	onAirId: string;
	onAir: boolean;
	text: string;
	viewerCount: Int64;
	targetCount: Int64;
	onAirType: BuddyOnAirType;
	onAirUrls: BuddyOnAirUrls;
}

export interface BuddyProfile {
	buddyId: string;
	mid: string;
	searchId: string;
	displayName: string;
	statusMessage: string;
	contactCount: Int64;
}

export interface CommitMessageResult {
	message: Message;
	code: CommitMessageResultCode;
	reason: string;
	successCount: Int64;
	failCount: Int64;
	unregisterCount: Int64;
	blockCount: Int64;
}

export interface BuddySearchResult {
	mid: string;
	displayName: string;
	pictureStatus: string;
	picturePath: string;
	statusMessage: string;
	businessAccount: boolean;
}

export interface SyncParamMid {
	mid: string;
	diff: Diff;
	revision: Int64;
}

export interface SIMInfo {
	phoneNumber: string;
	countryCode: string;
}

export interface SyncParamContact {
	syncParamMid: SyncParamMid;
	contactStatus: ContactStatus;
}

export interface ChannelDomains {
	channelDomains: ChannelDomain[];
	revision: Int64;
}

export interface ProductCategory {
	productCategoryId: Int64;
	title: string;
	productCount: number;
	newFlag: boolean;
}

export interface ChannelInfos {
	channelInfos: ChannelInfo[];
	revision: Int64;
}

export interface ChannelNotificationSetting {
	channelId: string;
	name: string;
	notificationReceivable: boolean;
	messageReceivable: boolean;
	showDefault: boolean;
}

export interface ChannelSyncDatas {
	channelInfos: ChannelInfo[];
	channelDomains: ChannelDomain[];
	revision: Int64;
	expires: Int64;
}

export interface NotiCenterEventData {
	id: string;
	to: string;
	from_: string;
	toChannel: string;
	fromChannel: string;
	eventType: string;
	createdTime: Int64;
	operationRevision: Int64;
	content: { [k: string]: string };
	push: { [k: string]: string };
}

export interface ChannelSettings {
	unapprovedMessageReceivable: boolean;
}

export interface ChannelIdWithLastUpdated {
	channelId: string;
	lastUpdated: Int64;
}

export interface Coin {
	freeCoinBalance: number;
	payedCoinBalance: number;
	totalCoinBalance: number;
	rewardCoinBalance: number;
}

export interface CoinPayLoad {
	payCoin: number;
	freeCoin: number;
	type: PayloadType;
	rewardCoin: number;
}

export interface CoinHistory {
	payDate: Int64;
	coinBalance: number;
	coin: number;
	price: string;
	title: string;
	refund: boolean;
	paySeq: string;
	currency: string;
	currencySign: string;
	displayPrice: string;
	payload: CoinPayLoad;
	channelId: string;
}

export interface CoinHistoryCondition {
	start: Int64;
	size: number;
	language: string;
	eddt: string;
	appStoreCode: PaymentType;
}

export interface CoinHistoryResult {
	historys: CoinHistory[];
	balance: Coin;
	hasNext: boolean;
}

export interface CoinProductItem {
	itemId: string;
	coin: number;
	freeCoin: number;
	currency: string;
	price: string;
	displayPrice: string;
	name: string;
	desc: string;
}

export interface CoinPurchaseConfirm {
	orderId: string;
	appStoreCode: PaymentType;
	receipt: string;
	signature: string;
	seller: string;
	requestType: string;
	ignoreReceipt: boolean;
}

export interface CoinPurchaseReservation {
	productId: string;
	country: string;
	currency: string;
	price: string;
	appStoreCode: PaymentType;
	language: string;
	pgCode: PaymentPgType;
	redirectUrl: string;
}

export interface CoinUseReservationItem {
	itemId: string;
	itemName: string;
	amount: number;
}

export interface CoinUseReservation {
	channelId: string;
	shopOrderId: string;
	appStoreCode: PaymentType;
	items: CoinUseReservationItem[];
	country: string;
}

export interface CompactContact {
	mid: string;
	createdTime: Int64;
	modifiedTime: Int64;
	status: ContactStatus;
	settings: Int64;
	displayNameOverridden: string;
}

export interface ContactReport {
	mid: string;
	exists: boolean;
	contact: Contact;
}

export interface ContactReportResult {
	mid: string;
	exists: boolean;
}

export interface DeviceInfo {
	deviceName: string;
	systemName: string;
	systemVersion: string;
	model: string;
	carrierCode: CarrierCode;
	carrierName: string;
	applicationType: ApplicationType;
}

export interface EmailConfirmation {
	usePasswordSet: boolean;
	email: string;
	password: string;
	ignoreDuplication: boolean;
}

export interface EmailConfirmationSession {
	emailConfirmationType: EmailConfirmationType;
	verifier: string;
	targetEmail: string;
}

export interface FriendChannelMatrix {
	channelId: string;
	representMid: string;
	count: number;
	point: number;
}

export interface FriendChannelMatricesResponse {
	expires: Int64;
	matrices: FriendChannelMatrix[];
}

export interface FriendRequest {
	eMid: string;
	mid: string;
	direction: FriendRequestDirection;
	method: FriendRequestMethod;
	param: string;
	timestamp: Int64;
	seqId: Int64;
	displayName: string;
	picturePath: string;
	pictureStatus: string;
}

export interface FriendRequestsInfo {
	totalIncomingCount: number;
	totalOutgoingCount: number;
	recentIncomings: FriendRequest[];
	recentOutgoings: FriendRequest[];
	totalIncomingLimit: number;
	totalOutgoingLimit: number;
}

export interface Geolocation {
	longitude: number;
	latitude: number;
}

export interface NotificationTarget {
	applicationType: string;
	applicationVersion: string;
	region: string;
}

export interface GroupPreference {
	invitationTicket: string;
	favoriteTimestamp: Int64;
}

export interface Group {
	id: string;
	createdTime: Int64;
	name: string;
	pictureStatus: string;
	preventedJoinByTicket: boolean;
	groupPreference: GroupPreference;
	members: Contact[];
	creator: Contact;
	invitee: Contact[];
	notificationDisabled: boolean;
}

export interface IdentityCredential {
	provider: IdentityProvider;
	identifier: string;
	password: string;
}

export interface LastReadMessageId {
	mid: string;
	lastReadMessageId: string;
}

export interface LastReadMessageIds {
	chatId: string;
	lastReadMessageIds: LastReadMessageId[];
}

export interface LoginResult {
	authToken: string;
	certificate: string;
	verifier: string;
	pinCode: string;
	type: LoginResultType;
	lastPrimaryBindTime: Int64;
	displayMessage: string;
	sessionForSMSConfirm: VerificationSessionData;
}

export interface LoginRequest {
	type: number;
	identityProvider: number;
	identifier: string;
	password: string;
	keepLoggedIn: boolean;
	accessLocation: string;
	systemName: string;
	certificate: string;
	verifier: string;
	secret: string;
	e2eeVersion: number;
}

export interface LoginSession {
	tokenKey: string;
	expirationTime: Int64;
	applicationType: ApplicationType;
	systemName: string;
	accessLocation: string;
}

export interface MessageOperation {
	revision: Int64;
	createdTime: Int64;
	type: MessageOperationType;
	reqSeq: number;
	status: OpStatus;
	param1: string;
	param2: string;
	param3: string;
	message: Message;
}

export interface MessageOperations {
	operations: MessageOperation[];
	endFlag: boolean;
}

export interface MessageStoreResult {
	requestId: string;
	messageIds: string[];
}

export interface MetaProfile {
	createTime: Int64;
	regionCode: string;
	identities: { [k: number /*RegistrationType*/]: string };
}

export interface NotificationItem {
	id: string;
	_from: string;
	to: string;
	fromChannel: string;
	toChannel: string;
	revision: Int64;
	createdTime: Int64;
	content: { [k: string]: string };
}

export interface NotificationFetchResult {
	fetchMode: NotificationItemFetchMode;
	itemList: NotificationItem[];
}

export interface PaymentReservation {
	receiverMid: string;
	productId: string;
	language: string;
	location: string;
	currency: string;
	price: string;
	appStoreCode: PaymentType;
	messageText: string;
	messageTemplate: number;
	packageId: Int64;
}

export interface PaymentReservationResult {
	orderId: string;
	confirmUrl: string;
	extras: { [k: string]: string };
}

export interface Product {
	productId: string;
	packageId: Int64;
	version: number;
	authorName: string;
	onSale: boolean;
	validDays: number;
	saleType: number;
	copyright: string;
	title: string;
	descriptionText: string;
	shopOrderId: Int64;
	fromMid: string;
	toMid: string;
	validUntil: Int64;
	priceTier: number;
	price: string;
	currency: string;
	currencySymbol: string;
	paymentType: PaymentType;
	createDate: Int64;
	ownFlag: boolean;
	eventType: ProductEventType;
	urlSchema: string;
	downloadUrl: string;
	buddyMid: string;
	publishSince: Int64;
	newFlag: boolean;
	missionFlag: boolean;
	categories: ProductCategory[];
	missionButtonText: string;
	missionShortDescription: string;
	authorId: string;
	grantedByDefault: boolean;
	displayOrder: number;
	availableForPresent: boolean;
	availableForMyself: boolean;
	hasAnimation: boolean;
	hasSound: boolean;
	recommendationsEnabled: boolean;
	stickerResourceType: StickerResourceType;
}

export interface ProductSimple {
	productId: string;
	packageId: Int64;
	version: number;
	onSale: boolean;
	validUntil: Int64;
	stickerIdRanges: StickerIdRange[];
	grantedByDefault: boolean;
	displayOrder: number;
}

export interface ProductSimpleList {
	hasNext: boolean;
	reinvokeHour: number;
	lastVersionSeq: Int64;
	productList: ProductSimple[];
	recentNewReleaseDate: Int64;
	recentEventReleaseDate: Int64;
}

export interface ProximityMatchCandidateResult {
	users: Contact[];
	buddies: Contact[];
}

export interface RegisterWithSnsIdResult {
	authToken: string;
	userCreated: boolean;
}

export interface RequestTokenResponse {
	requestToken: string;
	returnUrl: string;
}

export interface SuggestDictionary {
	language: string;
	name: string;
}

export interface SuggestItemDictionaryIncrement {
	status: SuggestDictionaryIncrementStatus;
	revision: Int64;
	scheme: string;
	data: Buffer;
}

export interface SuggestTagDictionaryIncrement {
	status: SuggestDictionaryIncrementStatus;
	language: string;
	revision: Int64;
	scheme: string;
	data: Buffer;
}

export interface SuggestDictionaryIncrements {
	itemIncrement: SuggestItemDictionaryIncrement;
	tagIncrements: SuggestTagDictionaryIncrement[];
}

export interface SuggestItemDictionaryRevision {
	revision: Int64;
	scheme: string;
}

export interface SuggestTagDictionaryRevision {
	language: string;
	revision: Int64;
	scheme: string;
}

export interface SuggestDictionaryRevisions {
	itemRevision: SuggestItemDictionaryRevision;
	tagRevisions: SuggestTagDictionaryRevision[];
}

export interface SuggestDictionarySettings {
	revision: Int64;
	newRevision: Int64;
	dictionaries: SuggestDictionary[];
	preloadedDictionaries: string[];
}

export interface PhoneInfoForChannel {
	mid: string;
	normalizedPhoneNumber: string;
	allowedToSearchByPhoneNumber: boolean;
	allowedToReceiveMessageFromNonFriend: boolean;
	region: string;
}

export interface PhoneVerificationResult {
	verificationResult: VerificationResult;
	accountMigrationCheckType: AccountMigrationCheckType;
	recommendAddFriends: boolean;
}

export interface PlaceSearchInfo {
	name: string;
	address: string;
	latitude: number;
	longitude: number;
}

export interface SecurityCenterResult {
	uri: string;
	token: string;
	cookiePath: string;
	skip: boolean;
}

export interface SendBuddyMessageResult {
	requestId: string;
	state: BuddyResultState;
	messageId: string;
	eventNo: number;
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	cancelCount: Int64;
	blockCount: Int64;
	unregisterCount: Int64;
	timestamp: Int64;
	message: string;
}

export interface SetBuddyOnAirResult {
	requestId: string;
	state: BuddyResultState;
	eventNo: number;
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	cancelCount: Int64;
	unregisterCount: Int64;
	timestamp: Int64;
	message: string;
}

export interface SimpleChannelClient {
	applicationType: string;
	applicationVersion: string;
	locale: string;
}

export interface SimpleChannelContact {
	mid: string;
	displayName: string;
	pictureStatus: string;
	picturePath: string;
	statusMessage: string;
}

export interface SnsFriend {
	snsUserId: string;
	snsUserName: string;
	snsIdType: SnsIdType;
}

export interface SnsFriendContactRegistration {
	contact: Contact;
	snsIdType: SnsIdType;
	snsUserId: string;
}

export interface SnsFriendModification {
	type: ModificationType;
	snsFriend: SnsFriend;
}

export interface SnsFriends {
	snsFriends: SnsFriend[];
	hasMore: boolean;
}

export interface SnsIdUserStatus {
	userExisting: boolean;
	phoneNumberRegistered: boolean;
	sameDevice: boolean;
}

export interface SnsProfile {
	snsUserId: string;
	snsUserName: string;
	email: string;
	thumbnailUrl: string;
}

export interface SystemConfiguration {
	endpoint: string;
	endpointSsl: string;
	updateUrl: string;
	c2dmAccount: string;
	nniServer: string;
}

export interface TMessageBox {
	id: string;
	channelId: string;
	lastSeq: Int64;
	unreadCount: Int64;
	lastModifiedTime: Int64;
	status: number;
	midType: MIDType;
	lastMessages: Message[];
}

export interface TMessageBoxWrapUp {
	messageBox: TMessageBox;
	name: string;
	contacts: Contact[];
	pictureRevision: string;
}

export interface TMessageBoxWrapUpResponse {
	messageBoxWrapUpList: TMessageBoxWrapUp[];
	totalSize: number;
}

export interface SyncRelations {
	syncAll: boolean;
	syncParamContact: SyncParamContact[];
	syncParamMid: SyncParamMid[];
}

export interface SyncScope {
	syncProfile: boolean;
	syncSettings: boolean;
	syncSticker: boolean;
	syncThemeShop: boolean;
	contact: SyncRelations;
	group: SyncRelations;
	room: SyncRelations;
	chat: SyncRelations;
}

export interface JoinSquareResponse {
	square: Square;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareMember: SquareMember;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
}

export interface JoinSquareRequest {
	squareMid: string;
	member: SquareMember;
}

export interface JoinSquareChatResponse {
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
}

export interface JoinSquareChatRequest {
	squareChatMid: string;
}

export interface SendMessageRequest {
	reqSeq: number;
	squareChatMid: string;
	squareMessage: SquareMessage;
}

export interface MarkAsReadRequest {
	squareChatMid: string;
	messageId: string;
}

export interface ApproveSquareMembersResponse {
	approvedMembers: SquareMember[];
	status: SquareStatus;
}

export interface ApproveSquareMembersRequest {
	squareMid: string;
	requestedMemberMids: string[];
}

export interface CreateSquareChatResponse {
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
}

export interface CreateSquareChatRequest {
	reqSeq: number;
	squareChat: SquareChat;
	squareMemberMids: string[];
}

export interface CreateSquareRequest {
	reqSeq: number;
	square: Square;
	creator: SquareMember;
}

export interface DeleteSquareResponse {}

export interface DeleteSquareRequest {
	mid: string;
	revision: Int64;
}

export interface DestroyMessageResponse {}

export interface DestroyMessageRequest {
	squareChatMid: string;
	messageId: string;
}

export interface GetSquareChatMembersRequest {
	squareChatMid: string;
	continuationToken: string;
	limit: number;
}

export interface GetSquareChatMembersResponse {
	squareChatMembers: SquareMember[];
	continuationToken: string;
}

export interface GetSquareChatStatusRequest {
	squareChatMid: string;
}

export interface GetSquareChatStatusResponse {
	chatStatus: SquareChatStatus;
}

export interface GetSquareChatRequest {
	squareChatMid: string;
}

export interface GetSquareChatResponse {
	squareChat: SquareChat;
	squareChatMember: SquareChatMember;
	squareChatStatus: SquareChatStatus;
}

export interface GetSquareAuthorityRequest {
	squareMid: string;
}

export interface GetSquareAuthorityResponse {
	authority: SquareAuthority;
}

export interface GetJoinedSquaresRequest {
	continuationToken: string;
	limit: number;
}

export interface GetJoinableSquareChatsRequest {
	squareMid: string;
	continuationToken: string;
	limit: number;
}

export interface GetInvitationTicketUrlRequest {
	mid: string;
}

export interface GetInvitationTicketUrlResponse {
	invitationURL: string;
}

export interface LeaveSquareRequest {
	squareMid: string;
}

export interface LeaveSquareResponse {}

export interface LeaveSquareChatRequest {
	squareChatMid: string;
	sayGoodbye: boolean;
	squareChatMemberRevision: Int64;
}

export interface LeaveSquareChatResponse {}

export interface SquareMemberSearchOption {
	membershipState: SquareMembershipState;
	memberRoles: SquareMemberRole[];
	displayName: string;
	ableToReceiveMessage: BooleanState;
	ableToReceiveFriendRequest: BooleanState;
	chatMidToExcludeMembers: string;
	includingMe: boolean;
}

export interface SearchSquareMembersRequest {
	squareMid: string;
	searchOption: SquareMemberSearchOption;
	continuationToken: string;
	limit: number;
}

export interface SearchSquareMembersResponse {
	members: SquareMember[];
	revision: Int64;
	continuationToken: string;
	totalCount: number;
}

export interface FindSquareByInvitationTicketRequest {
	invitationTicket: string;
}

export interface FetchMyEventsRequest {
	subscriptionId: Int64;
	syncToken: string;
	limit: number;
	continuationToken: string;
}

export interface FetchSquareChatEventsRequest {
	subscriptionId: Int64;
	squareChatMid: string;
	syncToken: string;
	limit: number;
	direction: FetchDirection;
}

export interface InviteToSquareRequest {
	squareMid: string;
	invitees: string[];
	squareChatMid: string;
}

export interface InviteToSquareChatRequest {
	inviteeMids: string[];
	squareChatMid: string;
}

export interface InviteToSquareChatResponse {
	inviteeMids: string[];
}

export interface GetSquareMemberRequest {
	squareMemberMid: string;
}

export interface GetSquareMemberResponse {
	squareMember: SquareMember;
	relation: SquareMemberRelation;
	oneOnOneChatMid: string;
}

export interface GetSquareMembersRequest {
	mids: string[];
}

export interface GetSquareMembersResponse {
	members: SquareMember;
}

export interface GetSquareMemberRelationsRequest {
	state: SquareMemberRelationState;
	continuationToken: string;
	limit: number;
}

export interface GetSquareMemberRelationsResponse {
	squareMembers: SquareMember[];
	relations: { [k: string]: SquareMemberRelation };
	continuationToken: string;
}

export interface GetSquareMemberRelationRequest {
	squareMid: string;
	targetSquareMemberMid: string;
}

export interface GetSquareMemberRelationResponse {
	squareMid: string;
	targetSquareMemberMid: string;
	relation: SquareMemberRelation;
}

export interface GetSquareCategoriesRequest {}

export interface GetSquareCategoriesResponse {
	categoryList: Category[];
}

export interface UpdateSquareRequest {
	updatedAttrs: SquareAttribute[];
	square: Square;
}

export interface UpdateSquareResponse {
	updatedAttrs: SquareAttribute[];
	square: Square;
}

export interface SearchSquaresRequest {
	query: string;
	continuationToken: string;
	limit: number;
}

export interface SearchSquaresResponse {
	squares: Square[];
	squareStatuses: { [k: string]: SquareStatus };
	myMemberships: { [k: string]: SquareMember };
	continuationToken: string;
	noteStatuses: { [k: string]: NoteStatus };
}

export interface GetSquareFeatureSetRequest {
	squareMid: string;
}

export interface UpdateSquareFeatureSetRequest {
	updateAttributes: SquareFeatureSetAttribute[];
	squareFeatureSet: SquareFeatureSet;
}

export interface UpdateSquareFeatureSetResponse {
	updateAttributes: SquareFeatureSetAttribute[];
	squareFeatureSet: SquareFeatureSet;
}

export interface UpdateSquareMemberRequest {
	updatedAttrs: SquareMemberAttribute[];
	updatedPreferenceAttrs: SquarePreferenceAttribute[];
	squareMember: SquareMember;
}

export interface UpdateSquareMemberResponse {
	updatedAttrs: SquareMemberAttribute[];
	squareMember: SquareMember;
	updatedPreferenceAttrs: SquarePreferenceAttribute[];
}

export interface UpdateSquareMembersRequest {
	updatedAttrs: SquareMemberAttribute[];
	members: SquareMember[];
}

export interface UpdateSquareMembersResponse {
	updatedAttrs: SquareMemberAttribute[];
	editor: SquareMember;
	members: { [k: string]: SquareMember };
}

export interface RejectSquareMembersRequest {
	squareMid: string;
	requestedMemberMids: string[];
}

export interface RejectSquareMembersResponse {
	rejectedMembers: SquareMember[];
	status: SquareStatus;
}

export interface RemoveSubscriptionsRequest {
	unsubscriptions: Int64[];
}

export interface RemoveSubscriptionsResponse {}

export interface RefreshSubscriptionsRequest {
	subscriptions: Int64[];
}

export interface RefreshSubscriptionsResponse {
	ttlMillis: Int64;
	subscriptionStates: any;
}

export interface UpdateSquareChatRequest {
	updatedAttrs: SquareChatAttribute[];
	squareChat: SquareChat;
}

export interface UpdateSquareChatResponse {
	updatedAttrs: SquareChatAttribute[];
	squareChat: SquareChat;
}

export interface DeleteSquareChatRequest {
	squareChatMid: string;
	revision: Int64;
}

export interface DeleteSquareChatResponse {}

export interface UpdateSquareChatMemberRequest {
	updatedAttrs: SquareChatMemberAttribute[];
	chatMember: SquareChatMember;
}

export interface UpdateSquareChatMemberResponse {
	updatedChatMember: SquareChatMember;
}

export interface UpdateSquareAuthorityRequest {
	updateAttributes: SquareAuthorityAttribute[];
	authority: SquareAuthority;
}

export interface UpdateSquareAuthorityResponse {
	updatdAttributes: SquareAuthorityAttribute[];
	authority: SquareAuthority;
}

export interface UpdateSquareMemberRelationRequest {
	squareMid: string;
	targetSquareMemberMid: string;
	updatedAttrs: SquareMemberRelationAttribute[];
	relation: SquareMemberRelation;
}

export interface UpdateSquareMemberRelationResponse {
	squareMid: string;
	targetSquareMemberMid: string;
	updatedAttrs: SquareMemberRelationAttribute[];
	relation: SquareMemberRelation;
}

export interface ReportSquareRequest {
	squareMid: string;
	reportType: ReportType;
	otherReason: string;
}

export interface ReportSquareResponse {}

export interface ReportSquareChatRequest {
	squareMid: string;
	squareChatMid: string;
	reportType: ReportType;
	otherReason: string;
}

export interface ReportSquareChatResponse {}

export interface ReportSquareMessageRequest {
	squareMid: string;
	squareChatMid: string;
	squareMessageId: string;
	reportType: ReportType;
	otherReason: string;
}

export interface ReportSquareMessageResponse {}

export interface ReportSquareMemberRequest {
	squareMemberMid: string;
	reportType: ReportType;
	otherReason: string;
	squareChatMid: string;
}

export interface ReportSquareMemberResponse {}

export interface GetSquareRequest {
	mid: string;
}

export interface GetSquareStatusRequest {
	squareMid: string;
}

export interface GetSquareStatusResponse {
	squareStatus: SquareStatus;
}

export interface GetNoteStatusRequest {
	squareMid: string;
}

export interface GetNoteStatusResponse {
	squareMid: string;
	status: NoteStatus;
}

export interface CreateSquareChatAnnouncementRequest {
	reqSeq: number;
	squareChatMid: string;
	squareChatAnnouncement: SquareChatAnnouncement;
}

export interface CreateSquareChatAnnouncementResponse {
	announcement: SquareChatAnnouncement;
}

export interface DeleteSquareChatAnnouncementRequest {
	squareChatMid: string;
	announcementSeq: Int64;
}

export interface DeleteSquareChatAnnouncementResponse {}

export interface GetSquareChatAnnouncementsRequest {
	squareChatMid: string;
}

export interface GetJoinedSquareChatsRequest {
	continuationToken: string;
	limit: number;
}

export interface GetJoinedSquareChatsResponse {
	chats: SquareChat[];
	chatMembers: { [k: string]: SquareChatMember };
	statuses: { [k: string]: SquareChatStatus };
	continuationToken: string;
}

export interface UserAuthStatus {
	phoneNumberRegistered: boolean;
	registeredSnsIdTypes: SnsIdType[];
}

export interface WapInvitation {
	type: WapInvitationType;
	inviteeEmail: string;
	inviterMid: string;
	roomMid: string;
}

export interface GroupCallRoute {
	token: string;
	cscf: CallHost;
	mix: CallHost;
}


    async acceptChatInvitationByTicket(
        ...param: Parameters<typeof LINEStruct.acceptChatInvitationByTicket_args>
    ): Promise<LINETypes.acceptChatInvitationByTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acceptChatInvitationByTicket_args(...param),
            "acceptChatInvitationByTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async acceptChatInvitation(
        ...param: Parameters<typeof LINEStruct.acceptChatInvitation_args>
    ): Promise<LINETypes.acceptChatInvitation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acceptChatInvitation_args(...param),
            "acceptChatInvitation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async acceptSpeakers(
        ...param: Parameters<typeof LINEStruct.SquareService_acceptSpeakers_args>
    ): Promise<LINETypes.SquareService_acceptSpeakers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_acceptSpeakers_args(...param),
            "acceptSpeakers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async acceptToChangeRole(
        ...param: Parameters<typeof LINEStruct.SquareService_acceptToChangeRole_args>
    ): Promise<LINETypes.SquareService_acceptToChangeRole_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_acceptToChangeRole_args(...param),
            "acceptToChangeRole",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async acceptToListen(
        ...param: Parameters<typeof LINEStruct.SquareService_acceptToListen_args>
    ): Promise<LINETypes.SquareService_acceptToListen_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_acceptToListen_args(...param),
            "acceptToListen",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async acceptToSpeak(
        ...param: Parameters<typeof LINEStruct.SquareService_acceptToSpeak_args>
    ): Promise<LINETypes.SquareService_acceptToSpeak_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_acceptToSpeak_args(...param),
            "acceptToSpeak",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async acquireLiveTalk(
        ...param: Parameters<typeof LINEStruct.SquareService_acquireLiveTalk_args>
    ): Promise<LINETypes.SquareService_acquireLiveTalk_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_acquireLiveTalk_args(...param),
            "acquireLiveTalk",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async cancelToSpeak(
        ...param: Parameters<typeof LINEStruct.SquareService_cancelToSpeak_args>
    ): Promise<LINETypes.SquareService_cancelToSpeak_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_cancelToSpeak_args(...param),
            "cancelToSpeak",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async fetchLiveTalkEvents(
        ...param: Parameters<typeof LINEStruct.SquareService_fetchLiveTalkEvents_args>
    ): Promise<LINETypes.SquareService_fetchLiveTalkEvents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_fetchLiveTalkEvents_args(...param),
            "fetchLiveTalkEvents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async findLiveTalkByInvitationTicket(
        ...param: Parameters<typeof LINEStruct.SquareService_findLiveTalkByInvitationTicket_args>
    ): Promise<LINETypes.SquareService_findLiveTalkByInvitationTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_findLiveTalkByInvitationTicket_args(...param),
            "findLiveTalkByInvitationTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async forceEndLiveTalk(
        ...param: Parameters<typeof LINEStruct.SquareService_forceEndLiveTalk_args>
    ): Promise<LINETypes.SquareService_forceEndLiveTalk_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_forceEndLiveTalk_args(...param),
            "forceEndLiveTalk",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getLiveTalkInfoForNonMember(
        ...param: Parameters<typeof LINEStruct.SquareService_getLiveTalkInfoForNonMember_args>
    ): Promise<LINETypes.SquareService_getLiveTalkInfoForNonMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getLiveTalkInfoForNonMember_args(...param),
            "getLiveTalkInfoForNonMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getLiveTalkInvitationUrl(
        ...param: Parameters<typeof LINEStruct.SquareService_getLiveTalkInvitationUrl_args>
    ): Promise<LINETypes.SquareService_getLiveTalkInvitationUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getLiveTalkInvitationUrl_args(...param),
            "getLiveTalkInvitationUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getLiveTalkSpeakersForNonMember(
        ...param: Parameters<typeof LINEStruct.SquareService_getLiveTalkSpeakersForNonMember_args>
    ): Promise<LINETypes.SquareService_getLiveTalkSpeakersForNonMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getLiveTalkSpeakersForNonMember_args(...param),
            "getLiveTalkSpeakersForNonMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareInfoByChatMid(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareInfoByChatMid_args>
    ): Promise<LINETypes.SquareService_getSquareInfoByChatMid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareInfoByChatMid_args(...param),
            "getSquareInfoByChatMid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async inviteToChangeRole(
        ...param: Parameters<typeof LINEStruct.SquareService_inviteToChangeRole_args>
    ): Promise<LINETypes.SquareService_inviteToChangeRole_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_inviteToChangeRole_args(...param),
            "inviteToChangeRole",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async inviteToListen(
        ...param: Parameters<typeof LINEStruct.SquareService_inviteToListen_args>
    ): Promise<LINETypes.SquareService_inviteToListen_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_inviteToListen_args(...param),
            "inviteToListen",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async inviteToLiveTalk(
        ...param: Parameters<typeof LINEStruct.SquareService_inviteToLiveTalk_args>
    ): Promise<LINETypes.SquareService_inviteToLiveTalk_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_inviteToLiveTalk_args(...param),
            "inviteToLiveTalk",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async inviteToSpeak(
        ...param: Parameters<typeof LINEStruct.SquareService_inviteToSpeak_args>
    ): Promise<LINETypes.SquareService_inviteToSpeak_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_inviteToSpeak_args(...param),
            "inviteToSpeak",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async joinLiveTalk(
        ...param: Parameters<typeof LINEStruct.SquareService_joinLiveTalk_args>
    ): Promise<LINETypes.SquareService_joinLiveTalk_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_joinLiveTalk_args(...param),
            "joinLiveTalk",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async kickOutLiveTalkParticipants(
        ...param: Parameters<typeof LINEStruct.SquareService_kickOutLiveTalkParticipants_args>
    ): Promise<LINETypes.SquareService_kickOutLiveTalkParticipants_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_kickOutLiveTalkParticipants_args(...param),
            "kickOutLiveTalkParticipants",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async rejectSpeakers(
        ...param: Parameters<typeof LINEStruct.SquareService_rejectSpeakers_args>
    ): Promise<LINETypes.SquareService_rejectSpeakers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_rejectSpeakers_args(...param),
            "rejectSpeakers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async rejectToSpeak(
        ...param: Parameters<typeof LINEStruct.SquareService_rejectToSpeak_args>
    ): Promise<LINETypes.SquareService_rejectToSpeak_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_rejectToSpeak_args(...param),
            "rejectToSpeak",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async removeLiveTalkSubscription(
        ...param: Parameters<typeof LINEStruct.SquareService_removeLiveTalkSubscription_args>
    ): Promise<LINETypes.SquareService_removeLiveTalkSubscription_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_removeLiveTalkSubscription_args(...param),
            "removeLiveTalkSubscription",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportLiveTalk(
        ...param: Parameters<typeof LINEStruct.SquareService_reportLiveTalk_args>
    ): Promise<LINETypes.SquareService_reportLiveTalk_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportLiveTalk_args(...param),
            "reportLiveTalk",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportLiveTalkSpeaker(
        ...param: Parameters<typeof LINEStruct.SquareService_reportLiveTalkSpeaker_args>
    ): Promise<LINETypes.SquareService_reportLiveTalkSpeaker_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportLiveTalkSpeaker_args(...param),
            "reportLiveTalkSpeaker",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async requestToListen(
        ...param: Parameters<typeof LINEStruct.SquareService_requestToListen_args>
    ): Promise<LINETypes.SquareService_requestToListen_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_requestToListen_args(...param),
            "requestToListen",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async requestToSpeak(
        ...param: Parameters<typeof LINEStruct.SquareService_requestToSpeak_args>
    ): Promise<LINETypes.SquareService_requestToSpeak_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_requestToSpeak_args(...param),
            "requestToSpeak",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateLiveTalkAttrs(
        ...param: Parameters<typeof LINEStruct.SquareService_updateLiveTalkAttrs_args>
    ): Promise<LINETypes.SquareService_updateLiveTalkAttrs_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateLiveTalkAttrs_args(...param),
            "updateLiveTalkAttrs",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async acquireCallRoute(
        ...param: Parameters<typeof LINEStruct.acquireCallRoute_args>
    ): Promise<LINETypes.acquireCallRoute_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acquireCallRoute_args(...param),
            "acquireCallRoute",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async acquireEncryptedAccessToken(
        ...param: Parameters<typeof LINEStruct.acquireEncryptedAccessToken_args>
    ): Promise<LINETypes.acquireEncryptedAccessToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acquireEncryptedAccessToken_args(...param),
            "acquireEncryptedAccessToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async acquireGroupCallRoute(
        ...param: Parameters<typeof LINEStruct.acquireGroupCallRoute_args>
    ): Promise<LINETypes.acquireGroupCallRoute_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acquireGroupCallRoute_args(...param),
            "acquireGroupCallRoute",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async acquireOACallRoute(
        ...param: Parameters<typeof LINEStruct.acquireOACallRoute_args>
    ): Promise<LINETypes.acquireOACallRoute_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acquireOACallRoute_args(...param),
            "acquireOACallRoute",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async acquirePaidCallRoute(
        ...param: Parameters<typeof LINEStruct.acquirePaidCallRoute_args>
    ): Promise<LINETypes.acquirePaidCallRoute_result["success"]> {
        return await this.client.request.request(
            LINEStruct.acquirePaidCallRoute_args(...param),
            "acquirePaidCallRoute",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async activateSubscription(
        ...param: Parameters<typeof LINEStruct.activateSubscription_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.activateSubscription_args(...param),
            "activateSubscription",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async adTypeOptOutClickEvent(
        ...param: Parameters<typeof LINEStruct.adTypeOptOutClickEvent_args>
    ): Promise<LINETypes.adTypeOptOutClickEvent_result["success"]> {
        return await this.client.request.request(
            LINEStruct.adTypeOptOutClickEvent_args(...param),
            "adTypeOptOutClickEvent",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async addFriendByMid(
        ...param: Parameters<typeof LINEStruct.addFriendByMid_args>
    ): Promise<LINETypes.addFriendByMid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.addFriendByMid_args(...param),
            "addFriendByMid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async addItemToCollection(
        ...param: Parameters<typeof LINEStruct.addItemToCollection_args>
    ): Promise<LINETypes.addItemToCollection_result["success"]> {
        return await this.client.request.request(
            LINEStruct.addItemToCollection_args(...param),
            "addItemToCollection",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async addOaFriend(
        ...param: Parameters<typeof LINEStruct.addOaFriend_args>
    ): Promise<LINETypes.addOaFriend_result["success"]> {
        return await this.client.request.request(
            LINEStruct.addOaFriend_args(...param),
            "addOaFriend",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async addProductToSubscriptionSlot(
        ...param: Parameters<typeof LINEStruct.addProductToSubscriptionSlot_args>
    ): Promise<LINETypes.addProductToSubscriptionSlot_result["success"]> {
        return await this.client.request.request(
            LINEStruct.addProductToSubscriptionSlot_args(...param),
            "addProductToSubscriptionSlot",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async addThemeToSubscriptionSlot(
        ...param: Parameters<typeof LINEStruct.addThemeToSubscriptionSlot_args>
    ): Promise<LINETypes.addThemeToSubscriptionSlot_result["success"]> {
        return await this.client.request.request(
            LINEStruct.addThemeToSubscriptionSlot_args(...param),
            "addThemeToSubscriptionSlot",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async addToFollowBlacklist(
        ...param: Parameters<typeof LINEStruct.addToFollowBlacklist_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.addToFollowBlacklist_args(...param),
            "addToFollowBlacklist",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async agreeToTerms(
        ...param: Parameters<typeof LINEStruct.SquareService_agreeToTerms_args>
    ): Promise<LINETypes.SquareService_agreeToTerms_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_agreeToTerms_args(...param),
            "agreeToTerms",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async approveSquareMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_approveSquareMembers_args>
    ): Promise<LINETypes.SquareService_approveSquareMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_approveSquareMembers_args(...param),
            "approveSquareMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async checkJoinCode(
        ...param: Parameters<typeof LINEStruct.SquareService_checkJoinCode_args>
    ): Promise<LINETypes.SquareService_checkJoinCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_checkJoinCode_args(...param),
            "checkJoinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async createSquareChatAnnouncement(
        ...param: Parameters<typeof LINEStruct.SquareService_createSquareChatAnnouncement_args>
    ): Promise<LINETypes.SquareService_createSquareChatAnnouncement_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_createSquareChatAnnouncement_args(...param),
            "createSquareChatAnnouncement",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async createSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_createSquareChat_args>
    ): Promise<LINETypes.SquareService_createSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_createSquareChat_args(...param),
            "createSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async createSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_createSquare_args>
    ): Promise<LINETypes.SquareService_createSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_createSquare_args(...param),
            "createSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async deleteSquareChatAnnouncement(
        ...param: Parameters<typeof LINEStruct.SquareService_deleteSquareChatAnnouncement_args>
    ): Promise<LINETypes.SquareService_deleteSquareChatAnnouncement_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_deleteSquareChatAnnouncement_args(...param),
            "deleteSquareChatAnnouncement",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async deleteSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_deleteSquareChat_args>
    ): Promise<LINETypes.SquareService_deleteSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_deleteSquareChat_args(...param),
            "deleteSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async deleteSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_deleteSquare_args>
    ): Promise<LINETypes.SquareService_deleteSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_deleteSquare_args(...param),
            "deleteSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async destroyMessage(
        ...param: Parameters<typeof LINEStruct.SquareService_destroyMessage_args>
    ): Promise<LINETypes.SquareService_destroyMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_destroyMessage_args(...param),
            "destroyMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async destroyMessages(
        ...param: Parameters<typeof LINEStruct.SquareService_destroyMessages_args>
    ): Promise<LINETypes.SquareService_destroyMessages_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_destroyMessages_args(...param),
            "destroyMessages",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async fetchMyEvents(
        ...param: Parameters<typeof LINEStruct.SquareService_fetchMyEvents_args>
    ): Promise<LINETypes.SquareService_fetchMyEvents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_fetchMyEvents_args(...param),
            "fetchMyEvents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async fetchSquareChatEvents(
        ...param: Parameters<typeof LINEStruct.SquareService_fetchSquareChatEvents_args>
    ): Promise<LINETypes.SquareService_fetchSquareChatEvents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_fetchSquareChatEvents_args(...param),
            "fetchSquareChatEvents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async findSquareByEmid(
        ...param: Parameters<typeof LINEStruct.SquareService_findSquareByEmid_args>
    ): Promise<LINETypes.SquareService_findSquareByEmid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_findSquareByEmid_args(...param),
            "findSquareByEmid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async findSquareByInvitationTicket(
        ...param: Parameters<typeof LINEStruct.SquareService_findSquareByInvitationTicket_args>
    ): Promise<LINETypes.SquareService_findSquareByInvitationTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_findSquareByInvitationTicket_args(...param),
            "findSquareByInvitationTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async findSquareByInvitationTicketV2(
        ...param: Parameters<typeof LINEStruct.SquareService_findSquareByInvitationTicketV2_args>
    ): Promise<LINETypes.SquareService_findSquareByInvitationTicketV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_findSquareByInvitationTicketV2_args(...param),
            "findSquareByInvitationTicketV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getGoogleAdOptions(
        ...param: Parameters<typeof LINEStruct.SquareService_getGoogleAdOptions_args>
    ): Promise<LINETypes.SquareService_getGoogleAdOptions_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getGoogleAdOptions_args(...param),
            "getGoogleAdOptions",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getInvitationTicketUrl(
        ...param: Parameters<typeof LINEStruct.SquareService_getInvitationTicketUrl_args>
    ): Promise<LINETypes.SquareService_getInvitationTicketUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getInvitationTicketUrl_args(...param),
            "getInvitationTicketUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getJoinableSquareChats(
        ...param: Parameters<typeof LINEStruct.SquareService_getJoinableSquareChats_args>
    ): Promise<LINETypes.SquareService_getJoinableSquareChats_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getJoinableSquareChats_args(...param),
            "getJoinableSquareChats",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getJoinedSquareChats(
        ...param: Parameters<typeof LINEStruct.SquareService_getJoinedSquareChats_args>
    ): Promise<LINETypes.SquareService_getJoinedSquareChats_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getJoinedSquareChats_args(...param),
            "getJoinedSquareChats",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getJoinedSquares(
        ...param: Parameters<typeof LINEStruct.SquareService_getJoinedSquares_args>
    ): Promise<LINETypes.SquareService_getJoinedSquares_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getJoinedSquares_args(...param),
            "getJoinedSquares",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getMessageReactions(
        ...param: Parameters<typeof LINEStruct.SquareService_getMessageReactions_args>
    ): Promise<LINETypes.SquareService_getMessageReactions_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getMessageReactions_args(...param),
            "getMessageReactions",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getNoteStatus(
        ...param: Parameters<typeof LINEStruct.SquareService_getNoteStatus_args>
    ): Promise<LINETypes.SquareService_getNoteStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getNoteStatus_args(...param),
            "getNoteStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getPopularKeywords(
        ...param: Parameters<typeof LINEStruct.SquareService_getPopularKeywords_args>
    ): Promise<LINETypes.SquareService_getPopularKeywords_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getPopularKeywords_args(...param),
            "getPopularKeywords",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareAuthorities(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareAuthorities_args>
    ): Promise<LINETypes.SquareService_getSquareAuthorities_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareAuthorities_args(...param),
            "getSquareAuthorities",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareAuthority(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareAuthority_args>
    ): Promise<LINETypes.SquareService_getSquareAuthority_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareAuthority_args(...param),
            "getSquareAuthority",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getCategories(
        ...param: Parameters<typeof LINEStruct.SquareService_getCategories_args>
    ): Promise<LINETypes.SquareService_getCategories_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getCategories_args(...param),
            "getCategories",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChatAnnouncements(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChatAnnouncements_args>
    ): Promise<LINETypes.SquareService_getSquareChatAnnouncements_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChatAnnouncements_args(...param),
            "getSquareChatAnnouncements",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChatEmid(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChatEmid_args>
    ): Promise<LINETypes.SquareService_getSquareChatEmid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChatEmid_args(...param),
            "getSquareChatEmid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChatFeatureSet(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChatFeatureSet_args>
    ): Promise<LINETypes.SquareService_getSquareChatFeatureSet_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChatFeatureSet_args(...param),
            "getSquareChatFeatureSet",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChatMember(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChatMember_args>
    ): Promise<LINETypes.SquareService_getSquareChatMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChatMember_args(...param),
            "getSquareChatMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChatMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChatMembers_args>
    ): Promise<LINETypes.SquareService_getSquareChatMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChatMembers_args(...param),
            "getSquareChatMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChat_args>
    ): Promise<LINETypes.SquareService_getSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChat_args(...param),
            "getSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareChatStatus(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareChatStatus_args>
    ): Promise<LINETypes.SquareService_getSquareChatStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareChatStatus_args(...param),
            "getSquareChatStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareEmid(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareEmid_args>
    ): Promise<LINETypes.SquareService_getSquareEmid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareEmid_args(...param),
            "getSquareEmid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareFeatureSet(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareFeatureSet_args>
    ): Promise<LINETypes.SquareService_getSquareFeatureSet_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareFeatureSet_args(...param),
            "getSquareFeatureSet",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareMemberRelation(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareMemberRelation_args>
    ): Promise<LINETypes.SquareService_getSquareMemberRelation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareMemberRelation_args(...param),
            "getSquareMemberRelation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareMemberRelations(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareMemberRelations_args>
    ): Promise<LINETypes.SquareService_getSquareMemberRelations_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareMemberRelations_args(...param),
            "getSquareMemberRelations",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareMember(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareMember_args>
    ): Promise<LINETypes.SquareService_getSquareMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareMember_args(...param),
            "getSquareMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareMembersBySquare(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareMembersBySquare_args>
    ): Promise<LINETypes.SquareService_getSquareMembersBySquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareMembersBySquare_args(...param),
            "getSquareMembersBySquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareMembers_args>
    ): Promise<LINETypes.SquareService_getSquareMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareMembers_args(...param),
            "getSquareMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquare_args>
    ): Promise<LINETypes.SquareService_getSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquare_args(...param),
            "getSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareStatus(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareStatus_args>
    ): Promise<LINETypes.SquareService_getSquareStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareStatus_args(...param),
            "getSquareStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareThreadMid(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareThreadMid_args>
    ): Promise<LINETypes.SquareService_getSquareThreadMid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareThreadMid_args(...param),
            "getSquareThreadMid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getSquareThread(
        ...param: Parameters<typeof LINEStruct.SquareService_getSquareThread_args>
    ): Promise<LINETypes.SquareService_getSquareThread_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getSquareThread_args(...param),
            "getSquareThread",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async getUserSettings(
        ...param: Parameters<typeof LINEStruct.SquareService_getUserSettings_args>
    ): Promise<LINETypes.SquareService_getUserSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_getUserSettings_args(...param),
            "getUserSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async hideSquareMemberContents(
        ...param: Parameters<typeof LINEStruct.SquareService_hideSquareMemberContents_args>
    ): Promise<LINETypes.SquareService_hideSquareMemberContents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_hideSquareMemberContents_args(...param),
            "hideSquareMemberContents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async inviteIntoSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_inviteIntoSquareChat_args>
    ): Promise<LINETypes.SquareService_inviteIntoSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_inviteIntoSquareChat_args(...param),
            "inviteIntoSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async inviteToSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_inviteToSquare_args>
    ): Promise<LINETypes.SquareService_inviteToSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_inviteToSquare_args(...param),
            "inviteToSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async joinSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_joinSquareChat_args>
    ): Promise<LINETypes.SquareService_joinSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_joinSquareChat_args(...param),
            "joinSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async joinSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_joinSquare_args>
    ): Promise<LINETypes.SquareService_joinSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_joinSquare_args(...param),
            "joinSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async joinSquareThread(
        ...param: Parameters<typeof LINEStruct.SquareService_joinSquareThread_args>
    ): Promise<LINETypes.SquareService_joinSquareThread_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_joinSquareThread_args(...param),
            "joinSquareThread",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async leaveSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_leaveSquareChat_args>
    ): Promise<LINETypes.SquareService_leaveSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_leaveSquareChat_args(...param),
            "leaveSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async leaveSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_leaveSquare_args>
    ): Promise<LINETypes.SquareService_leaveSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_leaveSquare_args(...param),
            "leaveSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async leaveSquareThread(
        ...param: Parameters<typeof LINEStruct.SquareService_leaveSquareThread_args>
    ): Promise<LINETypes.SquareService_leaveSquareThread_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_leaveSquareThread_args(...param),
            "leaveSquareThread",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async manualRepair(
        ...param: Parameters<typeof LINEStruct.SquareService_manualRepair_args>
    ): Promise<LINETypes.SquareService_manualRepair_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_manualRepair_args(...param),
            "manualRepair",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async markAsRead(
        ...param: Parameters<typeof LINEStruct.SquareService_markAsRead_args>
    ): Promise<LINETypes.SquareService_markAsRead_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_markAsRead_args(...param),
            "markAsRead",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async markChatsAsRead(
        ...param: Parameters<typeof LINEStruct.SquareService_markChatsAsRead_args>
    ): Promise<LINETypes.SquareService_markChatsAsRead_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_markChatsAsRead_args(...param),
            "markChatsAsRead",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async markThreadsAsRead(
        ...param: Parameters<typeof LINEStruct.SquareService_markThreadsAsRead_args>
    ): Promise<LINETypes.SquareService_markThreadsAsRead_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_markThreadsAsRead_args(...param),
            "markThreadsAsRead",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reactToMessage(
        ...param: Parameters<typeof LINEStruct.SquareService_reactToMessage_args>
    ): Promise<LINETypes.SquareService_reactToMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reactToMessage_args(...param),
            "reactToMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async refreshSubscriptions(
        ...param: Parameters<typeof LINEStruct.SquareService_refreshSubscriptions_args>
    ): Promise<LINETypes.SquareService_refreshSubscriptions_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_refreshSubscriptions_args(...param),
            "refreshSubscriptions",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async rejectSquareMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_rejectSquareMembers_args>
    ): Promise<LINETypes.SquareService_rejectSquareMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_rejectSquareMembers_args(...param),
            "rejectSquareMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async removeSubscriptions(
        ...param: Parameters<typeof LINEStruct.SquareService_removeSubscriptions_args>
    ): Promise<LINETypes.SquareService_removeSubscriptions_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_removeSubscriptions_args(...param),
            "removeSubscriptions",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportMessageSummary(
        ...param: Parameters<typeof LINEStruct.SquareService_reportMessageSummary_args>
    ): Promise<LINETypes.SquareService_reportMessageSummary_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportMessageSummary_args(...param),
            "reportMessageSummary",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_reportSquareChat_args>
    ): Promise<LINETypes.SquareService_reportSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportSquareChat_args(...param),
            "reportSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportSquareMember(
        ...param: Parameters<typeof LINEStruct.SquareService_reportSquareMember_args>
    ): Promise<LINETypes.SquareService_reportSquareMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportSquareMember_args(...param),
            "reportSquareMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportSquareMessage(
        ...param: Parameters<typeof LINEStruct.SquareService_reportSquareMessage_args>
    ): Promise<LINETypes.SquareService_reportSquareMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportSquareMessage_args(...param),
            "reportSquareMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async reportSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_reportSquare_args>
    ): Promise<LINETypes.SquareService_reportSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_reportSquare_args(...param),
            "reportSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async searchSquareChatMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_searchSquareChatMembers_args>
    ): Promise<LINETypes.SquareService_searchSquareChatMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_searchSquareChatMembers_args(...param),
            "searchSquareChatMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async searchSquareChatMentionables(
        ...param: Parameters<typeof LINEStruct.SquareService_searchSquareChatMentionables_args>
    ): Promise<LINETypes.SquareService_searchSquareChatMentionables_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_searchSquareChatMentionables_args(...param),
            "searchSquareChatMentionables",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async searchSquareMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_searchSquareMembers_args>
    ): Promise<LINETypes.SquareService_searchSquareMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_searchSquareMembers_args(...param),
            "searchSquareMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async searchSquares(
        ...param: Parameters<typeof LINEStruct.SquareService_searchSquares_args>
    ): Promise<LINETypes.SquareService_searchSquares_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_searchSquares_args(...param),
            "searchSquares",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async sendMessage(
        ...param: Parameters<typeof LINEStruct.SquareService_sendMessage_args>
    ): Promise<LINETypes.SquareService_sendMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_sendMessage_args(...param),
            "sendMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async sendSquareThreadMessage(
        ...param: Parameters<typeof LINEStruct.SquareService_sendSquareThreadMessage_args>
    ): Promise<LINETypes.SquareService_sendSquareThreadMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_sendSquareThreadMessage_args(...param),
            "sendSquareThreadMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async syncSquareMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_syncSquareMembers_args>
    ): Promise<LINETypes.SquareService_syncSquareMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_syncSquareMembers_args(...param),
            "syncSquareMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async unhideSquareMemberContents(
        ...param: Parameters<typeof LINEStruct.SquareService_unhideSquareMemberContents_args>
    ): Promise<LINETypes.SquareService_unhideSquareMemberContents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_unhideSquareMemberContents_args(...param),
            "unhideSquareMemberContents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async unsendMessage(
        ...param: Parameters<typeof LINEStruct.SquareService_unsendMessage_args>
    ): Promise<LINETypes.SquareService_unsendMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_unsendMessage_args(...param),
            "unsendMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareAuthority(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareAuthority_args>
    ): Promise<LINETypes.SquareService_updateSquareAuthority_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareAuthority_args(...param),
            "updateSquareAuthority",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareChatMember(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareChatMember_args>
    ): Promise<LINETypes.SquareService_updateSquareChatMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareChatMember_args(...param),
            "updateSquareChatMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareChat(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareChat_args>
    ): Promise<LINETypes.SquareService_updateSquareChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareChat_args(...param),
            "updateSquareChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareFeatureSet(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareFeatureSet_args>
    ): Promise<LINETypes.SquareService_updateSquareFeatureSet_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareFeatureSet_args(...param),
            "updateSquareFeatureSet",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareMemberRelation(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareMemberRelation_args>
    ): Promise<LINETypes.SquareService_updateSquareMemberRelation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareMemberRelation_args(...param),
            "updateSquareMemberRelation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareMember(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareMember_args>
    ): Promise<LINETypes.SquareService_updateSquareMember_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareMember_args(...param),
            "updateSquareMember",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquareMembers(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquareMembers_args>
    ): Promise<LINETypes.SquareService_updateSquareMembers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquareMembers_args(...param),
            "updateSquareMembers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateSquare(
        ...param: Parameters<typeof LINEStruct.SquareService_updateSquare_args>
    ): Promise<LINETypes.SquareService_updateSquare_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateSquare_args(...param),
            "updateSquare",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    // SquareService
    async updateUserSettings(
        ...param: Parameters<typeof LINEStruct.SquareService_updateUserSettings_args>
    ): Promise<LINETypes.SquareService_updateUserSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.SquareService_updateUserSettings_args(...param),
            "updateUserSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async approveChannelAndIssueChannelToken(
        ...param: Parameters<typeof LINEStruct.approveChannelAndIssueChannelToken_args>
    ): Promise<LINETypes.approveChannelAndIssueChannelToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.approveChannelAndIssueChannelToken_args(...param),
            "approveChannelAndIssueChannelToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async authenticateUsingBankAccountEx(
        ...param: Parameters<typeof LINEStruct.authenticateUsingBankAccountEx_args>
    ): Promise<LINETypes.authenticateUsingBankAccountEx_result["success"]> {
        return await this.client.request.request(
            LINEStruct.authenticateUsingBankAccountEx_args(...param),
            "authenticateUsingBankAccountEx",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async authenticateWithPaak(
        ...param: Parameters<typeof LINEStruct.authenticateWithPaak_args>
    ): Promise<LINETypes.authenticateWithPaak_result["success"]> {
        return await this.client.request.request(
            LINEStruct.authenticateWithPaak_args(...param),
            "authenticateWithPaak",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async blockContact(
        ...param: Parameters<typeof LINEStruct.blockContact_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.blockContact_args(...param),
            "blockContact",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async blockRecommendation(
        ...param: Parameters<typeof LINEStruct.blockRecommendation_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.blockRecommendation_args(...param),
            "blockRecommendation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async bulkFollow(
        ...param: Parameters<typeof LINEStruct.bulkFollow_args>
    ): Promise<LINETypes.bulkFollow_result["success"]> {
        return await this.client.request.request(
            LINEStruct.bulkFollow_args(...param),
            "bulkFollow",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async bulkGetSetting(
        ...param: Parameters<typeof LINEStruct.bulkGetSetting_args>
    ): Promise<LINETypes.bulkGetSetting_result["success"]> {
        return await this.client.request.request(
            LINEStruct.bulkGetSetting_args(...param),
            "bulkGetSetting",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async bulkSetSetting(
        ...param: Parameters<typeof LINEStruct.bulkSetSetting_args>
    ): Promise<LINETypes.bulkSetSetting_result["success"]> {
        return await this.client.request.request(
            LINEStruct.bulkSetSetting_args(...param),
            "bulkSetSetting",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async buyMustbuyProduct(
        ...param: Parameters<typeof LINEStruct.buyMustbuyProduct_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.buyMustbuyProduct_args(...param),
            "buyMustbuyProduct",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async canCreateCombinationSticker(
        ...param: Parameters<typeof LINEStruct.canCreateCombinationSticker_args>
    ): Promise<LINETypes.canCreateCombinationSticker_result["success"]> {
        return await this.client.request.request(
            LINEStruct.canCreateCombinationSticker_args(...param),
            "canCreateCombinationSticker",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async canReceivePresent(
        ...param: Parameters<typeof LINEStruct.canReceivePresent_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.canReceivePresent_args(...param),
            "canReceivePresent",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async cancelChatInvitation(
        ...param: Parameters<typeof LINEStruct.cancelChatInvitation_args>
    ): Promise<LINETypes.cancelChatInvitation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.cancelChatInvitation_args(...param),
            "cancelChatInvitation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async cancelPaakAuth(
        ...param: Parameters<typeof LINEStruct.cancelPaakAuth_args>
    ): Promise<LINETypes.cancelPaakAuth_result["success"]> {
        return await this.client.request.request(
            LINEStruct.cancelPaakAuth_args(...param),
            "cancelPaakAuth",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async cancelPaakAuthentication(
        ...param: Parameters<typeof LINEStruct.cancelPaakAuthentication_args>
    ): Promise<LINETypes.cancelPaakAuthentication_result["success"]> {
        return await this.client.request.request(
            LINEStruct.cancelPaakAuthentication_args(...param),
            "cancelPaakAuthentication",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async cancelPinCode(
        ...param: Parameters<typeof LINEStruct.cancelPinCode_args>
    ): Promise<LINETypes.cancelPinCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.cancelPinCode_args(...param),
            "cancelPinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async cancelReaction(
        ...param: Parameters<typeof LINEStruct.cancelReaction_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.cancelReaction_args(...param),
            "cancelReaction",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async changeSubscription(
        ...param: Parameters<typeof LINEStruct.changeSubscription_args>
    ): Promise<LINETypes.changeSubscription_result["success"]> {
        return await this.client.request.request(
            LINEStruct.changeSubscription_args(...param),
            "changeSubscription",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async changeVerificationMethod(
        ...param: Parameters<typeof LINEStruct.changeVerificationMethod_args>
    ): Promise<LINETypes.changeVerificationMethod_result["success"]> {
        return await this.client.request.request(
            LINEStruct.changeVerificationMethod_args(...param),
            "changeVerificationMethod",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkCanUnregisterEx(
        ...param: Parameters<typeof LINEStruct.checkCanUnregisterEx_args>
    ): Promise<LINETypes.checkCanUnregisterEx_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkCanUnregisterEx_args(...param),
            "checkCanUnregisterEx",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkEmailAssigned(
        ...param: Parameters<typeof LINEStruct.checkEmailAssigned_args>
    ): Promise<LINETypes.checkEmailAssigned_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkEmailAssigned_args(...param),
            "checkEmailAssigned",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkIfEncryptedE2EEKeyReceived(
        ...param: Parameters<typeof LINEStruct.checkIfEncryptedE2EEKeyReceived_args>
    ): Promise<LINETypes.checkIfEncryptedE2EEKeyReceived_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkIfEncryptedE2EEKeyReceived_args(...param),
            "checkIfEncryptedE2EEKeyReceived",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkIfPasswordSetVerificationEmailVerified(
        ...param: Parameters<typeof LINEStruct.checkIfPasswordSetVerificationEmailVerified_args>
    ): Promise<LINETypes.checkIfPasswordSetVerificationEmailVerified_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkIfPasswordSetVerificationEmailVerified_args(...param),
            "checkIfPasswordSetVerificationEmailVerified",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkIfPhonePinCodeMsgVerified(
        ...param: Parameters<typeof LINEStruct.checkIfPhonePinCodeMsgVerified_args>
    ): Promise<LINETypes.checkIfPhonePinCodeMsgVerified_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkIfPhonePinCodeMsgVerified_args(...param),
            "checkIfPhonePinCodeMsgVerified",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkOperationTimeEx(
        ...param: Parameters<typeof LINEStruct.checkOperationTimeEx_args>
    ): Promise<LINETypes.checkOperationTimeEx_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkOperationTimeEx_args(...param),
            "checkOperationTimeEx",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkUserAgeAfterApprovalWithDocomoV2(
        ...param: Parameters<typeof LINEStruct.checkUserAgeAfterApprovalWithDocomoV2_args>
    ): Promise<LINETypes.checkUserAgeAfterApprovalWithDocomoV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkUserAgeAfterApprovalWithDocomoV2_args(...param),
            "checkUserAgeAfterApprovalWithDocomoV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkUserAgeWithDocomoV2(
        ...param: Parameters<typeof LINEStruct.checkUserAgeWithDocomoV2_args>
    ): Promise<LINETypes.checkUserAgeWithDocomoV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkUserAgeWithDocomoV2_args(...param),
            "checkUserAgeWithDocomoV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async checkUserAge(
        ...param: Parameters<typeof LINEStruct.checkUserAge_args>
    ): Promise<LINETypes.checkUserAge_result["success"]> {
        return await this.client.request.request(
            LINEStruct.checkUserAge_args(...param),
            "checkUserAge",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async clearRingtone(
        ...param: Parameters<typeof LINEStruct.clearRingtone_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.clearRingtone_args(...param),
            "clearRingtone",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async confirmIdentifier(
        ...param: Parameters<typeof LINEStruct.confirmIdentifier_args>
    ): Promise<LINETypes.confirmIdentifier_result["success"]> {
        return await this.client.request.request(
            LINEStruct.confirmIdentifier_args(...param),
            "confirmIdentifier",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async connectEapAccount(
        ...param: Parameters<typeof LINEStruct.connectEapAccount_args>
    ): Promise<LINETypes.connectEapAccount_result["success"]> {
        return await this.client.request.request(
            LINEStruct.connectEapAccount_args(...param),
            "connectEapAccount",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createChatRoomAnnouncement(
        ...param: Parameters<typeof LINEStruct.createChatRoomAnnouncement_args>
    ): Promise<LINETypes.createChatRoomAnnouncement_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createChatRoomAnnouncement_args(...param),
            "createChatRoomAnnouncement",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createChat(
        ...param: Parameters<typeof LINEStruct.createChat_args>
    ): Promise<LINETypes.createChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createChat_args(...param),
            "createChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createCollectionForUser(
        ...param: Parameters<typeof LINEStruct.createCollectionForUser_args>
    ): Promise<LINETypes.createCollectionForUser_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createCollectionForUser_args(...param),
            "createCollectionForUser",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createCombinationSticker(
        ...param: Parameters<typeof LINEStruct.createCombinationSticker_args>
    ): Promise<LINETypes.createCombinationSticker_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createCombinationSticker_args(...param),
            "createCombinationSticker",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createE2EEKeyBackupEnforced(
        ...param: Parameters<typeof LINEStruct.createE2EEKeyBackupEnforced_args>
    ): Promise<LINETypes.createE2EEKeyBackupEnforced_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createE2EEKeyBackupEnforced_args(...param),
            "createE2EEKeyBackupEnforced",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createGroupCallUrl(
        ...param: Parameters<typeof LINEStruct.createGroupCallUrl_args>
    ): Promise<LINETypes.createGroupCallUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createGroupCallUrl_args(...param),
            "createGroupCallUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createLifetimeKeyBackup(
        ...param: Parameters<typeof LINEStruct.createLifetimeKeyBackup_args>
    ): Promise<LINETypes.createLifetimeKeyBackup_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createLifetimeKeyBackup_args(...param),
            "createLifetimeKeyBackup",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createMultiProfile(
        ...param: Parameters<typeof LINEStruct.createMultiProfile_args>
    ): Promise<LINETypes.createMultiProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createMultiProfile_args(...param),
            "createMultiProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createRoomV2(
        ...param: Parameters<typeof LINEStruct.createRoomV2_args>
    ): Promise<LINETypes.createRoomV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createRoomV2_args(...param),
            "createRoomV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async createSession(
        ...param: Parameters<typeof LINEStruct.createSession_args>
    ): Promise<LINETypes.createSession_result["success"]> {
        return await this.client.request.request(
            LINEStruct.createSession_args(...param),
            "createSession",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async decryptFollowEMid(
        ...param: Parameters<typeof LINEStruct.decryptFollowEMid_args>
    ): Promise<LINETypes.decryptFollowEMid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.decryptFollowEMid_args(...param),
            "decryptFollowEMid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deleteE2EEKeyBackup(
        ...param: Parameters<typeof LINEStruct.deleteE2EEKeyBackup_args>
    ): Promise<LINETypes.deleteE2EEKeyBackup_result["success"]> {
        return await this.client.request.request(
            LINEStruct.deleteE2EEKeyBackup_args(...param),
            "deleteE2EEKeyBackup",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deleteGroupCallUrl(
        ...param: Parameters<typeof LINEStruct.deleteGroupCallUrl_args>
    ): Promise<LINETypes.deleteGroupCallUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.deleteGroupCallUrl_args(...param),
            "deleteGroupCallUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deleteMultiProfile(
        ...param: Parameters<typeof LINEStruct.deleteMultiProfile_args>
    ): Promise<LINETypes.deleteMultiProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.deleteMultiProfile_args(...param),
            "deleteMultiProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deleteOtherFromChat(
        ...param: Parameters<typeof LINEStruct.deleteOtherFromChat_args>
    ): Promise<LINETypes.deleteOtherFromChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.deleteOtherFromChat_args(...param),
            "deleteOtherFromChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deletePrimaryCredential(
        ...param: Parameters<typeof LINEStruct.deletePrimaryCredential_args>
    ): Promise<LINETypes.deletePrimaryCredential_result["success"]> {
        return await this.client.request.request(
            LINEStruct.deletePrimaryCredential_args(...param),
            "deletePrimaryCredential",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deleteSafetyStatus(
        ...param: Parameters<typeof LINEStruct.deleteSafetyStatus_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.deleteSafetyStatus_args(...param),
            "deleteSafetyStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async deleteSelfFromChat(
        ...param: Parameters<typeof LINEStruct.deleteSelfFromChat_args>
    ): Promise<LINETypes.deleteSelfFromChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.deleteSelfFromChat_args(...param),
            "deleteSelfFromChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async determineMediaMessageFlow(
        ...param: Parameters<typeof LINEStruct.determineMediaMessageFlow_args>
    ): Promise<LINETypes.determineMediaMessageFlow_result["success"]> {
        return await this.client.request.request(
            LINEStruct.determineMediaMessageFlow_args(...param),
            "determineMediaMessageFlow",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async disconnectEapAccount(
        ...param: Parameters<typeof LINEStruct.disconnectEapAccount_args>
    ): Promise<LINETypes.disconnectEapAccount_result["success"]> {
        return await this.client.request.request(
            LINEStruct.disconnectEapAccount_args(...param),
            "disconnectEapAccount",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async editItemsInCollection(
        ...param: Parameters<typeof LINEStruct.editItemsInCollection_args>
    ): Promise<LINETypes.editItemsInCollection_result["success"]> {
        return await this.client.request.request(
            LINEStruct.editItemsInCollection_args(...param),
            "editItemsInCollection",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async enablePointForOneTimeKey(
        ...param: Parameters<typeof LINEStruct.enablePointForOneTimeKey_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.enablePointForOneTimeKey_args(...param),
            "enablePointForOneTimeKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async establishE2EESession(
        ...param: Parameters<typeof LINEStruct.establishE2EESession_args>
    ): Promise<LINETypes.establishE2EESession_result["success"]> {
        return await this.client.request.request(
            LINEStruct.establishE2EESession_args(...param),
            "establishE2EESession",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async existPinCode(
        ...param: Parameters<typeof LINEStruct.existPinCode_args>
    ): Promise<LINETypes.existPinCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.existPinCode_args(...param),
            "existPinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async fetchOperations(
        ...param: Parameters<typeof LINEStruct.fetchOperations_args>
    ): Promise<LINETypes.fetchOperations_result["success"]> {
        return await this.client.request.request(
            LINEStruct.fetchOperations_args(...param),
            "fetchOperations",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async fetchPhonePinCodeMsg(
        ...param: Parameters<typeof LINEStruct.fetchPhonePinCodeMsg_args>
    ): Promise<LINETypes.fetchPhonePinCodeMsg_result["success"]> {
        return await this.client.request.request(
            LINEStruct.fetchPhonePinCodeMsg_args(...param),
            "fetchPhonePinCodeMsg",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async findBuddyContactsByQuery(
        ...param: Parameters<typeof LINEStruct.findBuddyContactsByQuery_args>
    ): Promise<LINETypes.findBuddyContactsByQuery_result["success"]> {
        return await this.client.request.request(
            LINEStruct.findBuddyContactsByQuery_args(...param),
            "findBuddyContactsByQuery",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async findChatByTicket(
        ...param: Parameters<typeof LINEStruct.findChatByTicket_args>
    ): Promise<LINETypes.findChatByTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.findChatByTicket_args(...param),
            "findChatByTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async findContactByUserTicket(
        ...param: Parameters<typeof LINEStruct.findContactByUserTicket_args>
    ): Promise<LINETypes.findContactByUserTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.findContactByUserTicket_args(...param),
            "findContactByUserTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async findContactByUserid(
        ...param: Parameters<typeof LINEStruct.findContactByUserid_args>
    ): Promise<LINETypes.findContactByUserid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.findContactByUserid_args(...param),
            "findContactByUserid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async findContactsByPhone(
        ...param: Parameters<typeof LINEStruct.findContactsByPhone_args>
    ): Promise<LINETypes.findContactsByPhone_result["success"]> {
        return await this.client.request.request(
            LINEStruct.findContactsByPhone_args(...param),
            "findContactsByPhone",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async finishUpdateVerification(
        ...param: Parameters<typeof LINEStruct.finishUpdateVerification_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.finishUpdateVerification_args(...param),
            "finishUpdateVerification",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async follow(
        ...param: Parameters<typeof LINEStruct.follow_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.follow_args(...param),
            "follow",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async generateUserTicket(
        ...param: Parameters<typeof LINEStruct.generateUserTicket_args>
    ): Promise<LINETypes.generateUserTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.generateUserTicket_args(...param),
            "generateUserTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAccessToken(
        ...param: Parameters<typeof LINEStruct.getAccessToken_args>
    ): Promise<LINETypes.getAccessToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAccessToken_args(...param),
            "getAccessToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAccountBalanceAsync(
        ...param: Parameters<typeof LINEStruct.getAccountBalanceAsync_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.getAccountBalanceAsync_args(...param),
            "getAccountBalanceAsync",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAcctVerifMethod(
        ...param: Parameters<typeof LINEStruct.getAcctVerifMethod_args>
    ): Promise<LINETypes.getAcctVerifMethod_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAcctVerifMethod_args(...param),
            "getAcctVerifMethod",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAllChatMids(
        ...param: Parameters<typeof LINEStruct.getAllChatMids_args>
    ): Promise<LINETypes.getAllChatMids_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAllChatMids_args(...param),
            "getAllChatMids",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAllContactIds(
        ...param: Parameters<typeof LINEStruct.getAllContactIds_args>
    ): Promise<LINETypes.getAllContactIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAllContactIds_args(...param),
            "getAllContactIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAllowedRegistrationMethod(
        ...param: Parameters<typeof LINEStruct.getAllowedRegistrationMethod_args>
    ): Promise<LINETypes.getAllowedRegistrationMethod_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAllowedRegistrationMethod_args(...param),
            "getAllowedRegistrationMethod",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getApprovedChannels(
        ...param: Parameters<typeof LINEStruct.getApprovedChannels_args>
    ): Promise<LINETypes.getApprovedChannels_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getApprovedChannels_args(...param),
            "getApprovedChannels",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAssertionChallenge(
        ...param: Parameters<typeof LINEStruct.getAssertionChallenge_args>
    ): Promise<LINETypes.getAssertionChallenge_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAssertionChallenge_args(...param),
            "getAssertionChallenge",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAttestationChallenge(
        ...param: Parameters<typeof LINEStruct.getAttestationChallenge_args>
    ): Promise<LINETypes.getAttestationChallenge_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAttestationChallenge_args(...param),
            "getAttestationChallenge",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAuthRSAKey(
        ...param: Parameters<typeof LINEStruct.getAuthRSAKey_args>
    ): Promise<LINETypes.getAuthRSAKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAuthRSAKey_args(...param),
            "getAuthRSAKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAuthorsLatestProducts(
        ...param: Parameters<typeof LINEStruct.getAuthorsLatestProducts_args>
    ): Promise<LINETypes.getAuthorsLatestProducts_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAuthorsLatestProducts_args(...param),
            "getAuthorsLatestProducts",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getAutoSuggestionShowcase(
        ...param: Parameters<typeof LINEStruct.getAutoSuggestionShowcase_args>
    ): Promise<LINETypes.getAutoSuggestionShowcase_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getAutoSuggestionShowcase_args(...param),
            "getAutoSuggestionShowcase",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBalanceSummaryV2(
        ...param: Parameters<typeof LINEStruct.getBalanceSummaryV2_args>
    ): Promise<LINETypes.getBalanceSummaryV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBalanceSummaryV2_args(...param),
            "getBalanceSummaryV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBalanceSummaryV4WithPayV3(
        ...param: Parameters<typeof LINEStruct.getBalanceSummaryV4WithPayV3_args>
    ): Promise<LINETypes.getBalanceSummaryV4WithPayV3_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBalanceSummaryV4WithPayV3_args(...param),
            "getBalanceSummaryV4WithPayV3",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBalance(
        ...param: Parameters<typeof LINEStruct.getBalance_args>
    ): Promise<LINETypes.getBalance_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBalance_args(...param),
            "getBalance",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBankBranches(
        ...param: Parameters<typeof LINEStruct.getBankBranches_args>
    ): Promise<LINETypes.getBankBranches_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBankBranches_args(...param),
            "getBankBranches",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBanners(
        ...param: Parameters<typeof LINEStruct.getBanners_args>
    ): Promise<LINETypes.getBanners_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBanners_args(...param),
            "getBanners",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBirthdayEffect(
        ...param: Parameters<typeof LINEStruct.getBirthdayEffect_args>
    ): Promise<LINETypes.getBirthdayEffect_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBirthdayEffect_args(...param),
            "getBirthdayEffect",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBleDevice(
        ...param: Parameters<typeof LINEStruct.getBleDevice_args>
    ): Promise<LINETypes.getBleDevice_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBleDevice_args(...param),
            "getBleDevice",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBlockedContactIds(
        ...param: Parameters<typeof LINEStruct.getBlockedContactIds_args>
    ): Promise<LINETypes.getBlockedContactIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBlockedContactIds_args(...param),
            "getBlockedContactIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBlockedRecommendationIds(
        ...param: Parameters<typeof LINEStruct.getBlockedRecommendationIds_args>
    ): Promise<LINETypes.getBlockedRecommendationIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBlockedRecommendationIds_args(...param),
            "getBlockedRecommendationIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBrowsingHistory(
        ...param: Parameters<typeof LINEStruct.getBrowsingHistory_args>
    ): Promise<LINETypes.getBrowsingHistory_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBrowsingHistory_args(...param),
            "getBrowsingHistory",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBuddyChatBarV2(
        ...param: Parameters<typeof LINEStruct.getBuddyChatBarV2_args>
    ): Promise<LINETypes.getBuddyChatBarV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBuddyChatBarV2_args(...param),
            "getBuddyChatBarV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBuddyDetailWithPersonal(
        ...param: Parameters<typeof LINEStruct.getBuddyDetailWithPersonal_args>
    ): Promise<LINETypes.getBuddyDetailWithPersonal_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBuddyDetailWithPersonal_args(...param),
            "getBuddyDetailWithPersonal",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBuddyDetail(
        ...param: Parameters<typeof LINEStruct.getBuddyDetail_args>
    ): Promise<LINETypes.getBuddyDetail_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBuddyDetail_args(...param),
            "getBuddyDetail",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBuddyLive(
        ...param: Parameters<typeof LINEStruct.getBuddyLive_args>
    ): Promise<LINETypes.getBuddyLive_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBuddyLive_args(...param),
            "getBuddyLive",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBuddyOnAir(
        ...param: Parameters<typeof LINEStruct.getBuddyOnAir_args>
    ): Promise<LINETypes.getBuddyOnAir_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBuddyOnAir_args(...param),
            "getBuddyOnAir",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getBuddyStatusBarV2(
        ...param: Parameters<typeof LINEStruct.getBuddyStatusBarV2_args>
    ): Promise<LINETypes.getBuddyStatusBarV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getBuddyStatusBarV2_args(...param),
            "getBuddyStatusBarV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCallStatus(
        ...param: Parameters<typeof LINEStruct.getCallStatus_args>
    ): Promise<LINETypes.getCallStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCallStatus_args(...param),
            "getCallStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCampaign(
        ...param: Parameters<typeof LINEStruct.getCampaign_args>
    ): Promise<LINETypes.getCampaign_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCampaign_args(...param),
            "getCampaign",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChallengeForPaakAuth(
        ...param: Parameters<typeof LINEStruct.getChallengeForPaakAuth_args>
    ): Promise<LINETypes.getChallengeForPaakAuth_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChallengeForPaakAuth_args(...param),
            "getChallengeForPaakAuth",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChallengeForPrimaryReg(
        ...param: Parameters<typeof LINEStruct.getChallengeForPrimaryReg_args>
    ): Promise<LINETypes.getChallengeForPrimaryReg_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChallengeForPrimaryReg_args(...param),
            "getChallengeForPrimaryReg",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChannelContext(
        ...param: Parameters<typeof LINEStruct.getChannelContext_args>
    ): Promise<LINETypes.getChannelContext_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChannelContext_args(...param),
            "getChannelContext",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChannelInfo(
        ...param: Parameters<typeof LINEStruct.getChannelInfo_args>
    ): Promise<LINETypes.getChannelInfo_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChannelInfo_args(...param),
            "getChannelInfo",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChannelNotificationSettings(
        ...param: Parameters<typeof LINEStruct.getChannelNotificationSettings_args>
    ): Promise<LINETypes.getChannelNotificationSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChannelNotificationSettings_args(...param),
            "getChannelNotificationSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChatEffectMetaList(
        ...param: Parameters<typeof LINEStruct.getChatEffectMetaList_args>
    ): Promise<LINETypes.getChatEffectMetaList_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChatEffectMetaList_args(...param),
            "getChatEffectMetaList",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChatRoomAnnouncementsBulk(
        ...param: Parameters<typeof LINEStruct.getChatRoomAnnouncementsBulk_args>
    ): Promise<LINETypes.getChatRoomAnnouncementsBulk_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChatRoomAnnouncementsBulk_args(...param),
            "getChatRoomAnnouncementsBulk",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChatRoomAnnouncements(
        ...param: Parameters<typeof LINEStruct.getChatRoomAnnouncements_args>
    ): Promise<LINETypes.getChatRoomAnnouncements_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChatRoomAnnouncements_args(...param),
            "getChatRoomAnnouncements",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChatRoomBGMs(
        ...param: Parameters<typeof LINEStruct.getChatRoomBGMs_args>
    ): Promise<LINETypes.getChatRoomBGMs_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChatRoomBGMs_args(...param),
            "getChatRoomBGMs",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChatapp(
        ...param: Parameters<typeof LINEStruct.getChatapp_args>
    ): Promise<LINETypes.getChatapp_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChatapp_args(...param),
            "getChatapp",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getChats(
        ...param: Parameters<typeof LINEStruct.getChats_args>
    ): Promise<LINETypes.getChats_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getChats_args(...param),
            "getChats",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCoinProducts(
        ...param: Parameters<typeof LINEStruct.getCoinProducts_args>
    ): Promise<LINETypes.getCoinProducts_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCoinProducts_args(...param),
            "getCoinProducts",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCoinPurchaseHistory(
        ...param: Parameters<typeof LINEStruct.getCoinPurchaseHistory_args>
    ): Promise<LINETypes.getCoinPurchaseHistory_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCoinPurchaseHistory_args(...param),
            "getCoinPurchaseHistory",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCoinUseAndRefundHistory(
        ...param: Parameters<typeof LINEStruct.getCoinUseAndRefundHistory_args>
    ): Promise<LINETypes.getCoinUseAndRefundHistory_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCoinUseAndRefundHistory_args(...param),
            "getCoinUseAndRefundHistory",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCommonDomains(
        ...param: Parameters<typeof LINEStruct.getCommonDomains_args>
    ): Promise<LINETypes.getCommonDomains_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCommonDomains_args(...param),
            "getCommonDomains",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getConfigurations(
        ...param: Parameters<typeof LINEStruct.getConfigurations_args>
    ): Promise<LINETypes.getConfigurations_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getConfigurations_args(...param),
            "getConfigurations",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getContactCalendarEvents(
        ...param: Parameters<typeof LINEStruct.getContactCalendarEvents_args>
    ): Promise<LINETypes.getContactCalendarEvents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getContactCalendarEvents_args(...param),
            "getContactCalendarEvents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getContactsV3(
        ...param: Parameters<typeof LINEStruct.getContactsV3_args>
    ): Promise<LINETypes.getContactsV3_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getContactsV3_args(...param),
            "getContactsV3",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCountries(
        ...param: Parameters<typeof LINEStruct.getCountries_args>
    ): Promise<LINETypes.getCountries_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCountries_args(...param),
            "getCountries",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getCountryInfo(
        ...param: Parameters<typeof LINEStruct.getCountryInfo_args>
    ): Promise<LINETypes.getCountryInfo_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getCountryInfo_args(...param),
            "getCountryInfo",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getDataRetention(
        ...param: Parameters<typeof LINEStruct.getDataRetention_args>
    ): Promise<LINETypes.getDataRetention_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getDataRetention_args(...param),
            "getDataRetention",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getDestinationUrl(
        ...param: Parameters<typeof LINEStruct.getDestinationUrl_args>
    ): Promise<LINETypes.getDestinationUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getDestinationUrl_args(...param),
            "getDestinationUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getDisasterCases(
        ...param: Parameters<typeof LINEStruct.getDisasterCases_args>
    ): Promise<LINETypes.getDisasterCases_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getDisasterCases_args(...param),
            "getDisasterCases",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getE2EEGroupSharedKey(
        ...param: Parameters<typeof LINEStruct.getE2EEGroupSharedKey_args>
    ): Promise<LINETypes.getE2EEGroupSharedKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getE2EEGroupSharedKey_args(...param),
            "getE2EEGroupSharedKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getE2EEKeyBackupCertificates(
        ...param: Parameters<typeof LINEStruct.getE2EEKeyBackupCertificates_args>
    ): Promise<LINETypes.getE2EEKeyBackupCertificates_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getE2EEKeyBackupCertificates_args(...param),
            "getE2EEKeyBackupCertificates",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getE2EEKeyBackupInfo(
        ...param: Parameters<typeof LINEStruct.getE2EEKeyBackupInfo_args>
    ): Promise<LINETypes.getE2EEKeyBackupInfo_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getE2EEKeyBackupInfo_args(...param),
            "getE2EEKeyBackupInfo",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getE2EEPublicKey(
        ...param: Parameters<typeof LINEStruct.getE2EEPublicKey_args>
    ): Promise<LINETypes.getE2EEPublicKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getE2EEPublicKey_args(...param),
            "getE2EEPublicKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getExchangeKey(
        ...param: Parameters<typeof LINEStruct.getExchangeKey_args>
    ): Promise<LINETypes.getExchangeKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getExchangeKey_args(...param),
            "getExchangeKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getExtendedProfile(
        ...param: Parameters<typeof LINEStruct.getExtendedProfile_args>
    ): Promise<LINETypes.getExtendedProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getExtendedProfile_args(...param),
            "getExtendedProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getFollowBlacklist(
        ...param: Parameters<typeof LINEStruct.getFollowBlacklist_args>
    ): Promise<LINETypes.getFollowBlacklist_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getFollowBlacklist_args(...param),
            "getFollowBlacklist",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getFollowers(
        ...param: Parameters<typeof LINEStruct.getFollowers_args>
    ): Promise<LINETypes.getFollowers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getFollowers_args(...param),
            "getFollowers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getFollowings(
        ...param: Parameters<typeof LINEStruct.getFollowings_args>
    ): Promise<LINETypes.getFollowings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getFollowings_args(...param),
            "getFollowings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getFontMetas(
        ...param: Parameters<typeof LINEStruct.getFontMetas_args>
    ): Promise<LINETypes.getFontMetas_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getFontMetas_args(...param),
            "getFontMetas",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getFriendDetails(
        ...param: Parameters<typeof LINEStruct.getFriendDetails_args>
    ): Promise<LINETypes.getFriendDetails_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getFriendDetails_args(...param),
            "getFriendDetails",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getFriendRequests(
        ...param: Parameters<typeof LINEStruct.getFriendRequests_args>
    ): Promise<LINETypes.getFriendRequests_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getFriendRequests_args(...param),
            "getFriendRequests",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getGnbBadgeStatus(
        ...param: Parameters<typeof LINEStruct.getGnbBadgeStatus_args>
    ): Promise<LINETypes.getGnbBadgeStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getGnbBadgeStatus_args(...param),
            "getGnbBadgeStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getGroupCallUrlInfo(
        ...param: Parameters<typeof LINEStruct.getGroupCallUrlInfo_args>
    ): Promise<LINETypes.getGroupCallUrlInfo_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getGroupCallUrlInfo_args(...param),
            "getGroupCallUrlInfo",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getGroupCallUrls(
        ...param: Parameters<typeof LINEStruct.getGroupCallUrls_args>
    ): Promise<LINETypes.getGroupCallUrls_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getGroupCallUrls_args(...param),
            "getGroupCallUrls",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getGroupCall(
        ...param: Parameters<typeof LINEStruct.getGroupCall_args>
    ): Promise<LINETypes.getGroupCall_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getGroupCall_args(...param),
            "getGroupCall",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getHomeFlexContent(
        ...param: Parameters<typeof LINEStruct.getHomeFlexContent_args>
    ): Promise<LINETypes.getHomeFlexContent_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getHomeFlexContent_args(...param),
            "getHomeFlexContent",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getHomeServiceList(
        ...param: Parameters<typeof LINEStruct.getHomeServiceList_args>
    ): Promise<LINETypes.getHomeServiceList_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getHomeServiceList_args(...param),
            "getHomeServiceList",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getHomeServices(
        ...param: Parameters<typeof LINEStruct.getHomeServices_args>
    ): Promise<LINETypes.getHomeServices_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getHomeServices_args(...param),
            "getHomeServices",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getIncentiveStatus(
        ...param: Parameters<typeof LINEStruct.getIncentiveStatus_args>
    ): Promise<LINETypes.getIncentiveStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getIncentiveStatus_args(...param),
            "getIncentiveStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getInstantNews(
        ...param: Parameters<typeof LINEStruct.getInstantNews_args>
    ): Promise<LINETypes.getInstantNews_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getInstantNews_args(...param),
            "getInstantNews",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getJoinedMembershipByBotMid(
        ...param: Parameters<typeof LINEStruct.getJoinedMembershipByBotMid_args>
    ): Promise<LINETypes.getJoinedMembershipByBotMid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getJoinedMembershipByBotMid_args(...param),
            "getJoinedMembershipByBotMid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getJoinedMembership(
        ...param: Parameters<typeof LINEStruct.getJoinedMembership_args>
    ): Promise<LINETypes.getJoinedMembership_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getJoinedMembership_args(...param),
            "getJoinedMembership",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getKeyBackupCertificatesV2(
        ...param: Parameters<typeof LINEStruct.getKeyBackupCertificatesV2_args>
    ): Promise<LINETypes.getKeyBackupCertificatesV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getKeyBackupCertificatesV2_args(...param),
            "getKeyBackupCertificatesV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getLFLSuggestion(
        ...param: Parameters<typeof LINEStruct.getLFLSuggestion_args>
    ): Promise<LINETypes.getLFLSuggestion_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getLFLSuggestion_args(...param),
            "getLFLSuggestion",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getLastE2EEGroupSharedKey(
        ...param: Parameters<typeof LINEStruct.getLastE2EEGroupSharedKey_args>
    ): Promise<LINETypes.getLastE2EEGroupSharedKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getLastE2EEGroupSharedKey_args(...param),
            "getLastE2EEGroupSharedKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getLastE2EEPublicKeys(
        ...param: Parameters<typeof LINEStruct.getLastE2EEPublicKeys_args>
    ): Promise<LINETypes.getLastE2EEPublicKeys_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getLastE2EEPublicKeys_args(...param),
            "getLastE2EEPublicKeys",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getLiffViewWithoutUserContext(
        ...param: Parameters<typeof LINEStruct.getLiffViewWithoutUserContext_args>
    ): Promise<LINETypes.getLiffViewWithoutUserContext_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getLiffViewWithoutUserContext_args(...param),
            "getLiffViewWithoutUserContext",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getLineCardIssueForm(
        ...param: Parameters<typeof LINEStruct.getLineCardIssueForm_args>
    ): Promise<LINETypes.getLineCardIssueForm_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getLineCardIssueForm_args(...param),
            "getLineCardIssueForm",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getLoginActorContext(
        ...param: Parameters<typeof LINEStruct.getLoginActorContext_args>
    ): Promise<LINETypes.getLoginActorContext_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getLoginActorContext_args(...param),
            "getLoginActorContext",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMappedProfileIds(
        ...param: Parameters<typeof LINEStruct.getMappedProfileIds_args>
    ): Promise<LINETypes.getMappedProfileIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMappedProfileIds_args(...param),
            "getMappedProfileIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMaskedEmail(
        ...param: Parameters<typeof LINEStruct.getMaskedEmail_args>
    ): Promise<LINETypes.getMaskedEmail_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMaskedEmail_args(...param),
            "getMaskedEmail",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMessageBoxes(
        ...param: Parameters<typeof LINEStruct.getMessageBoxes_args>
    ): Promise<LINETypes.getMessageBoxes_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMessageBoxes_args(...param),
            "getMessageBoxes",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMessageReadRange(
        ...param: Parameters<typeof LINEStruct.getMessageReadRange_args>
    ): Promise<LINETypes.getMessageReadRange_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMessageReadRange_args(...param),
            "getMessageReadRange",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getModuleLayoutV4(
        ...param: Parameters<typeof LINEStruct.getModuleLayoutV4_args>
    ): Promise<LINETypes.getModuleLayoutV4_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getModuleLayoutV4_args(...param),
            "getModuleLayoutV4",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getModuleWithStatus(
        ...param: Parameters<typeof LINEStruct.getModuleWithStatus_args>
    ): Promise<LINETypes.getModuleWithStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getModuleWithStatus_args(...param),
            "getModuleWithStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getModule(
        ...param: Parameters<typeof LINEStruct.getModule_args>
    ): Promise<LINETypes.getModule_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getModule_args(...param),
            "getModule",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getModulesV2(
        ...param: Parameters<typeof LINEStruct.getModulesV2_args>
    ): Promise<LINETypes.getModulesV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getModulesV2_args(...param),
            "getModulesV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getModulesV3(
        ...param: Parameters<typeof LINEStruct.getModulesV3_args>
    ): Promise<LINETypes.getModulesV3_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getModulesV3_args(...param),
            "getModulesV3",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getModulesV4WithStatus(
        ...param: Parameters<typeof LINEStruct.getModulesV4WithStatus_args>
    ): Promise<LINETypes.getModulesV4WithStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getModulesV4WithStatus_args(...param),
            "getModulesV4WithStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMusicSubscriptionStatus(
        ...param: Parameters<typeof LINEStruct.getMusicSubscriptionStatus_args>
    ): Promise<LINETypes.getMusicSubscriptionStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMusicSubscriptionStatus_args(...param),
            "getMusicSubscriptionStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMyAssetInformationV2(
        ...param: Parameters<typeof LINEStruct.getMyAssetInformationV2_args>
    ): Promise<LINETypes.getMyAssetInformationV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMyAssetInformationV2_args(...param),
            "getMyAssetInformationV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMyChatapps(
        ...param: Parameters<typeof LINEStruct.getMyChatapps_args>
    ): Promise<LINETypes.getMyChatapps_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMyChatapps_args(...param),
            "getMyChatapps",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getMyDashboard(
        ...param: Parameters<typeof LINEStruct.getMyDashboard_args>
    ): Promise<LINETypes.getMyDashboard_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getMyDashboard_args(...param),
            "getMyDashboard",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getNewlyReleasedBuddyIds(
        ...param: Parameters<typeof LINEStruct.getNewlyReleasedBuddyIds_args>
    ): Promise<LINETypes.getNewlyReleasedBuddyIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getNewlyReleasedBuddyIds_args(...param),
            "getNewlyReleasedBuddyIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getNotificationSettings(
        ...param: Parameters<typeof LINEStruct.getNotificationSettings_args>
    ): Promise<LINETypes.getNotificationSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getNotificationSettings_args(...param),
            "getNotificationSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getOwnedProductSummaries(
        ...param: Parameters<typeof LINEStruct.getOwnedProductSummaries_args>
    ): Promise<LINETypes.getOwnedProductSummaries_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getOwnedProductSummaries_args(...param),
            "getOwnedProductSummaries",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPasswordHashingParameter(
        ...param: Parameters<typeof LINEStruct.getPasswordHashingParameter_args>
    ): Promise<LINETypes.getPasswordHashingParameter_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPasswordHashingParameter_args(...param),
            "getPasswordHashingParameter",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPasswordHashingParametersForPwdReg(
        ...param: Parameters<typeof LINEStruct.getPasswordHashingParametersForPwdReg_args>
    ): Promise<LINETypes.getPasswordHashingParametersForPwdReg_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPasswordHashingParametersForPwdReg_args(...param),
            "getPasswordHashingParametersForPwdReg",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPasswordHashingParametersForPwdVerif(
        ...param: Parameters<typeof LINEStruct.getPasswordHashingParametersForPwdVerif_args>
    ): Promise<LINETypes.getPasswordHashingParametersForPwdVerif_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPasswordHashingParametersForPwdVerif_args(...param),
            "getPasswordHashingParametersForPwdVerif",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPaymentUrlByKey(
        ...param: Parameters<typeof LINEStruct.getPaymentUrlByKey_args>
    ): Promise<LINETypes.getPaymentUrlByKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPaymentUrlByKey_args(...param),
            "getPaymentUrlByKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPhoneVerifMethodForRegistration(
        ...param: Parameters<typeof LINEStruct.getPhoneVerifMethodForRegistration_args>
    ): Promise<LINETypes.getPhoneVerifMethodForRegistration_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPhoneVerifMethodForRegistration_args(...param),
            "getPhoneVerifMethodForRegistration",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPhoneVerifMethodV2(
        ...param: Parameters<typeof LINEStruct.getPhoneVerifMethodV2_args>
    ): Promise<LINETypes.getPhoneVerifMethodV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPhoneVerifMethodV2_args(...param),
            "getPhoneVerifMethodV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPhotoboothBalance(
        ...param: Parameters<typeof LINEStruct.getPhotoboothBalance_args>
    ): Promise<LINETypes.getPhotoboothBalance_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPhotoboothBalance_args(...param),
            "getPhotoboothBalance",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPredefinedScenarioSets(
        ...param: Parameters<typeof LINEStruct.getPredefinedScenarioSets_args>
    ): Promise<LINETypes.getPredefinedScenarioSets_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPredefinedScenarioSets_args(...param),
            "getPredefinedScenarioSets",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPrefetchableBanners(
        ...param: Parameters<typeof LINEStruct.getPrefetchableBanners_args>
    ): Promise<LINETypes.getPrefetchableBanners_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPrefetchableBanners_args(...param),
            "getPrefetchableBanners",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPremiumStatusForUpgrade(
        ...param: Parameters<typeof LINEStruct.getPremiumStatusForUpgrade_args>
    ): Promise<LINETypes.getPremiumStatusForUpgrade_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPremiumStatusForUpgrade_args(...param),
            "getPremiumStatusForUpgrade",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPremiumStatus(
        ...param: Parameters<typeof LINEStruct.getPremiumStatus_args>
    ): Promise<LINETypes.getPremiumStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPremiumStatus_args(...param),
            "getPremiumStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPreviousMessagesV2WithRequest(
        ...param: Parameters<typeof LINEStruct.getPreviousMessagesV2WithRequest_args>
    ): Promise<LINETypes.getPreviousMessagesV2WithRequest_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPreviousMessagesV2WithRequest_args(...param),
            "getPreviousMessagesV2WithRequest",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProductByVersion(
        ...param: Parameters<typeof LINEStruct.getProductByVersion_args>
    ): Promise<LINETypes.getProductByVersion_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProductByVersion_args(...param),
            "getProductByVersion",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProductLatestVersionForUser(
        ...param: Parameters<typeof LINEStruct.getProductLatestVersionForUser_args>
    ): Promise<LINETypes.getProductLatestVersionForUser_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProductLatestVersionForUser_args(...param),
            "getProductLatestVersionForUser",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProductSummariesInSubscriptionSlots(
        ...param: Parameters<typeof LINEStruct.getProductSummariesInSubscriptionSlots_args>
    ): Promise<LINETypes.getProductSummariesInSubscriptionSlots_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProductSummariesInSubscriptionSlots_args(...param),
            "getProductSummariesInSubscriptionSlots",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProductV2(
        ...param: Parameters<typeof LINEStruct.getProductV2_args>
    ): Promise<LINETypes.getProductV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProductV2_args(...param),
            "getProductV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProductValidationScheme(
        ...param: Parameters<typeof LINEStruct.getProductValidationScheme_args>
    ): Promise<LINETypes.getProductValidationScheme_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProductValidationScheme_args(...param),
            "getProductValidationScheme",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProductsByAuthor(
        ...param: Parameters<typeof LINEStruct.getProductsByAuthor_args>
    ): Promise<LINETypes.getProductsByAuthor_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProductsByAuthor_args(...param),
            "getProductsByAuthor",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProfile(
        ...param: Parameters<typeof LINEStruct.getProfile_args>
    ): Promise<LINETypes.getProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProfile_args(...param),
            "getProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getProfiles(
        ...param: Parameters<typeof LINEStruct.getProfiles_args>
    ): Promise<LINETypes.getProfiles_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getProfiles_args(...param),
            "getProfiles",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPromotedBuddyContacts(
        ...param: Parameters<typeof LINEStruct.getPromotedBuddyContacts_args>
    ): Promise<LINETypes.getPromotedBuddyContacts_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPromotedBuddyContacts_args(...param),
            "getPromotedBuddyContacts",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPublishedMemberships(
        ...param: Parameters<typeof LINEStruct.getPublishedMemberships_args>
    ): Promise<LINETypes.getPublishedMemberships_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPublishedMemberships_args(...param),
            "getPublishedMemberships",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPurchaseEnabledStatus(
        ...param: Parameters<typeof LINEStruct.getPurchaseEnabledStatus_args>
    ): Promise<LINETypes.getPurchaseEnabledStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPurchaseEnabledStatus_args(...param),
            "getPurchaseEnabledStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getPurchasedProducts(
        ...param: Parameters<typeof LINEStruct.getPurchasedProducts_args>
    ): Promise<LINETypes.getPurchasedProducts_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getPurchasedProducts_args(...param),
            "getPurchasedProducts",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getQuickMenu(
        ...param: Parameters<typeof LINEStruct.getQuickMenu_args>
    ): Promise<LINETypes.getQuickMenu_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getQuickMenu_args(...param),
            "getQuickMenu",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getReceivedPresents(
        ...param: Parameters<typeof LINEStruct.getReceivedPresents_args>
    ): Promise<LINETypes.getReceivedPresents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getReceivedPresents_args(...param),
            "getReceivedPresents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getRecentFriendRequests(
        ...param: Parameters<typeof LINEStruct.getRecentFriendRequests_args>
    ): Promise<LINETypes.getRecentFriendRequests_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getRecentFriendRequests_args(...param),
            "getRecentFriendRequests",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getRecommendationDetails(
        ...param: Parameters<typeof LINEStruct.getRecommendationDetails_args>
    ): Promise<LINETypes.getRecommendationDetails_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getRecommendationDetails_args(...param),
            "getRecommendationDetails",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getRecommendationIds(
        ...param: Parameters<typeof LINEStruct.getRecommendationIds_args>
    ): Promise<LINETypes.getRecommendationIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getRecommendationIds_args(...param),
            "getRecommendationIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getRecommendationList(
        ...param: Parameters<typeof LINEStruct.getRecommendationList_args>
    ): Promise<LINETypes.getRecommendationList_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getRecommendationList_args(...param),
            "getRecommendationList",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getRepairElements(
        ...param: Parameters<typeof LINEStruct.getRepairElements_args>
    ): Promise<LINETypes.getRepairElements_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getRepairElements_args(...param),
            "getRepairElements",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getResourceFile(
        ...param: Parameters<typeof LINEStruct.getResourceFile_args>
    ): Promise<LINETypes.getResourceFile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getResourceFile_args(...param),
            "getResourceFile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getResponseStatus(
        ...param: Parameters<typeof LINEStruct.getResponseStatus_args>
    ): Promise<LINETypes.getResponseStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getResponseStatus_args(...param),
            "getResponseStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getReturnUrlWithRequestTokenForAutoLogin(
        ...param: Parameters<typeof LINEStruct.getReturnUrlWithRequestTokenForAutoLogin_args>
    ): Promise<LINETypes.getReturnUrlWithRequestTokenForAutoLogin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getReturnUrlWithRequestTokenForAutoLogin_args(...param),
            "getReturnUrlWithRequestTokenForAutoLogin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getReturnUrlWithRequestTokenForMultiLiffLogin(
        ...param: Parameters<typeof LINEStruct.getReturnUrlWithRequestTokenForMultiLiffLogin_args>
    ): Promise<LINETypes.getReturnUrlWithRequestTokenForMultiLiffLogin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getReturnUrlWithRequestTokenForMultiLiffLogin_args(...param),
            "getReturnUrlWithRequestTokenForMultiLiffLogin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getRoomsV2(
        ...param: Parameters<typeof LINEStruct.getRoomsV2_args>
    ): Promise<LINETypes.getRoomsV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getRoomsV2_args(...param),
            "getRoomsV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSCC(
        ...param: Parameters<typeof LINEStruct.getSCC_args>
    ): Promise<LINETypes.getSCC_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSCC_args(...param),
            "getSCC",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSeasonalEffects(
        ...param: Parameters<typeof LINEStruct.getSeasonalEffects_args>
    ): Promise<LINETypes.getSeasonalEffects_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSeasonalEffects_args(...param),
            "getSeasonalEffects",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSecondAuthMethod(
        ...param: Parameters<typeof LINEStruct.getSecondAuthMethod_args>
    ): Promise<LINETypes.getSecondAuthMethod_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSecondAuthMethod_args(...param),
            "getSecondAuthMethod",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSentPresents(
        ...param: Parameters<typeof LINEStruct.getSentPresents_args>
    ): Promise<LINETypes.getSentPresents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSentPresents_args(...param),
            "getSentPresents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getServiceShortcutMenu(
        ...param: Parameters<typeof LINEStruct.getServiceShortcutMenu_args>
    ): Promise<LINETypes.getServiceShortcutMenu_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getServiceShortcutMenu_args(...param),
            "getServiceShortcutMenu",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSessionContentBeforeMigCompletion(
        ...param: Parameters<typeof LINEStruct.getSessionContentBeforeMigCompletion_args>
    ): Promise<LINETypes.getSessionContentBeforeMigCompletion_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSessionContentBeforeMigCompletion_args(...param),
            "getSessionContentBeforeMigCompletion",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSettingsAttributes2(
        ...param: Parameters<typeof LINEStruct.getSettingsAttributes2_args>
    ): Promise<LINETypes.getSettingsAttributes2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSettingsAttributes2_args(...param),
            "getSettingsAttributes2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSettings(
        ...param: Parameters<typeof LINEStruct.getSettings_args>
    ): Promise<LINETypes.getSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSettings_args(...param),
            "getSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSmartChannelRecommendations(
        ...param: Parameters<typeof LINEStruct.getSmartChannelRecommendations_args>
    ): Promise<LINETypes.getSmartChannelRecommendations_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSmartChannelRecommendations_args(...param),
            "getSmartChannelRecommendations",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSquareBot(
        ...param: Parameters<typeof LINEStruct.getSquareBot_args>
    ): Promise<LINETypes.getSquareBot_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSquareBot_args(...param),
            "getSquareBot",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getStudentInformation(
        ...param: Parameters<typeof LINEStruct.getStudentInformation_args>
    ): Promise<LINETypes.getStudentInformation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getStudentInformation_args(...param),
            "getStudentInformation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSubscriptionPlans(
        ...param: Parameters<typeof LINEStruct.getSubscriptionPlans_args>
    ): Promise<LINETypes.getSubscriptionPlans_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSubscriptionPlans_args(...param),
            "getSubscriptionPlans",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSubscriptionSlotHistory(
        ...param: Parameters<typeof LINEStruct.getSubscriptionSlotHistory_args>
    ): Promise<LINETypes.getSubscriptionSlotHistory_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSubscriptionSlotHistory_args(...param),
            "getSubscriptionSlotHistory",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSubscriptionStatus(
        ...param: Parameters<typeof LINEStruct.getSubscriptionStatus_args>
    ): Promise<LINETypes.getSubscriptionStatus_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSubscriptionStatus_args(...param),
            "getSubscriptionStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSuggestDictionarySetting(
        ...param: Parameters<typeof LINEStruct.getSuggestDictionarySetting_args>
    ): Promise<LINETypes.getSuggestDictionarySetting_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSuggestDictionarySetting_args(...param),
            "getSuggestDictionarySetting",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getSuggestResourcesV2(
        ...param: Parameters<typeof LINEStruct.getSuggestResourcesV2_args>
    ): Promise<LINETypes.getSuggestResourcesV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getSuggestResourcesV2_args(...param),
            "getSuggestResourcesV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getTaiwanBankBalance(
        ...param: Parameters<typeof LINEStruct.getTaiwanBankBalance_args>
    ): Promise<LINETypes.getTaiwanBankBalance_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getTaiwanBankBalance_args(...param),
            "getTaiwanBankBalance",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getTargetProfiles(
        ...param: Parameters<typeof LINEStruct.getTargetProfiles_args>
    ): Promise<LINETypes.getTargetProfiles_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getTargetProfiles_args(...param),
            "getTargetProfiles",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getTargetingPopup(
        ...param: Parameters<typeof LINEStruct.getTargetingPopup_args>
    ): Promise<LINETypes.getTargetingPopup_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getTargetingPopup_args(...param),
            "getTargetingPopup",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getThaiBankBalance(
        ...param: Parameters<typeof LINEStruct.getThaiBankBalance_args>
    ): Promise<LINETypes.getThaiBankBalance_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getThaiBankBalance_args(...param),
            "getThaiBankBalance",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getTotalCoinBalance(
        ...param: Parameters<typeof LINEStruct.getTotalCoinBalance_args>
    ): Promise<LINETypes.getTotalCoinBalance_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getTotalCoinBalance_args(...param),
            "getTotalCoinBalance",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getUpdatedChannelIds(
        ...param: Parameters<typeof LINEStruct.getUpdatedChannelIds_args>
    ): Promise<LINETypes.getUpdatedChannelIds_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getUpdatedChannelIds_args(...param),
            "getUpdatedChannelIds",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getUserCollections(
        ...param: Parameters<typeof LINEStruct.getUserCollections_args>
    ): Promise<LINETypes.getUserCollections_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getUserCollections_args(...param),
            "getUserCollections",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getUserProfile(
        ...param: Parameters<typeof LINEStruct.getUserProfile_args>
    ): Promise<LINETypes.getUserProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getUserProfile_args(...param),
            "getUserProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getUserVector(
        ...param: Parameters<typeof LINEStruct.getUserVector_args>
    ): Promise<LINETypes.getUserVector_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getUserVector_args(...param),
            "getUserVector",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getUsersMappedByProfile(
        ...param: Parameters<typeof LINEStruct.getUsersMappedByProfile_args>
    ): Promise<LINETypes.getUsersMappedByProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getUsersMappedByProfile_args(...param),
            "getUsersMappedByProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getWebLoginDisallowedUrlForMultiLiffLogin(
        ...param: Parameters<typeof LINEStruct.getWebLoginDisallowedUrlForMultiLiffLogin_args>
    ): Promise<LINETypes.getWebLoginDisallowedUrlForMultiLiffLogin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getWebLoginDisallowedUrlForMultiLiffLogin_args(...param),
            "getWebLoginDisallowedUrlForMultiLiffLogin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async getWebLoginDisallowedUrl(
        ...param: Parameters<typeof LINEStruct.getWebLoginDisallowedUrl_args>
    ): Promise<LINETypes.getWebLoginDisallowedUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.getWebLoginDisallowedUrl_args(...param),
            "getWebLoginDisallowedUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async inviteFriends(
        ...param: Parameters<typeof LINEStruct.inviteFriends_args>
    ): Promise<LINETypes.inviteFriends_result["success"]> {
        return await this.client.request.request(
            LINEStruct.inviteFriends_args(...param),
            "inviteFriends",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async inviteIntoChat(
        ...param: Parameters<typeof LINEStruct.inviteIntoChat_args>
    ): Promise<LINETypes.inviteIntoChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.inviteIntoChat_args(...param),
            "inviteIntoChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async inviteIntoGroupCall(
        ...param: Parameters<typeof LINEStruct.inviteIntoGroupCall_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.inviteIntoGroupCall_args(...param),
            "inviteIntoGroupCall",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async inviteIntoRoom(
        ...param: Parameters<typeof LINEStruct.inviteIntoRoom_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.inviteIntoRoom_args(...param),
            "inviteIntoRoom",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async isProductForCollections(
        ...param: Parameters<typeof LINEStruct.isProductForCollections_args>
    ): Promise<LINETypes.isProductForCollections_result["success"]> {
        return await this.client.request.request(
            LINEStruct.isProductForCollections_args(...param),
            "isProductForCollections",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async isStickerAvailableForCombinationSticker(
        ...param: Parameters<typeof LINEStruct.isStickerAvailableForCombinationSticker_args>
    ): Promise<LINETypes.isStickerAvailableForCombinationSticker_result["success"]> {
        return await this.client.request.request(
            LINEStruct.isStickerAvailableForCombinationSticker_args(...param),
            "isStickerAvailableForCombinationSticker",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async isUseridAvailable(
        ...param: Parameters<typeof LINEStruct.isUseridAvailable_args>
    ): Promise<LINETypes.isUseridAvailable_result["success"]> {
        return await this.client.request.request(
            LINEStruct.isUseridAvailable_args(...param),
            "isUseridAvailable",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueChannelToken(
        ...param: Parameters<typeof LINEStruct.issueChannelToken_args>
    ): Promise<LINETypes.issueChannelToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueChannelToken_args(...param),
            "issueChannelToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueLiffView(
        ...param: Parameters<typeof LINEStruct.issueLiffView_args>
    ): Promise<LINETypes.issueLiffView_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueLiffView_args(...param),
            "issueLiffView",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueRequestTokenWithAuthScheme(
        ...param: Parameters<typeof LINEStruct.issueRequestTokenWithAuthScheme_args>
    ): Promise<LINETypes.issueRequestTokenWithAuthScheme_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueRequestTokenWithAuthScheme_args(...param),
            "issueRequestTokenWithAuthScheme",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueSubLiffView(
        ...param: Parameters<typeof LINEStruct.issueSubLiffView_args>
    ): Promise<LINETypes.issueSubLiffView_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueSubLiffView_args(...param),
            "issueSubLiffView",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueTokenForAccountMigrationSettings(
        ...param: Parameters<typeof LINEStruct.issueTokenForAccountMigrationSettings_args>
    ): Promise<LINETypes.issueTokenForAccountMigrationSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueTokenForAccountMigrationSettings_args(...param),
            "issueTokenForAccountMigrationSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueToken(
        ...param: Parameters<typeof LINEStruct.issueToken_args>
    ): Promise<LINETypes.issueToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueToken_args(...param),
            "issueToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueV3TokenForPrimary(
        ...param: Parameters<typeof LINEStruct.issueV3TokenForPrimary_args>
    ): Promise<LINETypes.issueV3TokenForPrimary_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueV3TokenForPrimary_args(...param),
            "issueV3TokenForPrimary",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async issueWebAuthDetailsForSecondAuth(
        ...param: Parameters<typeof LINEStruct.issueWebAuthDetailsForSecondAuth_args>
    ): Promise<LINETypes.issueWebAuthDetailsForSecondAuth_result["success"]> {
        return await this.client.request.request(
            LINEStruct.issueWebAuthDetailsForSecondAuth_args(...param),
            "issueWebAuthDetailsForSecondAuth",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async joinChatByCallUrl(
        ...param: Parameters<typeof LINEStruct.joinChatByCallUrl_args>
    ): Promise<LINETypes.joinChatByCallUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.joinChatByCallUrl_args(...param),
            "joinChatByCallUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async kickoutFromGroupCall(
        ...param: Parameters<typeof LINEStruct.kickoutFromGroupCall_args>
    ): Promise<LINETypes.kickoutFromGroupCall_result["success"]> {
        return await this.client.request.request(
            LINEStruct.kickoutFromGroupCall_args(...param),
            "kickoutFromGroupCall",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async leaveRoom(
        ...param: Parameters<typeof LINEStruct.leaveRoom_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.leaveRoom_args(...param),
            "leaveRoom",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async linkDevice(
        ...param: Parameters<typeof LINEStruct.linkDevice_args>
    ): Promise<LINETypes.linkDevice_result["success"]> {
        return await this.client.request.request(
            LINEStruct.linkDevice_args(...param),
            "linkDevice",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async lookupAvailableEap(
        ...param: Parameters<typeof LINEStruct.lookupAvailableEap_args>
    ): Promise<LINETypes.lookupAvailableEap_result["success"]> {
        return await this.client.request.request(
            LINEStruct.lookupAvailableEap_args(...param),
            "lookupAvailableEap",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async lookupPaidCall(
        ...param: Parameters<typeof LINEStruct.lookupPaidCall_args>
    ): Promise<LINETypes.lookupPaidCall_result["success"]> {
        return await this.client.request.request(
            LINEStruct.lookupPaidCall_args(...param),
            "lookupPaidCall",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async mapProfileToUsers(
        ...param: Parameters<typeof LINEStruct.mapProfileToUsers_args>
    ): Promise<LINETypes.mapProfileToUsers_result["success"]> {
        return await this.client.request.request(
            LINEStruct.mapProfileToUsers_args(...param),
            "mapProfileToUsers",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async migratePrimaryUsingEapAccountWithTokenV3(
        ...param: Parameters<typeof LINEStruct.migratePrimaryUsingEapAccountWithTokenV3_args>
    ): Promise<LINETypes.migratePrimaryUsingEapAccountWithTokenV3_result["success"]> {
        return await this.client.request.request(
            LINEStruct.migratePrimaryUsingEapAccountWithTokenV3_args(...param),
            "migratePrimaryUsingEapAccountWithTokenV3",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async migratePrimaryUsingPhoneWithTokenV3(
        ...param: Parameters<typeof LINEStruct.migratePrimaryUsingPhoneWithTokenV3_args>
    ): Promise<LINETypes.migratePrimaryUsingPhoneWithTokenV3_result["success"]> {
        return await this.client.request.request(
            LINEStruct.migratePrimaryUsingPhoneWithTokenV3_args(...param),
            "migratePrimaryUsingPhoneWithTokenV3",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async migratePrimaryUsingQrCode(
        ...param: Parameters<typeof LINEStruct.migratePrimaryUsingQrCode_args>
    ): Promise<LINETypes.migratePrimaryUsingQrCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.migratePrimaryUsingQrCode_args(...param),
            "migratePrimaryUsingQrCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async negotiateE2EEPublicKey(
        ...param: Parameters<typeof LINEStruct.negotiateE2EEPublicKey_args>
    ): Promise<LINETypes.negotiateE2EEPublicKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.negotiateE2EEPublicKey_args(...param),
            "negotiateE2EEPublicKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyChatAdEntry(
        ...param: Parameters<typeof LINEStruct.notifyChatAdEntry_args>
    ): Promise<LINETypes.notifyChatAdEntry_result["success"]> {
        return await this.client.request.request(
            LINEStruct.notifyChatAdEntry_args(...param),
            "notifyChatAdEntry",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyDeviceConnection(
        ...param: Parameters<typeof LINEStruct.notifyDeviceConnection_args>
    ): Promise<LINETypes.notifyDeviceConnection_result["success"]> {
        return await this.client.request.request(
            LINEStruct.notifyDeviceConnection_args(...param),
            "notifyDeviceConnection",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyDeviceDisconnection(
        ...param: Parameters<typeof LINEStruct.notifyDeviceDisconnection_args>
    ): Promise<LINETypes.notifyDeviceDisconnection_result["success"]> {
        return await this.client.request.request(
            LINEStruct.notifyDeviceDisconnection_args(...param),
            "notifyDeviceDisconnection",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyInstalled(
        ...param: Parameters<typeof LINEStruct.notifyInstalled_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.notifyInstalled_args(...param),
            "notifyInstalled",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyOATalkroomEvents(
        ...param: Parameters<typeof LINEStruct.notifyOATalkroomEvents_args>
    ): Promise<LINETypes.notifyOATalkroomEvents_result["success"]> {
        return await this.client.request.request(
            LINEStruct.notifyOATalkroomEvents_args(...param),
            "notifyOATalkroomEvents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyProductEvent(
        ...param: Parameters<typeof LINEStruct.notifyProductEvent_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.notifyProductEvent_args(...param),
            "notifyProductEvent",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyRegistrationComplete(
        ...param: Parameters<typeof LINEStruct.notifyRegistrationComplete_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.notifyRegistrationComplete_args(...param),
            "notifyRegistrationComplete",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyScenarioExecuted(
        ...param: Parameters<typeof LINEStruct.notifyScenarioExecuted_args>
    ): Promise<LINETypes.notifyScenarioExecuted_result["success"]> {
        return await this.client.request.request(
            LINEStruct.notifyScenarioExecuted_args(...param),
            "notifyScenarioExecuted",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async notifyUpdated(
        ...param: Parameters<typeof LINEStruct.notifyUpdated_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.notifyUpdated_args(...param),
            "notifyUpdated",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async openAuthSession(
        ...param: Parameters<typeof LINEStruct.openAuthSession_args>
    ): Promise<LINETypes.openAuthSession_result["success"]> {
        return await this.client.request.request(
            LINEStruct.openAuthSession_args(...param),
            "openAuthSession",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async openSession(
        ...param: Parameters<typeof LINEStruct.openSession_args>
    ): Promise<LINETypes.openSession_result["success"]> {
        return await this.client.request.request(
            LINEStruct.openSession_args(...param),
            "openSession",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async permitLogin(
        ...param: Parameters<typeof LINEStruct.permitLogin_args>
    ): Promise<LINETypes.permitLogin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.permitLogin_args(...param),
            "permitLogin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async placePurchaseOrderForFreeProduct(
        ...param: Parameters<typeof LINEStruct.placePurchaseOrderForFreeProduct_args>
    ): Promise<LINETypes.placePurchaseOrderForFreeProduct_result["success"]> {
        return await this.client.request.request(
            LINEStruct.placePurchaseOrderForFreeProduct_args(...param),
            "placePurchaseOrderForFreeProduct",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async placePurchaseOrderWithLineCoin(
        ...param: Parameters<typeof LINEStruct.placePurchaseOrderWithLineCoin_args>
    ): Promise<LINETypes.placePurchaseOrderWithLineCoin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.placePurchaseOrderWithLineCoin_args(...param),
            "placePurchaseOrderWithLineCoin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async postPopupButtonEvents(
        ...param: Parameters<typeof LINEStruct.postPopupButtonEvents_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.postPopupButtonEvents_args(...param),
            "postPopupButtonEvents",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async purchaseSubscription(
        ...param: Parameters<typeof LINEStruct.purchaseSubscription_args>
    ): Promise<LINETypes.purchaseSubscription_result["success"]> {
        return await this.client.request.request(
            LINEStruct.purchaseSubscription_args(...param),
            "purchaseSubscription",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async putE2eeKey(
        ...param: Parameters<typeof LINEStruct.putE2eeKey_args>
    ): Promise<LINETypes.putE2eeKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.putE2eeKey_args(...param),
            "putE2eeKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async react(
        ...param: Parameters<typeof LINEStruct.react_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.react_args(...param),
            "react",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async refresh(
        ...param: Parameters<typeof LINEStruct.refresh_args>
    ): Promise<LINETypes.refresh_result["success"]> {
        return await this.client.request.request(
            LINEStruct.refresh_args(...param),
            "refresh",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerBarcodeAsync(
        ...param: Parameters<typeof LINEStruct.registerBarcodeAsync_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.registerBarcodeAsync_args(...param),
            "registerBarcodeAsync",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerCampaignReward(
        ...param: Parameters<typeof LINEStruct.registerCampaignReward_args>
    ): Promise<LINETypes.registerCampaignReward_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerCampaignReward_args(...param),
            "registerCampaignReward",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerE2EEGroupKey(
        ...param: Parameters<typeof LINEStruct.registerE2EEGroupKey_args>
    ): Promise<LINETypes.registerE2EEGroupKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerE2EEGroupKey_args(...param),
            "registerE2EEGroupKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerE2EEPublicKeyV2(
        ...param: Parameters<typeof LINEStruct.registerE2EEPublicKeyV2_args>
    ): Promise<LINETypes.registerE2EEPublicKeyV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerE2EEPublicKeyV2_args(...param),
            "registerE2EEPublicKeyV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerE2EEPublicKey(
        ...param: Parameters<typeof LINEStruct.registerE2EEPublicKey_args>
    ): Promise<LINETypes.registerE2EEPublicKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerE2EEPublicKey_args(...param),
            "registerE2EEPublicKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerPrimaryCredential(
        ...param: Parameters<typeof LINEStruct.registerPrimaryCredential_args>
    ): Promise<LINETypes.registerPrimaryCredential_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerPrimaryCredential_args(...param),
            "registerPrimaryCredential",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerPrimaryUsingEapAccount(
        ...param: Parameters<typeof LINEStruct.registerPrimaryUsingEapAccount_args>
    ): Promise<LINETypes.registerPrimaryUsingEapAccount_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerPrimaryUsingEapAccount_args(...param),
            "registerPrimaryUsingEapAccount",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerPrimaryUsingPhoneWithTokenV3(
        ...param: Parameters<typeof LINEStruct.registerPrimaryUsingPhoneWithTokenV3_args>
    ): Promise<LINETypes.registerPrimaryUsingPhoneWithTokenV3_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerPrimaryUsingPhoneWithTokenV3_args(...param),
            "registerPrimaryUsingPhoneWithTokenV3",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async registerUserid(
        ...param: Parameters<typeof LINEStruct.registerUserid_args>
    ): Promise<LINETypes.registerUserid_result["success"]> {
        return await this.client.request.request(
            LINEStruct.registerUserid_args(...param),
            "registerUserid",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reissueChatTicket(
        ...param: Parameters<typeof LINEStruct.reissueChatTicket_args>
    ): Promise<LINETypes.reissueChatTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.reissueChatTicket_args(...param),
            "reissueChatTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async rejectChatInvitation(
        ...param: Parameters<typeof LINEStruct.rejectChatInvitation_args>
    ): Promise<LINETypes.rejectChatInvitation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.rejectChatInvitation_args(...param),
            "rejectChatInvitation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeChatRoomAnnouncement(
        ...param: Parameters<typeof LINEStruct.removeChatRoomAnnouncement_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.removeChatRoomAnnouncement_args(...param),
            "removeChatRoomAnnouncement",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeFollower(
        ...param: Parameters<typeof LINEStruct.removeFollower_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.removeFollower_args(...param),
            "removeFollower",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeFriendRequest(
        ...param: Parameters<typeof LINEStruct.removeFriendRequest_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.removeFriendRequest_args(...param),
            "removeFriendRequest",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeFromFollowBlacklist(
        ...param: Parameters<typeof LINEStruct.removeFromFollowBlacklist_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.removeFromFollowBlacklist_args(...param),
            "removeFromFollowBlacklist",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeIdentifier(
        ...param: Parameters<typeof LINEStruct.removeIdentifier_args>
    ): Promise<LINETypes.removeIdentifier_result["success"]> {
        return await this.client.request.request(
            LINEStruct.removeIdentifier_args(...param),
            "removeIdentifier",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeItemFromCollection(
        ...param: Parameters<typeof LINEStruct.removeItemFromCollection_args>
    ): Promise<LINETypes.removeItemFromCollection_result["success"]> {
        return await this.client.request.request(
            LINEStruct.removeItemFromCollection_args(...param),
            "removeItemFromCollection",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeLinePayAccount(
        ...param: Parameters<typeof LINEStruct.removeLinePayAccount_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.removeLinePayAccount_args(...param),
            "removeLinePayAccount",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async removeProductFromSubscriptionSlot(
        ...param: Parameters<typeof LINEStruct.removeProductFromSubscriptionSlot_args>
    ): Promise<LINETypes.removeProductFromSubscriptionSlot_result["success"]> {
        return await this.client.request.request(
            LINEStruct.removeProductFromSubscriptionSlot_args(...param),
            "removeProductFromSubscriptionSlot",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportAbuseEx(
        ...param: Parameters<typeof LINEStruct.reportAbuseEx_args>
    ): Promise<LINETypes.reportAbuseEx_result["success"]> {
        return await this.client.request.request(
            LINEStruct.reportAbuseEx_args(...param),
            "reportAbuseEx",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportDeviceState(
        ...param: Parameters<typeof LINEStruct.reportDeviceState_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.reportDeviceState_args(...param),
            "reportDeviceState",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportLocation(
        ...param: Parameters<typeof LINEStruct.reportLocation_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.reportLocation_args(...param),
            "reportLocation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportNetworkStatus(
        ...param: Parameters<typeof LINEStruct.reportNetworkStatus_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.reportNetworkStatus_args(...param),
            "reportNetworkStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportProfile(
        ...param: Parameters<typeof LINEStruct.reportProfile_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.reportProfile_args(...param),
            "reportProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportPushRecvReports(
        ...param: Parameters<typeof LINEStruct.reportPushRecvReports_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.reportPushRecvReports_args(...param),
            "reportPushRecvReports",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportRefreshedAccessToken(
        ...param: Parameters<typeof LINEStruct.reportRefreshedAccessToken_args>
    ): Promise<LINETypes.reportRefreshedAccessToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.reportRefreshedAccessToken_args(...param),
            "reportRefreshedAccessToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reportSettings(
        ...param: Parameters<typeof LINEStruct.reportSettings_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.reportSettings_args(...param),
            "reportSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async requestCleanupUserProvidedData(
        ...param: Parameters<typeof LINEStruct.requestCleanupUserProvidedData_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.requestCleanupUserProvidedData_args(...param),
            "requestCleanupUserProvidedData",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async requestToSendPasswordSetVerificationEmail(
        ...param: Parameters<typeof LINEStruct.requestToSendPasswordSetVerificationEmail_args>
    ): Promise<LINETypes.requestToSendPasswordSetVerificationEmail_result["success"]> {
        return await this.client.request.request(
            LINEStruct.requestToSendPasswordSetVerificationEmail_args(...param),
            "requestToSendPasswordSetVerificationEmail",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async requestToSendPhonePinCode(
        ...param: Parameters<typeof LINEStruct.requestToSendPhonePinCode_args>
    ): Promise<LINETypes.requestToSendPhonePinCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.requestToSendPhonePinCode_args(...param),
            "requestToSendPhonePinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async requestTradeNumber(
        ...param: Parameters<typeof LINEStruct.requestTradeNumber_args>
    ): Promise<LINETypes.requestTradeNumber_result["success"]> {
        return await this.client.request.request(
            LINEStruct.requestTradeNumber_args(...param),
            "requestTradeNumber",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async resendIdentifierConfirmation(
        ...param: Parameters<typeof LINEStruct.resendIdentifierConfirmation_args>
    ): Promise<LINETypes.resendIdentifierConfirmation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.resendIdentifierConfirmation_args(...param),
            "resendIdentifierConfirmation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async resendPinCode(
        ...param: Parameters<typeof LINEStruct.resendPinCode_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.resendPinCode_args(...param),
            "resendPinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reserveCoinPurchase(
        ...param: Parameters<typeof LINEStruct.reserveCoinPurchase_args>
    ): Promise<LINETypes.reserveCoinPurchase_result["success"]> {
        return await this.client.request.request(
            LINEStruct.reserveCoinPurchase_args(...param),
            "reserveCoinPurchase",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reserveSubscriptionPurchase(
        ...param: Parameters<typeof LINEStruct.reserveSubscriptionPurchase_args>
    ): Promise<LINETypes.reserveSubscriptionPurchase_result["success"]> {
        return await this.client.request.request(
            LINEStruct.reserveSubscriptionPurchase_args(...param),
            "reserveSubscriptionPurchase",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async reserve(
        ...param: Parameters<typeof LINEStruct.reserve_args>
    ): Promise<LINETypes.reserve_result["success"]> {
        return await this.client.request.request(
            LINEStruct.reserve_args(...param),
            "reserve",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async restoreE2EEKeyBackup(
        ...param: Parameters<typeof LINEStruct.restoreE2EEKeyBackup_args>
    ): Promise<LINETypes.restoreE2EEKeyBackup_result["success"]> {
        return await this.client.request.request(
            LINEStruct.restoreE2EEKeyBackup_args(...param),
            "restoreE2EEKeyBackup",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async retrieveRequestTokenWithDocomoV2(
        ...param: Parameters<typeof LINEStruct.retrieveRequestTokenWithDocomoV2_args>
    ): Promise<LINETypes.retrieveRequestTokenWithDocomoV2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.retrieveRequestTokenWithDocomoV2_args(...param),
            "retrieveRequestTokenWithDocomoV2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async retrieveRequestToken(
        ...param: Parameters<typeof LINEStruct.retrieveRequestToken_args>
    ): Promise<LINETypes.retrieveRequestToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.retrieveRequestToken_args(...param),
            "retrieveRequestToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async revokeTokens(
        ...param: Parameters<typeof LINEStruct.revokeTokens_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.revokeTokens_args(...param),
            "revokeTokens",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async saveStudentInformation(
        ...param: Parameters<typeof LINEStruct.saveStudentInformation_args>
    ): Promise<LINETypes.saveStudentInformation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.saveStudentInformation_args(...param),
            "saveStudentInformation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async sendChatChecked(
        ...param: Parameters<typeof LINEStruct.sendChatChecked_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.sendChatChecked_args(...param),
            "sendChatChecked",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async sendChatRemoved(
        ...param: Parameters<typeof LINEStruct.sendChatRemoved_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.sendChatRemoved_args(...param),
            "sendChatRemoved",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async sendEncryptedE2EEKey(
        ...param: Parameters<typeof LINEStruct.sendEncryptedE2EEKey_args>
    ): Promise<LINETypes.sendEncryptedE2EEKey_result["success"]> {
        return await this.client.request.request(
            LINEStruct.sendEncryptedE2EEKey_args(...param),
            "sendEncryptedE2EEKey",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async sendMessage(
        ...param: Parameters<typeof LINEStruct.sendMessage_args>
    ): Promise<LINETypes.sendMessage_result["success"]> {
        return await this.client.request.request(
            LINEStruct.sendMessage_args(...param),
            "sendMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async sendPostback(
        ...param: Parameters<typeof LINEStruct.sendPostback_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.sendPostback_args(...param),
            "sendPostback",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async setChatHiddenStatus(
        ...param: Parameters<typeof LINEStruct.setChatHiddenStatus_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.setChatHiddenStatus_args(...param),
            "setChatHiddenStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async setHashedPassword(
        ...param: Parameters<typeof LINEStruct.setHashedPassword_args>
    ): Promise<LINETypes.setHashedPassword_result["success"]> {
        return await this.client.request.request(
            LINEStruct.setHashedPassword_args(...param),
            "setHashedPassword",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async setIdentifier(
        ...param: Parameters<typeof LINEStruct.setIdentifier_args>
    ): Promise<LINETypes.setIdentifier_result["success"]> {
        return await this.client.request.request(
            LINEStruct.setIdentifier_args(...param),
            "setIdentifier",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async setNotificationsEnabled(
        ...param: Parameters<typeof LINEStruct.setNotificationsEnabled_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.setNotificationsEnabled_args(...param),
            "setNotificationsEnabled",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async setPassword(
        ...param: Parameters<typeof LINEStruct.setPassword_args>
    ): Promise<LINETypes.setPassword_result["success"]> {
        return await this.client.request.request(
            LINEStruct.setPassword_args(...param),
            "setPassword",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async shouldShowWelcomeStickerBanner(
        ...param: Parameters<typeof LINEStruct.shouldShowWelcomeStickerBanner_args>
    ): Promise<LINETypes.shouldShowWelcomeStickerBanner_result["success"]> {
        return await this.client.request.request(
            LINEStruct.shouldShowWelcomeStickerBanner_args(...param),
            "shouldShowWelcomeStickerBanner",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async startPhotobooth(
        ...param: Parameters<typeof LINEStruct.startPhotobooth_args>
    ): Promise<LINETypes.startPhotobooth_result["success"]> {
        return await this.client.request.request(
            LINEStruct.startPhotobooth_args(...param),
            "startPhotobooth",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async startUpdateVerification(
        ...param: Parameters<typeof LINEStruct.startUpdateVerification_args>
    ): Promise<LINETypes.startUpdateVerification_result["success"]> {
        return await this.client.request.request(
            LINEStruct.startUpdateVerification_args(...param),
            "startUpdateVerification",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async stopBundleSubscription(
        ...param: Parameters<typeof LINEStruct.stopBundleSubscription_args>
    ): Promise<LINETypes.stopBundleSubscription_result["success"]> {
        return await this.client.request.request(
            LINEStruct.stopBundleSubscription_args(...param),
            "stopBundleSubscription",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async storeShareTargetPickerResult(
        ...param: Parameters<typeof LINEStruct.storeShareTargetPickerResult_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.storeShareTargetPickerResult_args(...param),
            "storeShareTargetPickerResult",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async storeSubWindowResult(
        ...param: Parameters<typeof LINEStruct.storeSubWindowResult_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.storeSubWindowResult_args(...param),
            "storeSubWindowResult",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async syncContacts(
        ...param: Parameters<typeof LINEStruct.syncContacts_args>
    ): Promise<LINETypes.syncContacts_result["success"]> {
        return await this.client.request.request(
            LINEStruct.syncContacts_args(...param),
            "syncContacts",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async sync(
        ...param: Parameters<typeof LINEStruct.sync_args>
    ): Promise<LINETypes.sync_result["success"]> {
        return await this.client.request.request(
            LINEStruct.sync_args(...param),
            "sync",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async tryFriendRequest(
        ...param: Parameters<typeof LINEStruct.tryFriendRequest_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.tryFriendRequest_args(...param),
            "tryFriendRequest",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async unblockContact(
        ...param: Parameters<typeof LINEStruct.unblockContact_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.unblockContact_args(...param),
            "unblockContact",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async unblockRecommendation(
        ...param: Parameters<typeof LINEStruct.unblockRecommendation_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.unblockRecommendation_args(...param),
            "unblockRecommendation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async unfollow(
        ...param: Parameters<typeof LINEStruct.unfollow_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.unfollow_args(...param),
            "unfollow",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async unlinkDevice(
        ...param: Parameters<typeof LINEStruct.unlinkDevice_args>
    ): Promise<LINETypes.unlinkDevice_result["success"]> {
        return await this.client.request.request(
            LINEStruct.unlinkDevice_args(...param),
            "unlinkDevice",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async unsendMessage(
        ...param: Parameters<typeof LINEStruct.unsendMessage_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.unsendMessage_args(...param),
            "unsendMessage",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateAndGetNearby(
        ...param: Parameters<typeof LINEStruct.updateAndGetNearby_args>
    ): Promise<LINETypes.updateAndGetNearby_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateAndGetNearby_args(...param),
            "updateAndGetNearby",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateChannelNotificationSetting(
        ...param: Parameters<typeof LINEStruct.updateChannelNotificationSetting_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateChannelNotificationSetting_args(...param),
            "updateChannelNotificationSetting",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateChannelSettings(
        ...param: Parameters<typeof LINEStruct.updateChannelSettings_args>
    ): Promise<LINETypes.updateChannelSettings_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateChannelSettings_args(...param),
            "updateChannelSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateChatRoomBGM(
        ...param: Parameters<typeof LINEStruct.updateChatRoomBGM_args>
    ): Promise<LINETypes.updateChatRoomBGM_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateChatRoomBGM_args(...param),
            "updateChatRoomBGM",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateChat(
        ...param: Parameters<typeof LINEStruct.updateChat_args>
    ): Promise<LINETypes.updateChat_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateChat_args(...param),
            "updateChat",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateContactSetting(
        ...param: Parameters<typeof LINEStruct.updateContactSetting_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateContactSetting_args(...param),
            "updateContactSetting",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateExtendedProfileAttribute(
        ...param: Parameters<typeof LINEStruct.updateExtendedProfileAttribute_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateExtendedProfileAttribute_args(...param),
            "updateExtendedProfileAttribute",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateGroupCallUrl(
        ...param: Parameters<typeof LINEStruct.updateGroupCallUrl_args>
    ): Promise<LINETypes.updateGroupCallUrl_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateGroupCallUrl_args(...param),
            "updateGroupCallUrl",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateIdentifier(
        ...param: Parameters<typeof LINEStruct.updateIdentifier_args>
    ): Promise<LINETypes.updateIdentifier_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateIdentifier_args(...param),
            "updateIdentifier",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateNotificationToken(
        ...param: Parameters<typeof LINEStruct.updateNotificationToken_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateNotificationToken_args(...param),
            "updateNotificationToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updatePassword(
        ...param: Parameters<typeof LINEStruct.updatePassword_args>
    ): Promise<LINETypes.updatePassword_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updatePassword_args(...param),
            "updatePassword",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateProfileAttributes(
        ...param: Parameters<typeof LINEStruct.updateProfileAttributes_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateProfileAttributes_args(...param),
            "updateProfileAttributes",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateSafetyStatus(
        ...param: Parameters<typeof LINEStruct.updateSafetyStatus_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateSafetyStatus_args(...param),
            "updateSafetyStatus",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateSettingsAttributes2(
        ...param: Parameters<typeof LINEStruct.updateSettingsAttributes2_args>
    ): Promise<LINETypes.updateSettingsAttributes2_result["success"]> {
        return await this.client.request.request(
            LINEStruct.updateSettingsAttributes2_args(...param),
            "updateSettingsAttributes2",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async updateUserGeneralSettings(
        ...param: Parameters<typeof LINEStruct.updateUserGeneralSettings_args>
    ): Promise<void> {
        return await this.client.request.request(
            LINEStruct.updateUserGeneralSettings_args(...param),
            "updateUserGeneralSettings",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async usePhotoboothTicket(
        ...param: Parameters<typeof LINEStruct.usePhotoboothTicket_args>
    ): Promise<LINETypes.usePhotoboothTicket_result["success"]> {
        return await this.client.request.request(
            LINEStruct.usePhotoboothTicket_args(...param),
            "usePhotoboothTicket",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async validateEligibleFriends(
        ...param: Parameters<typeof LINEStruct.validateEligibleFriends_args>
    ): Promise<LINETypes.validateEligibleFriends_result["success"]> {
        return await this.client.request.request(
            LINEStruct.validateEligibleFriends_args(...param),
            "validateEligibleFriends",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async validateProduct(
        ...param: Parameters<typeof LINEStruct.validateProduct_args>
    ): Promise<LINETypes.validateProduct_result["success"]> {
        return await this.client.request.request(
            LINEStruct.validateProduct_args(...param),
            "validateProduct",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async validateProfile(
        ...param: Parameters<typeof LINEStruct.validateProfile_args>
    ): Promise<LINETypes.validateProfile_result["success"]> {
        return await this.client.request.request(
            LINEStruct.validateProfile_args(...param),
            "validateProfile",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyAccountUsingHashedPwd(
        ...param: Parameters<typeof LINEStruct.verifyAccountUsingHashedPwd_args>
    ): Promise<LINETypes.verifyAccountUsingHashedPwd_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyAccountUsingHashedPwd_args(...param),
            "verifyAccountUsingHashedPwd",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyAssertion(
        ...param: Parameters<typeof LINEStruct.verifyAssertion_args>
    ): Promise<LINETypes.verifyAssertion_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyAssertion_args(...param),
            "verifyAssertion",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyAttestation(
        ...param: Parameters<typeof LINEStruct.verifyAttestation_args>
    ): Promise<LINETypes.verifyAttestation_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyAttestation_args(...param),
            "verifyAttestation",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyBirthdayGiftAssociationToken(
        ...param: Parameters<typeof LINEStruct.verifyBirthdayGiftAssociationToken_args>
    ): Promise<LINETypes.verifyBirthdayGiftAssociationToken_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyBirthdayGiftAssociationToken_args(...param),
            "verifyBirthdayGiftAssociationToken",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyEapAccountForRegistration(
        ...param: Parameters<typeof LINEStruct.verifyEapAccountForRegistration_args>
    ): Promise<LINETypes.verifyEapAccountForRegistration_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyEapAccountForRegistration_args(...param),
            "verifyEapAccountForRegistration",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyEapLogin(
        ...param: Parameters<typeof LINEStruct.verifyEapLogin_args>
    ): Promise<LINETypes.verifyEapLogin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyEapLogin_args(...param),
            "verifyEapLogin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyPhoneNumber(
        ...param: Parameters<typeof LINEStruct.verifyPhoneNumber_args>
    ): Promise<LINETypes.verifyPhoneNumber_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyPhoneNumber_args(...param),
            "verifyPhoneNumber",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyPhonePinCode(
        ...param: Parameters<typeof LINEStruct.verifyPhonePinCode_args>
    ): Promise<LINETypes.verifyPhonePinCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyPhonePinCode_args(...param),
            "verifyPhonePinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyPinCode(
        ...param: Parameters<typeof LINEStruct.verifyPinCode_args>
    ): Promise<LINETypes.verifyPinCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyPinCode_args(...param),
            "verifyPinCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyQrCode(
        ...param: Parameters<typeof LINEStruct.verifyQrCode_args>
    ): Promise<LINETypes.verifyQrCode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyQrCode_args(...param),
            "verifyQrCode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifyQrcode(
        ...param: Parameters<typeof LINEStruct.verifyQrcode_args>
    ): Promise<LINETypes.verifyQrcode_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifyQrcode_args(...param),
            "verifyQrcode",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async verifySocialLogin(
        ...param: Parameters<typeof LINEStruct.verifySocialLogin_args>
    ): Promise<LINETypes.verifySocialLogin_result["success"]> {
        return await this.client.request.request(
            LINEStruct.verifySocialLogin_args(...param),
            "verifySocialLogin",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
    async wakeUpLongPolling(
        ...param: Parameters<typeof LINEStruct.wakeUpLongPolling_args>
    ): Promise<LINETypes.wakeUpLongPolling_result["success"]> {
        return await this.client.request.request(
            LINEStruct.wakeUpLongPolling_args(...param),
            "wakeUpLongPolling",
            this.protocolType,
            true,
            this.requestPath,
        );
    }
